"test_id","feature_area","test_type","test_level","priority","automation_candidate","automation_roi","test_description","business_risk","technical_complexity","preconditions","test_steps","expected_result","test_data_needs","tools_required","estimated_effort_hours","automation_effort_hours","maintenance_effort_annual","dependencies","environment_requirements","success_criteria","failure_impact","regression_frequency","data_setup_complexity","cleanup_requirements","security_considerations","performance_expectations","accessibility_requirements"
"TEST-AUTH-001","Customer Authentication","Functional","E2E","Critical","true","High","Verify customer can successfully log in using their registered mobile number and a valid OTP within the specified performance and security constraints.","High - Login failure blocks all customer activity and revenue generation.","Medium","Customer account exists with 'active' status. Customer has the mobile app installed. AWS SNS and Cognito services are operational.","1. Launch the customer mobile app and navigate to the login screen. 2. Enter a valid, registered mobile number. 3. Tap 'Send OTP'. 4. Intercept/receive the generated OTP. 5. Enter the correct OTP. 6. Tap 'Verify & Login'.","User is successfully authenticated. JWT access and refresh tokens are received and stored securely. User is redirected to the main discovery screen. The entire process completes in under 3 seconds.","A pre-registered, active customer account with a known mobile number. A mechanism to retrieve OTPs in the test environment.","Detox/Appium; Test environment with OTP retrieval mechanism.","8","16","4","CUS-001, AWS Cognito, AWS SNS","Staging environment with integrated AWS services.","100% pass rate. P95 latency < 3 seconds end-to-end. JWTs are correctly issued.","Critical - Blocks all user access.","Every release, and nightly smoke tests.","Medium","Invalidate user session tokens.","Verify OTP rate limiting and account lockout logic (covered in TEST-SEC-002).","E2E login flow < 3 seconds.","All login UI elements must be WCAG 2.1 AA compliant."
"TEST-ORDER-001","Order Placement","Functional","E2E","Critical","true","High","Verify a customer can successfully place a prepaid (UPI/Card) order, triggering the complete distributed transaction including inventory check, payment, order creation, and notifications.","Critical - This is the primary revenue-generating workflow.","High","Customer is logged in. Vendor is online with available products. Payment gateway (Razorpay) sandbox is available.","1. Log in as a customer. 2. Add an available item to the cart. 3. Proceed to checkout and confirm address. 4. Select a prepaid payment method. 5. Initiate payment and complete the transaction in the payment gateway's test interface. 6. Verify redirection to the 'Order Placed' confirmation screen.","Order is created with 'Pending Vendor Acceptance' status. A transaction is recorded. Customer receives confirmation notifications (SMS/Push). Order appears in the vendor's dashboard in real-time.","Active customer, vendor, and product data. Razorpay sandbox credentials.","Detox/Appium; Cypress (for vendor dashboard); Razorpay sandbox.","16","32","8","CUS-016, CUS-025, VND-016, REQ-1-056","Staging environment with all microservices and external integrations active.","100% pass rate. Order created successfully with consistent state across all services. All notifications triggered.","Critical - Direct revenue loss and poor customer experience.","Every release, and nightly critical path tests.","High","Cancel or complete the test order to reset inventory and user state.","Verify PCI-DSS compliance by ensuring no sensitive cardholder data is stored.","Checkout API P95 latency < 200ms.","Checkout flow must be fully accessible."
"TEST-LOGISTICS-001","Rider Allocation","Functional","Integration","High","true","High","Verify the rider allocation system correctly re-assigns a task when a rider rejects it, and escalates to 'Allocation Failed' after the maximum number of attempts.","High - Failure leads to unfulfilled orders and delivery delays.","High","An order is in 'Ready for Pickup' state. At least 3 riders are 'Online' in the vicinity.","1. Trigger the allocation process for the order. 2. Mock Rider A to reject the task. 3. Verify the task is immediately offered to Rider B. 4. Mock Rider B to let the offer time out. 5. Verify the task is offered to Rider C. 6. Mock Rider C to reject the task.","After 3 rejections, the order status changes to 'Allocation Failed'. A high-priority alert is generated for the administrator dashboard. No further allocation attempts are made for this order.","An order in 'Ready for Pickup' state. Multiple rider accounts with mockable states.","Jest/Supertest; Mocking framework for rider clients; WebSocket test client.","12","24","6","REQ-1-078, REQ-1-079, SYS-002, SYS-003","Integration environment with Rider Logistics, Order Management, and Notification services.","Order correctly transitions to 'Allocation Failed'. Admin alert is generated. Re-assignment logic follows the defined rules.","High - Orders get stuck, leading to customer complaints.","Every release.","High","Reset the order status.","Ensure allocation events are secure and cannot be spoofed.","P95 time for rider allocation < 30 seconds.","N/A for this backend test."
"TEST-SEC-001","Data Privacy","Security","E2E","Critical","true","High","Verify the 'Right to Erasure' feature correctly anonymizes all customer PII across all relevant microservices while preserving non-personal transactional data for auditing.","Critical - Failure represents a major compliance breach of the DPDP Act, 2023.","High","A customer account exists with a history of completed orders.","1. Log in as the test customer. 2. Initiate the data erasure process from the profile settings. 3. Confirm the action. 4. Verify the user is logged out and cannot log back in. 5. Using an admin account, view the historical orders of the deleted user. 6. Directly query the database tables (Users, Orders, Addresses) to inspect the data.","The user's account is deactivated. All PII (name, address, contact info) in their profile and historical orders is replaced with generic placeholders. Non-personal transactional data (item details, amounts, timestamps) remains intact.","A customer account with a complex order history.","Detox/Appium; Cypress; PostgreSQL client.","20","40","10","CUS-043, REQ-1-023, REQ-1-095","Staging environment with a production-like dataset.","100% of defined PII fields are anonymized. 0% of required transactional data is lost. User is fully locked out.","Critical - Legal and financial penalties for compliance failure.","Every major release.","High","N/A - The data is permanently anonymized.","The test must validate data across all microservice boundaries.","Asynchronous process should complete within 5 minutes.","N/A."