"task_id","title","description","type","status","priority","assignee","reporter","due_date","estimated_hours","story_points","labels","sprint","sprint_goal","epic","epic_id","project","parent_id","dependencies","skills_required","complexity","risk_level","acceptance_criteria","definition_of_done","created_at","updated_at","sprint_start_date","sprint_end_date","capacity_allocation","collaboration_required","external_dependencies","testing_requirements","deployment_notes","business_value"
"VND-001-BE-01","[BE] Implement Vendor Registration Endpoint and Core Logic","Develop the NestJS controller and service to handle the vendor registration request. Implement validation for all fields (uniqueness for mobile/GST), create user in Cognito, and save vendor data to PostgreSQL with 'pending_verification' status.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-11-15","12.3","8","backend,nestjs,auth,onboarding","Sprint 1","Establish core user registration for all user types and the admin approval workflow.","Vendor & Admin Onboarding Workflow","EPIC-VND-ONBOARD","Hyperlocal Delivery Platform","VND-001","VND-001-ANA-01","NestJS,TypeScript,AWS Cognito,TypeORM","High","Medium","Endpoint functional; Validation enforced; New user created in Cognito and PostgreSQL.","Code reviewed; Unit/Integration tests passing (>80% coverage); Deployed to staging.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2024-11-04","2024-11-15","100%","DevOps for Cognito setup","AWS Cognito User Pool configured","Integration test for Cognito and DB writes","Requires database migration for vendor table.","Enables new vendor acquisition."
"CUS-025-BE-01","[BE] Implement Payment Initiation and Gateway Integration","Develop the backend logic to handle payment initiation with Razorpay. This includes a final inventory check, creating a payment order with Razorpay, and handling the success/failure callbacks.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2025-01-24","16","13","backend,payments,razorpay,checkout","Sprint 5","Implement the complete online payment, order creation, and confirmation flow.","Order Lifecycle Management","EPIC-ORDER","Hyperlocal Delivery Platform","CUS-025","CUS-024-BE-01,SYS-008-BE-01","NestJS,Payment Gateway Integration,Distributed Transactions","Critical","High","Successful payment redirects to success screen; Failed payment redirects to error screen; Inventory check blocks payment.","Code reviewed; Integration tests with Razorpay sandbox passing; Security review complete.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2025-01-13","2025-01-24","100%","Frontend team for redirect URLs","Razorpay Sandbox credentials","E2E testing with Razorpay test cards","API keys must be stored in AWS Secrets Manager.","Enables the core revenue-generating transaction."
"SYS-006-BE-01","[BE] Implement Weekly Rider Settlement Job","Create a weekly scheduled job to calculate each rider's net earnings (earnings - COD collected) and initiate payouts via RazorpayX API for those with a positive balance. Handle negative balances and idempotency.","Task","Sprint Backlog","High","backend.lead@company.com","product.owner@company.com","2025-04-18","24","13","backend,cronjob,financials,payouts","Sprint 9","Automate the entire settlement and payout process for both riders and vendors.","Automated Financial Operations","EPIC-FIN-OPS","Hyperlocal Delivery Platform","SYS-006","RDR-024,RDR-026,ADM-028","NestJS,Financial Logic,Batch Processing,API Integration","High","High","Job calculates correct payout; Payouts initiated for positive balances; Negative balances carried over; Job is idempotent.","Code reviewed; Calculations manually verified; Integration tests with RazorpayX sandbox passing; Runbook created.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2025-04-07","2025-04-18","100%","Finance team for validation","RazorpayX Payout API","E2E testing against RazorpayX sandbox; Manual verification of financial accuracy.","Requires K8s CronJob configuration.","Ensures timely and accurate rider payments, critical for rider retention."
"ADM-013-FE-01","[FE] Build Geofencing UI with Mapbox","Integrate Mapbox SDK into the Admin Dashboard. Develop a UI for drawing, editing, and saving polygon-based operational zones. This includes a map interface and form fields for zone name and status.","Task","Sprint Backlog","High","frontend.dev1@company.com","product.owner@company.com","2025-05-16","16","8","frontend,react,mapbox,geofencing","Sprint 10","Build the core business rule configuration screens for administrators.","Service Area Management","EPIC-GEO","Hyperlocal Delivery Platform","ADM-013","ADM-013-BE-01","React,Mapbox SDK,GeoJSON,State Management","High","Medium","Admin can draw, edit, and save a zone; Zone status can be toggled; Invalid polygons are rejected.","Code reviewed; E2E tests for CRUD operations passing; UI/UX approved.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2025-05-05","2025-05-16","100%","Backend team for GeoJSON format","Mapbox API Keys","E2E tests with Cypress for map interactions.","Requires Mapbox API key in environment variables.","Enables controlled market expansion and service area management."