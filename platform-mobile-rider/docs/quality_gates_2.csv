"gate_name","gate_type","trigger_event","success_criteria","failure_action","responsible_team","automation_level","tools_used","measurement_frequency","escalation_procedure","historical_pass_rate","average_resolution_time","business_impact"
"Pull Request CI Gate","Static & Unit","Pull Request to main branch","Linting passes; Unit test coverage >= 80% (REQ-1-101); All unit tests pass; No critical vulnerabilities in dependency scan (Snyk).","Block pull request merge","Development Team","Fully Automated","GitHub Actions, Jest, Snyk","Every commit to a PR","Developer must fix issues before merging.","90","0.5","Prevents low-quality code and vulnerable dependencies from entering the main branch."
"Staging Deployment Gate","E2E & Integration","Merge to main branch","All integration tests pass; Critical path E2E scenarios pass (e.g., login, place order); Smoke test passes on deployed environment.","Halt deployment, trigger alert, and roll back if necessary.","QA & DevOps Team","Fully Automated","GitHub Actions, Cypress, Detox, Postman","Every merge to main","On-call engineer is alerted via PagerDuty.","85","4","Prevents broken builds from reaching the primary testing environment, ensuring it remains stable."
"Pre-Production Release Gate","Performance & Security","Manual trigger before production release","Load tests pass against performance benchmarks (REQ-1-093); No new high/critical vulnerabilities found in dynamic security scan (OWASP ZAP); Full regression suite passes.","Block production release; Convene go/no-go meeting.","QA, Security, & SRE Teams","Partially Automated","k6, OWASP ZAP, Cypress, Detox","Per release candidate","Release Manager, Product Owner, and Engineering Lead.","95","24","Final quality check to prevent performance degradation and security vulnerabilities in production."