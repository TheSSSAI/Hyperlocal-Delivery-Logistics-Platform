"test_id","feature_area","test_type","test_level","priority","automation_candidate","automation_roi","test_description","business_risk","technical_complexity","preconditions","test_steps","expected_result","test_data_needs","tools_required","estimated_effort_hours","automation_effort_hours","maintenance_effort_annual","dependencies","environment_requirements","success_criteria","failure_impact","regression_frequency","data_setup_complexity","cleanup_requirements","security_considerations","performance_expectations","accessibility_requirements"
"TEST-AUTH-001","User Authentication","Functional","E2E","Critical","true","High","Verify a registered customer can successfully log in using their mobile number and a valid OTP, and their session is established.","High - Login failure blocks all customer activity and revenue generation.","Medium","A customer account exists with a 'verified' status and a known mobile number. The authentication service and SMS gateway are operational.","1. Navigate to the customer mobile app login screen. 2. Enter the registered mobile number. 3. Tap 'Send OTP'. 4. Retrieve the OTP from the test harness. 5. Enter the correct OTP. 6. Tap 'Verify'.","User is successfully authenticated, receives valid JWT access and refresh tokens, and is redirected to the main vendor discovery screen.","Pre-registered customer account, a test mobile number hooked to the test harness for OTP retrieval.","Detox/Appium, Test Harness for OTPs, Postman (for API validation).","3","12","4","CUS-001 (Registration), AWS Cognito, AWS SNS.","Staging environment with a connection to the SMS gateway sandbox.","Login completes in < 3 seconds (REQ-FUN-002). Valid JWTs are issued. User is redirected to the home screen.","Critical - All users are unable to access the platform.","Every build","Medium - Requires user provisioning and OTP interception setup.","Clear session data and any stored tokens after the test run.","OTPs must be handled securely in the test environment. Brute-force protection must be tested separately.","End-to-end process completes within 3 seconds as per REQ-FUN-002.","All login form elements are accessible via screen readers."
"TEST-ORDER-001","Order Placement","Functional","E2E","Critical","true","High","Verify a customer can successfully place a prepaid order from an available vendor, complete payment, and receive confirmation.","Critical - This is the primary revenue-generating flow of the platform.","High","Customer is logged in. At least one vendor is 'Online' with an in-stock product. Payment gateway sandbox is available.","1. Navigate to a vendor's page. 2. Add an item to the cart. 3. Proceed to checkout. 4. Confirm delivery address and review order summary. 5. Select 'UPI' as the payment method. 6. Complete the payment flow in the mock payment gateway. 7. Verify redirection to the 'Order Successful' screen.","The order is created in the backend with 'Pending Vendor Acceptance' status. A transaction record is created. The customer receives an order confirmation notification (SMS/Push).","Test customer account, test vendor with products, Razorpay sandbox credentials.","Detox/Appium, Razorpay Sandbox, Test Notification Listener.","6","24","8","CUS-016 (Add to Cart), CUS-025 (Online Payment), VND-007 (Vendor Availability).","Staging environment with integrated Razorpay sandbox and notification services.","Order is created successfully. All financial records are accurate. Notifications are sent. End-to-end flow completes without errors.","Critical - Prevents revenue generation and destroys customer trust.","Every build","High - Requires setting up a full marketplace state (customer, vendor, product).","Cancel or complete the test order to reset the state.","Payment process must not handle raw card data on the platform servers (PCI-DSS compliance).","Checkout APIs must respond within 200ms P95.","The entire checkout flow must be accessible."
"TEST-ADMIN-001","Admin User Management","Security","Integration","Critical","true","High","Verify that an Administrator can suspend a user account, and this action is correctly audited and enforced.","High - Failure to moderate users can lead to platform abuse and security incidents.","Medium","An Administrator account and an active Customer account exist.","1. Authenticate as Administrator and get JWT. 2. Call the API to suspend the Customer account (PATCH /admin/users/{userId}/suspend), providing a reason. 3. Verify API returns success (204). 4. Query the audit log API to confirm the action was recorded. 5. Attempt to log in as the suspended Customer.","The user's status is updated to 'suspended'. An immutable audit log is created with all details. The suspended user is unable to log in and their active sessions are invalidated.","Administrator account, active Customer account.","Postman/Jest (Supertest), Database client.","2","6","1","ADM-006, ADM-021, REQ-1-013.","Integration environment.","User status is 'suspended'. Audit log exists. Suspended user cannot log in.","Critical - Inability to manage users poses a major security risk.","Every release","Medium","Reactivate the suspended user.","Endpoint must be protected by RBAC. Audit log must be immutable.","API response < 500ms.","N/A (API test)."