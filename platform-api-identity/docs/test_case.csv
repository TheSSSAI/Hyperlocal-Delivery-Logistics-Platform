"test_id","feature_area","test_type","test_level","priority","automation_candidate","automation_roi","test_description","business_risk","technical_complexity","preconditions","test_steps","expected_result","test_data_needs","tools_required","estimated_effort_hours","automation_effort_hours","maintenance_effort_annual","dependencies","environment_requirements","success_criteria","failure_impact","regression_frequency","data_setup_complexity","cleanup_requirements","security_considerations","performance_expectations","accessibility_requirements"
"TEST-AUTH-001","Authentication (REQ-1-039)","Security","Integration","Critical","true","High","Verify that a user account is temporarily locked after 5 consecutive failed OTP login attempts.","High - Prevents brute-force attacks and protects user accounts from takeover.","Medium","Identity service is running; Redis is available; A user account exists.","1. Request an OTP for a valid user. 2. Submit an incorrect OTP 5 times. 3. Verify the API response indicates account lockout. 4. Attempt to request a new OTP for the same user. 5. Verify the API rejects the request due to lockout.","After the 5th failed attempt, the API returns a 429 error with a 'account locked' message. Subsequent requests within the lockout period are also rejected.","A valid user account with a known mobile number.","Jest (Supertest); Postman; Redis client","3","6","1","Identity & Access Service; Redis","Integration environment with Redis.","Lockout is triggered on the 5th attempt; no logins possible during lockout.","Critical - Security vulnerability allowing brute-force attacks.","Every release","Low","Clear Redis keys for the test user's failed attempts and lockout status.","This test validates a primary security control (REQ-1-041).","API response should remain <200ms.","N/A"
"TEST-ORD-001","Checkout Saga (REQ-1-105)","Functional","System","Critical","true","High","Verify the end-to-end checkout saga for a prepaid order, including inventory check, payment, and order creation.","Critical - Failure in the checkout process directly results in lost revenue and poor customer experience.","High","All microservices (Order, Payment, Catalog) are running; Customer is authenticated with items in cart.","1. Customer initiates checkout. 2. Order service starts Saga. 3. Saga calls Catalog service for inventory check (success). 4. Saga calls Payment service to create payment intent (success). 5. Customer completes mock payment. 6. Payment service confirms payment and notifies Saga. 7. Saga finalizes order status to 'Pending Vendor Acceptance'.","The order is successfully created with the correct status, and a transaction record exists in the Payment service.","Authenticated customer; Vendor with in-stock products; Razorpay sandbox credentials.","Cypress; Postman; Mock server for Razorpay","8","24","8","Order Service, Payment Service, Catalog Service, Notification Service","Staging environment with all services and mock external APIs.","Order is created in the correct state; all compensating transactions are tested for failure paths.","Critical - Inconsistent data (e.g., payment taken but no order created).","Every release","High","Reset test data for customer, vendor, and product stock.","Validate payment signature verification as part of the saga.","The entire user-facing checkout process should feel seamless.","N/A"
"TEST-RDR-001","Live Delivery Tracking (REQ-1-059)","Functional","E2E","High","true","Medium","Verify that the customer's map view updates in real-time based on location data sent from the rider's app.","Medium - Failure impacts customer experience and trust, but does not prevent delivery.","High","An order is in 'In Transit' state; Customer and Rider apps are running on separate devices/emulators.","1. Rider app starts sending mock GPS coordinates via WebSocket. 2. Verify the backend receives the coordinates. 3. Verify the backend broadcasts the coordinates to the customer's app. 4. Verify the rider icon on the customer's map moves to the new coordinates within 2 seconds.","The customer's map smoothly tracks the rider's simulated movement with a latency under 2 seconds (REQ-1-061).","An order in 'In Transit' state with an assigned rider and customer.","Appium/Detox; WebSocket test client; GPS simulation tool.","6","32","12","Rider Logistics Service; Notification Service (WebSockets); Customer App; Rider App","Staging environment with WebSocket support.","Real-time updates are consistent and low-latency.","High - Core feature failure, leading to customer dissatisfaction.","Every release","High","Complete or cancel the test order.","Ensure chat channels are properly isolated per order.","Low battery and data usage on the rider's device.","N/A"
"TEST-PERF-001","API Performance (REQ-1-093)","Performance","System","Critical","true","High","Verify that critical APIs meet the P95 latency target of <200ms under a sustained load of 100 orders per minute.","Critical - Poor performance leads to a bad user experience, cart abandonment, and system instability.","High","The application is deployed to a production-like performance testing environment.","1. Ramp up virtual users to simulate 10,000 concurrent users. 2. Generate a sustained load of 100 new orders/minute. 3. Monitor P95 latency for critical endpoints (e.g., add to cart, checkout, get nearby vendors). 4. Monitor system resources (CPU, Memory, DB connections).","All critical APIs maintain P95 latency below 200ms. System remains stable with resource utilization below 80%.","Large, anonymized dataset of users, vendors, and products.","k6/JMeter; Prometheus; Grafana; New Relic","16","40","10","All backend microservices","Dedicated, scalable performance testing environment.","Meet all performance targets defined in REQ-1-093 without errors.","Critical - Platform is not viable for production launch.","Weekly and before every major release","High","Tear down load generators; reset performance database.","Test data must be anonymized.","N/A","N/A"