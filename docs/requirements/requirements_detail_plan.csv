id,req_id,category,formalized_text,feature_group,original_text,assumptions,constraints,dependencies,detail_analysis,priority,validation_criteria
689,REQ-1-001,Functional,"The system shall function as a three-sided marketplace, providing distinct interfaces and functionalities to connect three user classes: Customers, Vendors, and Delivery Riders.",Platform Core System,"The platform shall connect local vendors, customers, and delivery riders in a three-sided marketplace.",['A sufficient population of all three user types exists within a given operational area to create a viable market.'],[],[],FALSE,high,"['Verify that separate onboarding and operational flows exist for Customers, Vendors, and Riders.', 'Verify that the system facilitates transactions and interactions between these three user groups.']"
690,REQ-1-002,Technical,"The system shall provide four distinct client applications: a mobile application for Customers, a web-based dashboard for Vendors, a mobile application for Riders, and a web-based dashboard for platform Administrators.",Platform Core System,"The platform shall include a customer-facing mobile application, a vendor-facing web dashboard, a rider-facing mobile application, and an administrative backend for platform management.",[],[],['REQ-1-001'],FALSE,high,"['Confirm the existence and accessibility of a customer mobile app.', 'Confirm the existence and accessibility of a vendor web dashboard.', 'Confirm the existence and accessibility of a rider mobile app.', 'Confirm the existence and accessibility of an administrator web dashboard.']"
691,REQ-1-003,Functional,"The system shall implement the following core functional modules: User Onboarding, Product Discovery and Search, Order Placement and Cart Management, Payment Processing, Live Delivery Tracking, and a Ratings and Review system.",Platform Core System,"The platform shall provide core functionalities including user onboarding, product discovery, order placement, payment processing, live delivery tracking, and a ratings/review system.",[],[],['REQ-1-001'],FALSE,high,['Verify that each of the listed core functional modules is implemented and accessible to the relevant user roles.']
692,REQ-1-004,Functional,"The system's backend shall provide logistics and financial management services, including automated rider allocation for new orders, route optimization for deliveries, and commission calculation and management for vendor sales.",Platform Core System,"The platform shall provide backend logistics including rider allocation, route optimization, and commission management.",[],[],[],FALSE,high,"['Verify that a mechanism exists to automatically assign riders to orders.', 'Verify that the system can generate an optimized route for a given delivery.', 'Verify that commissions are calculated and recorded for completed orders.']"
693,REQ-1-005,Technical,"The scope of the system shall explicitly exclude the following functionalities: management of physical warehouses, ownership of inventory, international shipping, deep integration with third-party POS or ERP systems, and the manufacturing of goods.",Platform Core System,"The platform shall explicitly exclude physical warehouse management or inventory ownership, international shipping and logistics, in-depth vendor-side Point of Sale (POS) or ERP integration, and the manufacturing or production of goods.",[],"[""The platform operates as a facilitator and does not hold its own stock.""]",[],FALSE,high,"['Confirm that no features related to warehouse management, inventory ownership, or international logistics are present in the system.', ""Confirm that vendor integration is limited to the platform's provided tools and does not extend to deep POS/ERP sync.""]"
694,REQ-1-006,Functional,"The system shall provide a self-contained inventory management module within the vendor-facing dashboard, allowing vendors to manage their product catalog and stock levels directly on the platform.",Platform Core System,The platform shall provide its own inventory management tools for vendors.,[],[],['REQ-1-002'],FALSE,high,"['Verify that the vendor dashboard includes features to add, edit, and delete products.', 'Verify that vendors can update stock quantities for their products.']"
695,REQ-1-007,Technical,The system shall be architected as a cloud-native application using a microservices pattern. All infrastructure and services shall be hosted on the Amazon Web Services (AWS) cloud platform.,Platform Core System,"The platform shall be a self-contained, cloud-native system. The system shall be designed using a microservices architecture and hosted on Amazon Web Services (AWS).",[],"[""The system is locked into the AWS ecosystem.""]",[],FALSE,high,"['Review architecture diagrams to confirm a microservices-based design.', 'Confirm that all system components are deployed on AWS infrastructure.']"
696,REQ-1-008,Technical,"The system shall integrate with third-party services for core functionalities. These integrations must include a payment gateway for processing transactions, a mapping service for location data and routing, and notification services for SMS and push notifications.",Platform Core System,"The system shall interface with external systems, including payment gateways, mapping services, and notification services.","['APIs for these third-party services are available, reliable, and well-documented.']",[],[],FALSE,high,"['Verify successful integration with a payment gateway (e.g., Razorpay).', 'Verify successful integration with a mapping service (e.g., Mapbox).', 'Verify successful integration with notification services (e.g., FCM, AWS SNS).']"
697,REQ-1-009,Functional,"The system shall implement a 'Customer' user role with the following permissions: Create, Read, and Update their own user profile and saved addresses; Read-only access to vendor profiles and product catalogs; Create and Read access to their own orders; and Create access for ratings and reviews on completed orders.",Platform Core System,"A Customer user role shall be able to create, read, and update their own profile and addresses; read vendor and product data; create and read their own orders; and create ratings and reviews.",[],[],[],FALSE,high,"['Log in as a Customer and verify the ability to edit profile information and manage addresses.', 'Verify that a Customer can browse vendors and products.', 'Verify that a Customer can place an order and view their order history.', ""Verify that a Customer cannot view or edit another customer's data."", 'Verify that a Customer can submit a rating/review for a delivered order.']"
698,REQ-1-010,Functional,"The system shall implement a 'Vendor' user role with the following permissions: Create, Read, and Update their own store profile, product catalog, and inventory levels; Read and Update access to the status of orders assigned to their store; and Read-only access to ratings and reviews submitted for their store.",Platform Core System,"A Vendor user role shall be able to create, read, and update their own store profile, products, and inventory; read and update orders assigned to them; and read ratings and reviews for their store.",[],[],[],FALSE,high,"['Log in as a Vendor and verify the ability to edit store details and manage products/inventory.', 'Verify that a Vendor can view incoming orders and update their status (e.g., accept, reject, preparing).', 'Verify that a Vendor can view ratings and reviews left by customers.', 'Verify that a Vendor cannot access data belonging to other vendors.']"
699,REQ-1-011,Functional,"The system shall implement a 'Rider' user role with the following permissions: Create, Read, and Update their own user profile; Read-only access to the details of assigned delivery tasks; Update access to the status of their assigned deliveries (e.g., picked up, delivered); and Read-only access to ratings and reviews of their own performance.",Platform Core System,"A Rider user role shall be able to create, read, and update their own profile; read assigned delivery tasks; update the status of assigned deliveries; and read ratings and reviews for their performance.",[],[],[],FALSE,high,"['Log in as a Rider and verify the ability to edit their profile information.', 'Verify that a Rider can view the details of a delivery task assigned to them.', 'Verify that a Rider can update the delivery status through the app.', 'Verify that a Rider can view their performance ratings.', 'Verify that a Rider cannot access data for deliveries not assigned to them.']"
700,REQ-1-012,Functional,"The system shall implement an 'Administrator' user role with full Create, Read, Update, and Delete (CRUD) permissions across all data entities within the system, including but not limited to user profiles, orders, vendor stores, and system configurations.",Platform Core System,"An Administrator user role shall have full Create, Read, Update, Delete (CRUD) access on all system data.",['Administrator accounts are provisioned securely and only to trusted personnel.'],[],[],FALSE,high,"['Log in as an Administrator and verify the ability to view, create, edit, and delete records for customers, vendors, and riders.', 'Verify that an Administrator can view and modify any order in the system.', 'Verify that an Administrator can access and change system-wide settings.']"
701,REQ-1-013,NonFunctional,"The system shall implement a dedicated, immutable audit trail to log all data modification actions performed by users with the 'Administrator' role. Each log entry must record the administrator who performed the action, the action taken, the data that was changed, and a timestamp.",Platform Core System,"All administrative actions that modify data (e.g., user suspension, order cancellation, configuration changes) must be logged in a dedicated, immutable audit trail.",[],[],['REQ-1-012'],FALSE,high,"['Perform a data-modifying action as an Administrator (e.g., suspend a user).', 'Verify that a corresponding entry is created in the audit log with the correct details (admin ID, action, target ID, timestamp).', 'Verify that the audit log cannot be modified or deleted through the admin interface.']"
702,REQ-1-014,Functional,"For critical delete operations initiated by an Administrator (e.g., deleting a user account, deleting a vendor store), the user interface shall enforce a two-step confirmation process. The user must first initiate the delete action and then explicitly confirm their choice in a subsequent modal or dialog box before the action is executed.",Platform Core System,Critical delete operations shall require a two-step confirmation process.,[],[],['REQ-1-012'],FALSE,medium,"['As an Administrator, attempt to delete a critical data entity.', 'Verify that a confirmation dialog appears asking for a second confirmation.', 'Verify that canceling the confirmation dialog aborts the delete operation.', 'Verify that confirming the dialog proceeds with the deletion.']"
703,REQ-1-015,Functional,"The system's chat functionality shall enforce role-based permissions. Customers, Vendors, and Riders can only create and read messages within the context of an active order they are directly involved in. Once an order is completed, the associated chat history must become read-only for all parties. Administrators shall have read-only access to all chat logs for all orders.",Platform Core System,"Chat permissions shall be enforced as follows: Customer, Vendor, and Rider roles can create and read messages only for active orders they are party to. Chat history shall become read-only upon order completion. The Administrator role shall have read-only access to all chat logs for support and moderation purposes.",[],[],['REQ-1-081'],FALSE,medium,"['Verify that a customer can only chat with the vendor and rider of their active order.', ""Verify that after an order is marked 'Delivered' or 'Cancelled', the chat input is disabled for all parties."", 'Verify that an Administrator can view the chat history for any order but cannot send messages.', 'Verify a user cannot access the chat logs of an order they are not a party to.']"
704,REQ-1-016,Technical,The system's production environment shall be deployed on Amazon Web Services (AWS) within the `ap-south-1` (Mumbai) region. The infrastructure must be configured to span multiple Availability Zones (Multi-AZ) to ensure high availability and fault tolerance.,Platform Core System,"The system shall be deployed on Amazon Web Services (AWS), initially in the `ap-south-1` (Mumbai) region. The system deployment shall be configured across multiple Availability Zones for high availability.",[],[],['REQ-1-007'],FALSE,high,"['Inspect the AWS infrastructure configuration to confirm deployment in the ap-south-1 region.', 'Verify that critical components like the database and application servers are deployed across at least two different Availability Zones.']"
705,REQ-1-017,Technical,"The project shall maintain a minimum of three separate environments: Development, Staging, and Production. Each environment must be deployed in its own dedicated Amazon Virtual Private Cloud (VPC) to ensure strict network isolation.",Platform Core System,"The project shall maintain separate Development, Staging, and Production environments, with strict network isolation between them using separate VPCs.",[],[],['REQ-1-016'],FALSE,high,"['Confirm the existence of three distinct environments (Dev, Staging, Prod) in AWS.', 'Verify that each environment resides in a separate VPC and that there is no direct network traffic allowed between them, except through controlled gateways if necessary.']"
706,REQ-1-018,Technical,"All backend microservices and their dependencies shall be packaged as Docker containers. The deployment and orchestration of these containers in all environments shall be managed by Kubernetes, using the AWS Elastic Kubernetes Service (EKS).",Platform Core System,"All server-side software dependencies shall be managed via Docker containers, orchestrated by Kubernetes, specifically AWS Elastic Kubernetes Service (EKS).",[],[],['REQ-1-007'],FALSE,high,"['Inspect the CI/CD pipeline to confirm that services are built into Docker images.', 'Verify that the production environment is running on an AWS EKS cluster.', 'Confirm that application services are deployed as pods within the EKS cluster.']"
707,REQ-1-019,Technical,The system's implementation must strictly adhere to the technology stack specified in REQ-TEC-001. Any deviation from this stack requires a formal change request and architectural review.,Platform Core System,The system shall adhere to the technology stack mandated in Section 6.2 of the SRS.,[],"[""Development is restricted to the approved list of technologies, frameworks, and services.""]",['REQ-1-111'],FALSE,high,"['Conduct a code review to confirm that frontend, backend, and data tier technologies match the specified stack.', 'Verify that infrastructure is managed and deployed using the specified tools (e.g., Terraform, EKS).']"
708,REQ-1-020,Functional,The system shall provide 'Cash on Delivery' (COD) as a selectable payment option for customers during the checkout process.,Platform Core System,The platform shall support Cash on Delivery (COD) as a payment method.,[],[],['REQ-1-054'],FALSE,high,"[""During order placement, verify that 'Cash on Delivery' is available as a payment method."", 'Select COD and successfully place an order.', 'Verify the order record correctly indicates it is a COD order.']"
709,REQ-1-021,NonFunctional,"The system shall comply with India's DPDP Act, 2023. During user onboarding, the system must present users with clear, granular consent options for the collection and processing of their personal data. The system must also provide a mechanism for users to view and manage their given consents after registration.",Platform Core System,"The system must comply with India's Digital Personal Data Protection Act (DPDP), 2023, by providing mechanisms for explicit, granular user consent management during onboarding and for data access requests.",[],"[""All data processing activities must be mapped to a legal basis under the DPDP Act.""]",[],FALSE,high,"['During the registration flow, verify that a clear consent form is displayed before account creation.', 'Verify that the consent form allows users to opt-in to specific data processing activities (e.g., marketing notifications) separately.', 'Verify that a logged-in user has a section in their profile to review and change their consent settings.']"
710,REQ-1-022,NonFunctional,"The system shall classify all Personally Identifiable Information (PII), including names, phone numbers, addresses, and government ID numbers, as sensitive data. This data must be protected by strict, role-based access controls and must be encrypted at rest in all storage systems (databases, file storage, etc.).",Platform Core System,"All Personally Identifiable Information (PII) such as name, phone number, address, and government IDs shall be classified as sensitive and protected with strict access controls and encryption at rest.",[],[],['REQ-1-097'],FALSE,high,"['Verify that database encryption at rest is enabled for the primary database.', 'Attempt to access PII directly from a service that does not own the data and verify the request is denied.', 'Review access control policies to ensure only authorized roles and services can access PII.']"
711,REQ-1-023,Functional,"The system shall implement a 'right to erasure' function that, upon a user's request, anonymizes their PII in all associated records. Personal data (name, address, contact info) in historical orders and transactions must be replaced with generic, non-identifiable placeholders. Non-personal transactional data (item details, amounts, timestamps) must be preserved for financial auditing.",Platform Core System,"The right to erasure shall be implemented by anonymizing the user's PII in historical order and transaction records, replacing personal details with generic placeholders (e.g., 'Deleted User'), while preserving the non-personal transactional data required for financial audits.",[],[],['REQ-1-021'],FALSE,high,"['Trigger the erasure process for a test user with historical orders.', ""Verify that the user's account is deactivated and their profile PII is deleted."", 'Inspect the historical order records for that user and confirm that fields like customer name and delivery address have been replaced with placeholders.', 'Verify that order totals, items, and transaction IDs remain intact.']"
712,REQ-1-024,Functional,"During the account deletion/erasure process, the system shall display a clear message to the user informing them that while their personal information will be removed, anonymized transactional data will be retained for legal and financial compliance.",Platform Core System,The user shall be informed about this necessary data retention during the erasure process.,[],[],['REQ-1-023'],FALSE,medium,"['Initiate the account deletion process.', 'Verify that the confirmation screen includes text explaining the retention of anonymized transactional data.']"
713,REQ-1-025,Functional,"The system shall provide fields in the vendor profile for storing mandatory license information, including the license number and expiry date, for vendors in regulated categories (e.g., food, pharmaceuticals). All create, update, or delete operations on this license information must be recorded in an audit log.",Platform Core System,"For vendors requiring licenses (e.g., FSSAI, drug licenses), the system must store the license number and expiry date. ... All changes to license information must be recorded in an audit log.",[],[],[],FALSE,high,"['In the vendor dashboard, verify the presence of fields for license number and expiry date.', 'Enter and save license information for a vendor.', 'Verify that the information is stored correctly.', 'Check the audit log to confirm that the creation of the license record was logged.']"
714,REQ-1-026,Functional,"The system shall implement a scheduled job that automatically sends reminder notifications to vendors regarding their upcoming license expiry. These notifications must be sent at intervals of 30, 15, and 7 days before the stored expiry date.",Platform Core System,"The system shall send automated reminder notifications to the vendor 30, 15, and 7 days before license expiry.",['A notification service (email or push) is available and configured.'],[],['REQ-1-025'],FALSE,medium,"['Create a vendor with a license expiring in 31 days.', 'Advance the system date by one day and verify that a 30-day reminder notification is sent.', 'Repeat the process for the 15-day and 7-day marks and verify notifications are sent.']"
715,REQ-1-027,Functional,"The system shall automatically change a vendor's status to 'inactive' or 'suspended' if their stored license expiry date is in the past. While in this state, the vendor must be prevented from accepting new orders. The system must also display a prominent notification on the vendor's dashboard informing them of their expired license.",Platform Core System,The system shall automatically prevent the vendor from accepting new orders if their license is expired and notify them of the license status.,[],[],['REQ-1-025'],FALSE,high,"[""Set a vendor's license expiry date to yesterday."", ""Verify that the vendor's store is no longer visible to customers or that new orders cannot be placed."", 'Log in as the vendor and verify that a clear notification about the expired license is displayed.', 'Verify that any incoming order management controls are disabled.']"
716,REQ-1-028,NonFunctional,"The system shall implement resilience patterns for all critical third-party API integrations (payment, mapping, notifications). This must include robust error handling, circuit breaker patterns to prevent cascading failures during service outages, and defined fallback mechanisms where feasible.",Platform Core System,"The platform's functionality shall be critically dependent on the availability and correctness of APIs from third-party payment gateways, mapping services... The system must implement robust error handling, circuit breakers, and fallback mechanisms for third-party service outages.",[],[],['REQ-1-008'],FALSE,high,"['Simulate a timeout or 5xx error from the payment gateway API during checkout. Verify that the system handles the error gracefully and provides a clear message to the user without crashing.', 'Simulate an outage of the mapping service. Verify that the circuit breaker trips after a configured number of failures.', 'Verify that fallback mechanisms, such as disabling a feature temporarily, are activated during a prolonged third-party outage.']"
717,REQ-1-029,Functional,"The system shall enforce a maximum order value for orders using the Cash on Delivery (COD) payment method. This limit must be configurable by an Administrator via the admin dashboard. The default value for this limit shall be set to ₹2,500.",Platform Core System,"The system shall enforce an administrator-configurable maximum order value for Cash on Delivery (COD) orders, with a default limit of ₹2,500.",[],[],['REQ-1-020'],FALSE,medium,"['Verify in the admin dashboard that there is a setting to configure the COD max order value, and its default is ₹2,500.', 'Attempt to place a COD order with a total value exceeding the configured limit. Verify the system prevents checkout and displays an appropriate error message.', 'Change the limit in the admin dashboard and verify the new limit is enforced.']"
718,REQ-1-030,Functional,"The system shall enforce a maximum delivery radius for each operational zone, calculated from the vendor's location. This radius must be configurable by an Administrator. The default value for the delivery radius shall be 7 kilometers.",Platform Core System,"The system shall enforce an administrator-configurable delivery radius for each operational zone, with a default limit of 7 kilometers from the vendor's location.",['The system has accurate geocoordinates for both vendor and customer locations.'],[],['REQ-1-080'],FALSE,medium,"['Verify that an Administrator can define and modify the delivery radius for an operational zone.', 'As a customer, select a delivery address outside the configured radius for a vendor. Verify the system prevents order placement from that vendor.', 'Verify the default radius for a new zone is 7 km.']"
719,REQ-1-031,Functional,The system shall allow a customer to cancel an order with a full refund if the cancellation is initiated within 60 seconds of the order being placed. The system must automatically process the full refund to the original payment source for online payments.,Platform Core System,The system shall enforce a strict cancellation policy. Customers can cancel an order for a full refund within 60 seconds of placement.,[],[],['REQ-1-077'],FALSE,medium,"['Place an online payment order.', 'Within 60 seconds, initiate cancellation from the customer app.', ""Verify the order status changes to 'Cancelled'."", 'Verify that a full refund is processed successfully.']"
720,REQ-1-032,Functional,"The system shall apply a fixed cancellation fee if a customer cancels an order after a rider has already been assigned to it. This fee must be configurable by an Administrator, with a default value of ₹50. The refund processed will be the total order amount minus this fee.",Platform Core System,"A fixed cancellation fee, configurable by an administrator with a default of ₹50, shall be applied if the cancellation occurs after a rider has been assigned to the order.",[],[],"['REQ-1-031', 'REQ-1-078']",FALSE,medium,"['Place an order and wait for a rider to be assigned.', 'Initiate cancellation from the customer app.', ""Verify the order status changes to 'Cancelled'."", 'For an online payment, verify the refund amount is the order total less the configured cancellation fee.', 'Verify the default fee is ₹50 and that it can be changed by an admin.']"
721,REQ-1-033,Functional,"The system shall calculate and apply a commission fee on each completed order. The commission must be calculated as a percentage of the order subtotal (before taxes and delivery fees). The commission rate must be configurable by an Administrator at a per-vendor or per-vendor-category level, with a system-wide default of 15%.",Platform Core System,"The platform shall apply a commission on the order subtotal (exclusive of taxes and delivery fees). The commission percentage shall be configurable by an administrator per vendor or vendor category, with a default rate of 15%.",[],[],['REQ-1-082'],FALSE,high,"['Verify that for a completed order, the commission recorded is correctly calculated based on the order subtotal and the applicable commission rate.', 'Verify an Administrator can set a specific commission rate for an individual vendor.', 'Verify an Administrator can set a commission rate for a category of vendors.', 'Verify that if no specific rate is set, the default of 15% is used.']"
722,REQ-1-034,Functional,"The system shall settle rider earnings on a weekly basis. The settlement process must trigger an automated bank transfer to the rider's registered bank account, following a T+2 banking day settlement cycle (i.e., funds are credited two banking days after the settlement is initiated).",Platform Core System,Rider earnings shall be settled weekly via automated bank transfer on a T+2 banking day settlement cycle.,[],"[""Dependent on the capabilities of the bulk payout API provider."",""Excludes non-banking days (weekends, public holidays) from the T+2 calculation.""]",['REQ-1-084'],FALSE,high,"['Verify that a scheduled job exists to process rider payouts weekly.', 'Verify that the payout amount correctly aggregates all earnings for the settlement period.', 'Verify that the system correctly calculates the target credit date based on the T+2 banking day rule.']"
723,REQ-1-035,Functional,"The system shall provide a registration flow for new Customers using a mobile number as the primary identifier. The mobile number must be validated to ensure it conforms to Indian mobile number standards (e.g., 10 digits, valid starting digit). Account ownership must be verified by sending a One-Time Password (OTP) to the provided number, which the user must enter correctly to complete registration.",Platform Core System,"The system shall allow a new Customer to register using a mobile number, which shall be verified via a One-Time Password (OTP). The system shall validate the mobile number format against Indian standards.",[],[],[],FALSE,high,"['Attempt to register with an invalid Indian mobile number format (e.g., 9 digits) and verify an error is shown.', 'Enter a valid mobile number and verify an OTP is received via SMS.', 'Enter the correct OTP and verify the customer account is created.', 'Enter an incorrect OTP and verify registration fails.']"
724,REQ-1-036,Functional,"The system shall provide a registration flow for new Vendors. The flow must collect business name, address, contact information, and allow for the upload of required documents (e.g., GST certificate, FSSAI license). Upon submission, the new vendor account shall be created with a status of `pending_verification` and must be manually approved by an Administrator before it can become active.",Platform Core System,"The system shall allow a new Vendor to initiate registration by providing business name, address, contact info, and uploading required documents including GST certificate and FSSAI license (if applicable); the account status shall be `pending_verification` until an administrator approves it.",[],[],['REQ-1-079'],FALSE,high,"['Complete the vendor registration form and upload the required documents.', ""Verify that the vendor account is created with a 'pending_verification' status."", 'Verify the vendor cannot log in or operate their store until an admin approves the account.', 'As an admin, verify the new vendor appears in the verification queue.']"
725,REQ-1-037,Functional,"The system shall provide a registration flow for new Riders. The flow must collect personal details, driver's license information, vehicle registration, bank account details for payouts, and allow for the upload of identity documents (e.g., Aadhaar, PAN card). Upon submission, the new rider account shall be created with a status of `pending_verification` and must be manually approved by an Administrator before it can become active.",Platform Core System,"The system shall allow a new Rider to initiate registration by providing personal details, driver's license, vehicle registration, bank details, and identity documents including Aadhaar and PAN card; the account status shall be `pending_verification` until an administrator approves it.",[],[],['REQ-1-079'],FALSE,high,"['Complete the rider registration form and upload the required documents.', ""Verify that the rider account is created with a 'pending_verification' status."", 'Verify the rider cannot log in or receive tasks until an admin approves the account.', 'As an admin, verify the new rider appears in the verification queue.']"
726,REQ-1-038,Functional,"The system shall prevent the creation of duplicate accounts. If a user attempts to register with a mobile number or email address that already exists in the system, the registration shall be blocked, and a clear error message indicating the conflict shall be displayed. The P95 latency for the registration submission API endpoint shall be less than 500ms.",Platform Core System,The system shall display a clear error message if a user attempts to register with an already existing mobile number or email. The API response for a registration submission shall be less than 500ms.,[],[],"['REQ-1-035', 'REQ-1-036', 'REQ-1-037']",FALSE,high,"['Register a new user with a specific mobile number.', 'Attempt to register a second user with the same mobile number and verify an error is displayed.', 'Measure the API response time for registration submissions under load and verify the 95th percentile is below 500ms.']"
727,REQ-1-039,Functional,"The system shall provide a login mechanism for all registered users based on their mobile number. Upon entering their mobile number, the system shall send a One-Time Password (OTP) via SMS, which the user must enter correctly to be authenticated.",Platform Core System,The system shall allow a registered user to log in with their mobile number and an OTP sent to their registered mobile number.,[],[],['REQ-1-035'],FALSE,high,"['Enter the mobile number of a registered user into the login screen.', 'Verify that an OTP is received on the registered mobile device.', 'Enter the correct OTP and verify that the user is successfully logged in.']"
728,REQ-1-040,NonFunctional,"Upon successful OTP-based authentication, the authentication service shall issue a pair of JSON Web Tokens (JWTs): a short-lived access token for API authorization and a long-lived refresh token. The refresh token must be securely stored on the client device. The system must invalidate the refresh token when the user explicitly logs out or when suspicious activity is detected.",Platform Core System,"Upon successful OTP validation, the system shall issue a JSON Web Token (JWT) access token and a refresh token. Refresh tokens must be stored securely on the client device and be invalidated upon logout or suspicious activity.",[],[],['REQ-1-039'],FALSE,high,"[""After a successful login, inspect the client application's storage to verify the presence of an access token and a refresh token."", 'Verify the access token has a short expiry (e.g., 15 minutes) and the refresh token has a long expiry (e.g., 30 days).', 'Log out of the application and verify that the stored refresh token is no longer valid for generating new access tokens.']"
729,REQ-1-041,NonFunctional,"The system shall implement security measures for the OTP login process. Rate limiting must be applied to OTP generation requests for a single mobile number. If a user enters an invalid OTP, a clear error message must be shown. After 5 consecutive failed OTP entry attempts for an account, the account shall be temporarily locked from further login attempts for a configurable period.",Platform Core System,The system shall implement rate limiting on OTP generation requests to prevent abuse. The system shall display an error message for an invalid OTP entry and temporarily lock an account after 5 consecutive failed OTP attempts.,[],[],['REQ-1-039'],FALSE,high,"['Request OTPs for the same number multiple times in quick succession and verify that subsequent requests are blocked by rate limiting.', 'Enter an incorrect OTP and verify an error message is displayed.', 'Enter incorrect OTPs 5 times in a row. On the 6th attempt, verify that the login is blocked and a message about the temporary lock is shown.']"
730,REQ-1-042,NonFunctional,"The end-to-end user login process, measured from the moment the user requests an OTP to the moment the client receives the JWTs after successful validation, shall have a P95 latency of less than 3 seconds under normal network conditions.",Platform Core System,"The login process, from OTP request to token issuance, shall complete within 3 seconds.",[],"[""This is dependent on the latency of the third-party SMS gateway.""]",['REQ-1-039'],FALSE,medium,"['Measure the time taken for the complete login flow across multiple attempts.', 'Verify that the 95th percentile of these measurements is under 3 seconds.']"
731,REQ-1-043,Functional,"The system shall provide a profile management section for logged-in Customers. This section must allow the customer to update their name and email address. It must also allow them to add, edit, and delete multiple delivery addresses.",Platform Core System,"The system shall allow a logged-in Customer to manage their name, email, and multiple delivery addresses.",[],[],['REQ-1-009'],FALSE,high,"['Log in as a customer and navigate to the profile section.', 'Successfully update the name and email.', 'Successfully add a new delivery address.', 'Successfully edit an existing delivery address.', 'Successfully delete a delivery address.']"
732,REQ-1-044,Functional,"The system shall provide a store profile management section for logged-in Vendors. This section must allow the vendor to update their store's name, physical address, public contact details, and daily business hours.",Platform Core System,"The system shall allow a logged-in Vendor to manage their store profile, including name, address, contact details, and business hours.",[],[],['REQ-1-010'],FALSE,high,"['Log in as a vendor and navigate to the store profile section.', 'Successfully update the store name, address, and contact details.', 'Successfully set or update the business hours for each day of the week.']"
733,REQ-1-045,Functional,"The system shall provide a profile management section for logged-in Riders. This section must allow the rider to update their personal contact information, their vehicle details (e.g., make, model, license plate), and their bank account information for receiving payouts.",Platform Core System,"The system shall allow a logged-in Rider to manage their personal contact information, vehicle details, and bank account for payouts.",[],[],['REQ-1-011'],FALSE,high,"['Log in as a rider and navigate to the profile section.', 'Successfully update contact information.', 'Successfully update vehicle details.', 'Successfully update bank account details.']"
734,REQ-1-046,NonFunctional,"The system shall automatically trigger a notification (e.g., SMS or email) to a user whenever a change is made to their sensitive Personally Identifiable Information (PII) or financial information. This includes changes to their email, phone number, or bank account details.",Platform Core System,All changes to PII or financial information must trigger a notification to the user.,[],[],"['REQ-1-043', 'REQ-1-045']",FALSE,high,"['Change the email address for a customer account and verify a notification is sent to the old and/or new email address.', ""Change the bank account details for a rider account and verify an SMS notification is sent to the rider's registered mobile number.""]"
735,REQ-1-047,Functional,"The main screen of the customer mobile application shall display a list of available vendors, sorted or filtered based on proximity to the customer's current GPS location.",Platform Core System,The customer application shall display a list of vendors based on the customer's current GPS location.,[],"[""Requires user to grant location permissions.""]",[],FALSE,high,"['Open the customer app and grant location permissions.', 'Verify that a list of vendors is displayed.', 'Verify that vendors closer to the current location appear more prominently or earlier in the list than those farther away.']"
736,REQ-1-048,Functional,The customer application shall include a search functionality that allows users to search for vendors or products. The search algorithm must support partial word matching and provide a degree of typo tolerance. The P95 latency for returning search results shall be under 500ms.,Platform Core System,"It shall provide a search bar to allow searching for specific stores or items, with support for partial matches and typo tolerance. ... Search results shall be returned in under 500ms.",[],[],[],FALSE,high,"[""Search for 'piz' and verify that vendors or items with 'pizza' appear in the results."", ""Search for 'piza' (a typo) and verify that 'pizza' results are still returned."", 'Measure the API response time for search queries under load and verify the 95th percentile is below 500ms.']"
737,REQ-1-049,Functional,"The system shall provide filtering options on the vendor and product discovery pages. Customers must be able to filter the displayed results by category/cuisine, average user rating, and price range.",Platform Core System,"The system shall allow customers to filter search results by category, cuisine, rating, and price range.",[],[],"['REQ-1-047', 'REQ-1-048']",FALSE,medium,"[""On the vendor list page, apply a '4+ star' rating filter and verify only vendors with an average rating of 4 or higher are shown."", ""Apply a cuisine filter (e.g., 'Italian') and verify only relevant vendors are shown."", 'Apply a price range filter and verify the results comply with the selection.']"
738,REQ-1-050,Functional,"The system shall display a stock status indicator on each product listing. The status must be one of 'Available', 'Limited Stock', or 'Out of Stock'. The system must prevent customers from adding any item marked as 'Out of Stock' to their shopping cart.",Platform Core System,"Each product listing shall display a stock status of 'Available,' 'Limited Stock,' or 'Out of Stock'. The system shall prevent customers from adding 'Out of Stock' items to their cart.",[],[],['REQ-1-066'],FALSE,high,"[""View a product with a high stock quantity and verify its status is 'Available'."", ""View a product with a stock quantity below the 'Limited Stock' threshold and verify its status."", ""View a product with zero stock and verify its status is 'Out of Stock'."", ""Attempt to add an 'Out of Stock' item to the cart and verify the action is blocked.""]"
739,REQ-1-051,Functional,The system shall display the 'Limited Stock' status for a product when its numerical stock quantity falls below a specific threshold. This threshold must be configurable by the vendor on a per-product or store-wide basis.,Platform Core System,The 'Limited Stock' status shall be displayed when the stock quantity falls below a vendor-configurable threshold.,[],[],['REQ-1-050'],FALSE,medium,"[""Log in as a vendor and set the 'Limited Stock' threshold to 5 for a product."", ""Set the product's stock to 6. As a customer, verify the status is 'Available'."", ""Set the product's stock to 5. As a customer, verify the status is 'Limited Stock'.""]"
740,REQ-1-052,Functional,"The system shall provide shopping cart functionality allowing customers to add items, remove items, and update the quantity of items in their cart. The cart display must always show an itemized breakdown including the subtotal, all applicable taxes, delivery fees, and the final, payable total amount.",Platform Core System,"The system shall allow customers to add items to the cart, remove items from the cart, and update item quantities. The cart shall display a subtotal, applicable taxes, delivery fees, and a final total amount.",['Tax and delivery fee calculation logic is defined and available.'],[],[],FALSE,high,"['Successfully add an item to the cart.', 'Increase the quantity of the item in the cart and verify the totals update correctly.', 'Remove the item from the cart.', 'Verify the cart correctly displays subtotal, taxes, delivery fee, and total.']"
741,REQ-1-053,Functional,"During the checkout process, the system shall provide two distinct, optional text input fields for the customer: one for 'Special Instructions for the Vendor' (e.g., 'no onions') and one for 'Special Instructions for the Rider' (e.g., 'leave at front door').",Platform Core System,The system shall provide separate text fields for customers to add special instructions for the vendor and for the rider.,[],[],['REQ-1-052'],FALSE,medium,"['Proceed to checkout and verify the presence of two separate instruction fields.', 'Enter text into both fields and place an order.', 'As the vendor, verify the vendor-specific instruction is visible on the order details.', 'As the rider, verify the rider-specific instruction is visible on the task details.']"
742,REQ-1-054,Functional,"The system's payment processing module shall support three payment methods for customers: Unified Payments Interface (UPI), Credit/Debit Cards, and Cash on Delivery (COD).",Platform Core System,"The platform shall support Unified Payments Interface (UPI), Credit/Debit Cards, and Cash on Delivery (COD) as payment methods.",[],"[""Dependent on the payment gateway's support for these methods.""]",['REQ-1-020'],FALSE,high,"['On the checkout screen, verify that UPI, Credit/Debit Card, and COD are presented as options.', 'Successfully complete a test transaction using each of the three methods.']"
743,REQ-1-055,Functional,"The system must perform a final, real-time inventory check for all items in the customer's cart at the exact moment they initiate payment. If any item has become out of stock since it was added to the cart, the payment process must be halted. The system shall then display a notification to the customer, informing them of the unavailable item(s) and prompting them to update their cart.",Platform Core System,"Before processing a payment, the system must perform a final, real-time availability check for all items in the cart. If an item has become unavailable, the transaction shall be halted, and the customer shall be notified with an option to update their cart.",[],[],['REQ-1-054'],FALSE,high,"['Customer A adds the last unit of an item to their cart.', 'Customer B buys that last unit.', 'Customer A proceeds to payment. Verify the payment is blocked.', 'Verify Customer A is shown a message indicating the item is now out of stock and is prompted to remove it from the cart.']"
744,REQ-1-056,Functional,"Upon receiving a successful payment confirmation from the payment gateway for an online transaction, the system shall create an order record and set its initial status to `pending_vendor_acceptance`.",Platform Core System,A successful online payment shall move the associated order to the `pending` state for vendor acceptance.,[],[],"['REQ-1-054', 'REQ-1-077']",FALSE,high,"['Complete a successful online payment.', ""Query the database or API for the newly created order and verify its status is 'pending_vendor_acceptance'.""]"
745,REQ-1-057,NonFunctional,"The system shall implement a stateful reconciliation process for online payments. If a payment is initiated but the confirmation callback from the gateway is not immediately received, the order status shall be set to `payment_pending_confirmation`. All API interactions with the payment gateway for a given transaction must be logged, including the unique transaction ID.",Platform Core System,"To handle integration failures, the system shall implement a stateful reconciliation process: If a payment confirmation callback from the payment gateway fails or is delayed, the order shall be placed in a `payment_pending_confirmation` state. All interactions with the payment gateway API (request, response, callbacks) must be logged with the associated transaction ID.",[],[],['REQ-1-054'],FALSE,high,"['Simulate a payment scenario where the payment gateway callback is blocked or delayed.', ""Verify that the order is created with the status 'payment_pending_confirmation'."", 'Check the system logs and verify that the initial payment request and its transaction ID have been logged.']"
746,REQ-1-058,Functional,"The system shall run a scheduled background job to reconcile orders in the `payment_pending_confirmation` state. This job must periodically query the payment gateway's transaction status API, using the logged transaction ID, to fetch the definitive payment status. Based on the response, the job shall update the order status to either `pending_vendor_acceptance` (on success) or `cancelled` (on failure).",Platform Core System,"A scheduled job shall periodically query the payment gateway's API using the transaction ID to reconcile the final payment status and update the order accordingly, preventing lost orders or financial discrepancies.",['The payment gateway provides a reliable API to query transaction status by ID.'],[],['REQ-1-057'],FALSE,high,"[""Create an order in the 'payment_pending_confirmation' state."", 'Manually trigger the reconciliation job.', 'Verify that the job makes an API call to the payment gateway to check the transaction status.', ""Verify that the order's status is correctly updated based on the API response.""]"
747,REQ-1-059,Functional,"The system shall provide live order tracking for customers. Once an order's status is updated to `In Transit` (picked up by a rider), the customer's order tracking screen must display a map view showing the rider's real-time location. The rider's position on the map must be updated automatically at an interval of 5 to 10 seconds.",Platform Core System,"After an order is picked up by a rider, the customer's order screen shall display a map showing the rider's current position, updating every 5-10 seconds.","[""The rider's device has a stable internet connection and GPS signal.""]",[],['REQ-1-072'],FALSE,high,"['As a rider, pick up an order and start moving.', 'As the customer for that order, open the tracking screen.', ""Verify a map is displayed showing the rider's icon."", ""Verify the icon's position on the map updates periodically to reflect the rider's movement.""]"
748,REQ-1-060,Functional,"The live tracking map shall display pins for the pickup (vendor) and delivery (customer) locations. The location data payload sent from the rider's device must include latitude, longitude, a timestamp, and a GPS accuracy value. If the system stops receiving location updates from a rider, the map shall continue to display their last successfully received location, along with the timestamp of that update.",Platform Core System,"The map shall display the pickup location (vendor) and the delivery location (customer). The location data payload shall include latitude, longitude, timestamp, and accuracy. If the rider's GPS signal is temporarily lost, the map shall display their last known location with a timestamp.",[],[],['REQ-1-059'],FALSE,medium,"['On the tracking map, verify that pins for the vendor and customer addresses are correctly placed.', 'Inspect the WebSocket or API payload for rider location and confirm it contains latitude, longitude, timestamp, and accuracy.', ""Simulate a loss of signal from the rider's device. Verify the map shows the last known location and indicates that the signal is stale via a timestamp.""]"
749,REQ-1-061,NonFunctional,"The end-to-end latency for real-time location updates, measured from the time the rider's device sends a location payload to the time it is rendered on the customer's map, shall be under 2 seconds.",Platform Core System,The latency for location updates from the rider's device to the customer's application shall be under 2 seconds.,[],"[""Dependent on network conditions for both the rider and customer.""]",['REQ-1-059'],FALSE,high,"['Set up a test environment to measure the time difference between a location packet being sent from a test rider device and being received by a test customer device.', 'Verify that this latency is consistently under 2 seconds.']"
750,REQ-1-062,Functional,"After an order's status is changed to `Delivered`, the system shall trigger a prompt in the customer's application, inviting them to rate their experience.",Platform Core System,The system shall prompt the customer to leave a rating after an order is marked as `delivered`.,[],[],['REQ-1-077'],FALSE,medium,"[""Complete an order by marking it as 'Delivered'."", 'Open the customer app and verify that a notification or prompt to rate the order is displayed.']"
751,REQ-1-063,Functional,"The rating system shall allow customers to provide separate feedback for the vendor and the rider. For each, the customer must be able to provide a star rating from 1 to 5 and an optional text review.",Platform Core System,The rating system shall allow separate ratings on a 1 to 5-star scale and optional text reviews for the vendor/products and the rider.,[],[],['REQ-1-062'],FALSE,medium,"['On the rating screen, verify there are two distinct sections: one for the vendor and one for the rider.', 'Verify each section has a 1-5 star selection component and a text input field.', 'Successfully submit a rating with stars for both and a text review for one.', 'Verify the submitted data is stored correctly against the order, vendor, and rider.']"
752,REQ-1-064,Functional,"The system shall automatically calculate and display the average star rating for each vendor on their public-facing profile. The system shall also calculate the average star rating for each rider, which must be visible to Administrators in the admin dashboard.",Platform Core System,"The system shall calculate and display average ratings on vendor profiles and calculate average ratings for riders, which shall be visible to administrators.",[],[],['REQ-1-063'],FALSE,medium,"['Submit several ratings for a vendor.', ""View the vendor's profile as a customer and verify the displayed average rating is calculated correctly."", 'Submit several ratings for a rider.', ""View the rider's profile in the admin dashboard and verify their average rating is calculated correctly.""]"
753,REQ-1-065,Functional,"The vendor dashboard shall display new incoming orders in a dedicated section. Each order must show key details like the list of items, customer information (name, address), and any special instructions. The interface must provide clear 'Accept' and 'Reject' buttons. A configurable timer (defaulting to 5 minutes) shall be displayed, indicating the time remaining for the vendor to take action.",Platform Core System,"The vendor dashboard shall display new incoming orders with details including items, customer info, and special instructions, providing clear 'Accept' and 'Reject' actions. Vendors must accept or reject an order within a configurable time limit (default: 5 minutes).",[],[],['REQ-1-056'],FALSE,high,"['Place a new order.', 'Log in as the vendor and verify the new order appears on the dashboard with all required details and Accept/Reject buttons.', 'Verify a countdown timer is visible and starts from 5 minutes.', 'Verify an admin can change this time limit.']"
754,REQ-1-066,Functional,"When a vendor accepts an order, the system shall require them to select an 'Estimated Preparation Time' from a predefined list of options. This list of time ranges must be configurable by an Administrator, with default values of '10-15 min', '15-20 min', and '20-30 min'. The selected time will be used to update the Estimated Time of Arrival (ETA) for the customer.",Platform Core System,"Upon accepting an order, the vendor must select an 'Estimated Preparation Time' from an administrator-configurable list with default values of '10-15 min', '15-20 min', and '20-30 min', which will be used to provide an updated ETA to the customer.",[],[],['REQ-1-065'],FALSE,medium,"[""As a vendor, click 'Accept' on a new order."", 'Verify a prompt appears requiring the selection of a preparation time from a list.', ""Verify the default options are '10-15 min', '15-20 min', and '20-30 min'."", 'As an admin, modify the list of options and verify the changes are reflected for the vendor.', ""Verify the customer's order ETA is updated after the vendor makes a selection.""]"
755,REQ-1-067,Functional,"If a vendor fails to accept or reject a new order within the configured time limit, the system shall automatically reject the order. A notification of this rejection must be sent to the customer. All rejections, whether manual by the vendor or automatic by the system, must be logged with a reason code for vendor performance tracking.",Platform Core System,"If no action is taken within the time limit, the system shall automatically reject the order and notify the customer. All order rejections (manual or automatic) shall be logged for performance analysis.",[],[],['REQ-1-065'],FALSE,high,"['Place a new order and let the acceptance timer expire.', ""Verify the order status changes to 'Cancelled' or 'Rejected'."", 'Verify the customer receives a notification about the cancellation.', 'Check the system logs or vendor performance metrics to confirm the automatic rejection was recorded.']"
756,REQ-1-068,Functional,"The vendor dashboard shall include a catalog management module. This module must allow vendors to perform CRUD (Create, Read, Update, Delete) operations on their product categories and individual products. The product creation/editing form must include fields for product name, description, price, an image upload, and a numerical stock quantity.",Platform Core System,"The system shall provide an interface for vendors to add, edit, and delete products and categories. For each product, vendors can set the name, description, price, an image, and a numerical stock quantity.",[],[],['REQ-1-006'],FALSE,high,"['As a vendor, successfully create a new product category.', 'Successfully add a new product with all required fields (name, price, stock, etc.) to that category.', 'Successfully edit the details of an existing product.', 'Successfully delete a product.']"
757,REQ-1-069,Functional,"The catalog management module shall support bulk operations for products via a CSV file. Vendors must be able to export their entire catalog to a CSV file. They must also be able to import a CSV file to add or update products. The import process must validate the CSV for required columns and correct data types (e.g., price must be a number). If any rows fail validation, the system must generate and provide a downloadable error report detailing the failed rows and the reason for failure.",Platform Core System,"The system shall support bulk import and export of catalog items via a CSV file format. The CSV import functionality must include data validation for required columns, data types (e.g., price as a number), and provide a downloadable error report for failed rows.",[],[],['REQ-1-068'],FALSE,medium,"['As a vendor, export the current product catalog and verify a valid CSV file is downloaded.', 'Prepare a CSV file for import with one valid row and one invalid row (e.g., text in the price column).', 'Upload the CSV. Verify the valid product is created/updated.', 'Verify the system provides a downloadable error report.', 'Verify the error report correctly identifies the invalid row and the specific error.']"
758,REQ-1-070,Functional,"The system shall allow vendors to manage their store's availability. Vendors must be able to define their opening and closing times for each day of the week. The system shall prevent customers from placing orders from a store outside its set business hours. Additionally, the vendor dashboard must feature a master toggle switch that allows the vendor to immediately set their store status to 'Offline' or 'Online', overriding the scheduled hours.",Platform Core System,The system shall allow vendors to define their daily business hours and prevent customers from placing orders outside these hours. The vendor dashboard shall provide a master switch to immediately take the store offline or bring it back online.,[],[],['REQ-1-044'],FALSE,high,"[""Set a vendor's closing time to 5 PM. At 5:01 PM, attempt to place an order as a customer and verify it is blocked."", ""During business hours, use the master switch to take the store 'Offline'."", 'Verify that customers can no longer place orders from that store.', ""Toggle the switch back to 'Online' and verify that ordering is re-enabled.""]"
759,REQ-1-071,Functional,"The rider application shall feature a status toggle for riders to set themselves as 'Online' (available for work) or 'Offline'. The rider allocation system must only consider riders with an 'Online' status for new tasks. When a task is offered, the rider's screen must display the vendor's name and address, the customer's address, the estimated travel distance, and the earnings for the delivery. The rider must be given 'Accept' and 'Reject' options and a configurable time limit (default: 60 seconds) to respond.",Platform Core System,"The rider application shall have a toggle to set the rider's status to 'Online' or 'Offline'. The system shall only assign new delivery tasks to 'Online' riders. When a new task is offered, the application shall display the vendor's name/address, customer's address, estimated distance, and earnings. The rider shall have the option to 'Accept' or 'Reject' the task within a set time limit (default: 60 seconds).",[],[],['REQ-1-078'],FALSE,high,"[""Set a rider's status to 'Offline'. Create a new order and verify the offline rider is not offered the task."", ""Set the rider's status to 'Online'. Verify they are offered a new task."", 'On the task offer screen, verify all required information (vendor, customer, distance, earnings) is displayed.', 'Verify the accept/reject timer is present and defaults to 60 seconds.', 'Successfully accept a task. Let another task offer time out and verify it is automatically rejected.']"
760,REQ-1-072,Functional,"The rider application shall provide integrated map-based navigation to guide the rider to the pickup location and then to the drop-off location. The application must provide distinct, single-tap buttons for the rider to update the order status sequentially through the key delivery milestones: `Arrived at Store`, `Picked Up`, `Arrived at Destination`, and `Delivered`.",Platform Core System,"The rider application shall provide integrated map navigation to both pickup and drop-off locations. It shall allow the rider to update the order status with single-tap actions for: `Arrived at Store`, `Picked Up`, `Arrived at Destination`, and `Delivered`.",[],"[""Relies on the external mapping service for navigation data.""]",['REQ-1-071'],FALSE,high,"['Accept a task and verify a navigation interface is displayed, initially routing to the vendor.', ""Tap the 'Arrived at Store' button and verify the status updates."", ""Tap the 'Picked Up' button. Verify the status updates and the navigation now routes to the customer."", ""Tap 'Arrived at Destination' and 'Delivered' in sequence, verifying the status updates correctly at each step.""]"
761,REQ-1-073,Functional,"Each time a rider updates the delivery status (e.g., `Picked Up`, `Arrived at Destination`), the system shall automatically send a real-time push notification to the customer, informing them of the new status.",Platform Core System,Each status update shall trigger a real-time notification to the customer.,['The customer has enabled notifications for the application.'],[],['REQ-1-072'],FALSE,medium,"[""As a rider, tap the 'Picked Up' button."", ""As the customer, verify a push notification is received with a message like 'Your order has been picked up'.""]"
762,REQ-1-074,Functional,"The system shall support two distinct, configurable methods for Proof of Delivery (POD). Method 1: Photo Capture, where the rider takes a photo of the delivered package. Method 2: OTP Confirmation, where the rider enters a 4-digit OTP from the customer's app. The default POD method for prepaid orders shall be Photo Capture.",Platform Core System,The system shall support two configurable Proof of Delivery (POD) methods: photo capture and customer OTP confirmation. The default method for prepaid orders shall be capturing a photo of the delivered item at the doorstep.,[],[],['REQ-1-072'],FALSE,medium,"['Verify an admin can configure the POD method for different order types.', 'For a prepaid order, proceed to the final delivery step as a rider. Verify the app prompts for a photo capture.', 'For an order configured for OTP POD, verify the app prompts the rider to enter a 4-digit code.']"
763,REQ-1-075,Functional,The system must securely store the collected Proof of Delivery (either the captured photo or the OTP confirmation event) and associate it with the corresponding order record. This stored POD record must include metadata: a precise timestamp of when the POD was captured and the GPS coordinates of the rider's device at that moment.,Platform Core System,The captured POD (photo or OTP confirmation) shall be stored against the order record with metadata including a timestamp and the GPS coordinates of the capture location.,[],[],['REQ-1-074'],FALSE,high,"['Complete a delivery using photo POD.', 'In the admin dashboard, view the order details and verify the captured photo is present.', ""Verify the photo's metadata includes the correct timestamp and GPS location."", 'Complete a delivery using OTP POD. Verify the order record shows a successful OTP confirmation with the correct timestamp and location.']"
764,REQ-1-076,Functional,"The rider application shall provide comprehensive financial management tools. For COD orders, it must clearly display the exact cash amount to be collected. The app must maintain and display a running total of 'cash-in-hand' from all completed COD orders. A dedicated 'Earnings' section must provide a detailed breakdown of earnings by delivery, tips, and total earnings, with views for daily and weekly periods.",Platform Core System,"For COD orders, the rider application shall clearly display the exact amount of cash to be collected. It shall maintain a running total of 'cash-in-hand' from completed COD orders and provide instructions for the cash remittance process. A dedicated 'Earnings' section shall show a breakdown of earnings per delivery, tips, and total earnings over daily and weekly periods.",[],[],['REQ-1-020'],FALSE,high,"['Accept a COD order and verify the app shows the correct collection amount.', ""Complete the COD order and verify the 'cash-in-hand' total increases by the order amount."", ""Navigate to the 'Earnings' section and verify the delivery fee is listed."", 'Verify the earnings can be viewed as a daily and weekly summary.']"
765,REQ-1-077,Functional,"The system shall manage the order lifecycle using a finite state machine with the following states: `Payment Pending`, `Pending Vendor Acceptance`, `Accepted`, `Preparing`, `Ready for Pickup`, `In Transit`, `Delivered`, `Cancelled`, and `Allocation Failed`. Every transition from one state to another must be recorded in an immutable event log associated with the order. Each log entry must include the timestamp, the new state, and the actor (e.g., customer, vendor, system) responsible for the change.",Platform Core System,"The system shall manage orders through the following discrete states: `Payment Pending`, `Pending Vendor Acceptance`, `Accepted`, `Preparing`, `Ready for Pickup`, `In Transit`, `Delivered`, `Cancelled`, `Allocation Failed`. Every transition in the order state must be recorded in an immutable order event log, capturing the timestamp, the new state, and the actor that triggered the change.",[],[],[],FALSE,high,"['Create an order and trace its state through the entire lifecycle from placement to delivery.', 'Verify the order passes through the correct states in the correct sequence.', 'After the order is complete, inspect its event log and verify that every state transition is recorded with the correct timestamp and actor.']"
766,REQ-1-078,Functional,"The system shall trigger the rider allocation process when a vendor updates an order's status to `Ready for Pickup`. The allocation algorithm must select the most suitable rider by considering multiple factors: rider's proximity to the vendor, rider's current number of active deliveries, the rider's historical performance rating, and the opportunity to batch the order with other deliveries heading in a similar direction. The system must also generate an optimized multi-stop route if orders are batched, using real-time traffic data from the integrated mapping service.",Platform Core System,"The system shall initiate rider allocation when a vendor marks an order as `Ready for Pickup`. The allocation algorithm shall consider rider proximity, current load, performance rating, and potential for order batching with other deliveries in the same direction. The system shall suggest an optimized route based on real-time traffic data from the mapping service.",[],[],['REQ-1-077'],FALSE,high,"[""Mark an order as 'Ready for Pickup'."", 'Verify the system attempts to find a nearby, available rider.', 'In a test scenario with multiple riders, verify the system prioritizes the one that is closer and has a higher rating.', 'In a scenario with two orders going in the same direction, verify the system attempts to assign both to the same rider and provides a batched route.']"
767,REQ-1-079,Functional,"The rider allocation system shall handle re-assignment. If an offered task is rejected by a rider or the acceptance timer expires, the system must immediately offer the task to the next-best available rider. This process shall be repeated up to a maximum of 3 attempts over a 5-minute period. If no rider accepts the task within these limits, the order status must be changed to `Allocation Failed`. This status change must trigger a notification to both the customer and the vendor, and generate a high-priority alert in the administrator dashboard.",Platform Core System,"If an assigned rider rejects the task or their timer expires, the system shall re-assign it to the next best rider. Failure Protocol: If no rider accepts the task after 3 attempts over 5 minutes, the order status shall change to `Allocation Failed`. This shall trigger a notification to the customer and vendor about the failure and create a high-priority alert for an administrator.",[],[],['REQ-1-078'],FALSE,high,"['Offer a task to Rider A and have them reject it. Verify the task is immediately offered to Rider B.', 'Simulate a scenario where 3 riders reject the task over 5 minutes.', ""Verify the order status changes to 'Allocation Failed'."", 'Verify the customer and vendor receive a notification.', 'Verify an alert appears in the admin dashboard for the failed allocation.']"
768,REQ-1-080,Functional,"The administrator dashboard shall provide comprehensive user and service area management. It must allow admins to view, search, and manage all user accounts, with functions to approve pending registrations, suspend, and deactivate accounts. The dashboard must also include a geofencing tool for admins to define operational zones by drawing polygons on a map. The system must enforce these zones by preventing any order where the delivery address falls outside a defined operational area.",Platform Core System,"Administrators shall have a dashboard to view, search, and manage all users (customers, vendors, riders), with actions including approving registrations, suspending accounts, and deactivating accounts. Administrators shall be able to define operational zones using geofencing tools. The system shall prevent orders from being placed for delivery outside these zones.",[],[],['REQ-1-012'],FALSE,high,"['As an admin, search for a user and successfully suspend their account.', 'Approve a pending vendor registration.', 'Use the map tool to draw and save a new operational zone.', 'As a customer, attempt to place an order for delivery to an address outside of any defined zone and verify the action is blocked.']"
769,REQ-1-081,Functional,"The system shall provide two communication channels. First, an in-app chat for active orders, enabling communication between the customer and the vendor, and between the customer and the assigned rider. This chat must support predefined quick-reply templates. Second, a helpdesk module where any user (Customer, Vendor, Rider) can create a support ticket. Administrators must have an interface to view, manage, and respond to these tickets.",Platform Core System,"The system shall provide in-app chat between the customer and the assigned rider, and between the customer and the vendor for an active order. The chat interface shall support predefined quick-reply templates to facilitate common interactions. A dedicated helpdesk module shall allow all users to raise support tickets, which administrators can manage and respond to.",[],[],[],FALSE,medium,"['For an active order, verify the customer can send a message to the vendor and the rider.', ""Verify the chat interface shows quick-reply buttons (e.g., 'I'm on my way')."", 'As a customer, create a support ticket through the helpdesk.', 'As an admin, view the new ticket in the support queue and post a reply.']"
770,REQ-1-082,Functional,"The system shall implement a dedicated financial module based on immutable, double-entry accounting principles to manage all monetary transactions. This module must automatically calculate the platform's commission for each completed order. The calculation inputs (order value, commission rate at the time of transaction) must be stored immutably with the transaction record to ensure auditability.",Platform Core System,"The system shall include a dedicated financial module or microservice to manage the complete settlement lifecycle using immutable, double-entry accounting principles for all transactions. ... The system shall automatically calculate the platform's commission on each order based on a configurable structure, specifically a percentage of the order value. All inputs to the calculation (order value, commission rate) must be stored with the transaction record.",[],[],['REQ-1-033'],FALSE,high,"['For a completed order, inspect the financial transaction records.', 'Verify that corresponding debit and credit entries exist (double-entry).', 'Verify the commission transaction record contains the exact order value and commission percentage used for the calculation.', 'Verify that these transaction records cannot be altered after creation.']"
771,REQ-1-083,Functional,"The financial module shall aggregate net earnings for each vendor by subtracting commissions and other fees from their total sales over a settlement period. The system must process these payouts weekly on a T+2 banking day cycle. The vendor dashboard must provide a feature for vendors to download monthly financial statements in PDF or CSV format, detailing every transaction, the commission applied, and the final payout amounts.",Platform Core System,"The system shall aggregate net earnings for each vendor (total sales minus commissions and fees) and process payouts according to a weekly schedule on a T+2 banking day settlement cycle. Vendors shall be able to download monthly financial statements detailing each transaction, commission, and the final payout amount.",[],[],['REQ-1-082'],FALSE,high,"[""Verify that a vendor's payout amount for a period is correctly calculated as (Total Sales - Total Commissions)."", 'Verify that the payout process is triggered weekly.', 'Log in as a vendor and download a monthly statement. Verify it contains accurate, itemized financial data.']"
772,REQ-1-084,Functional,"The financial module shall calculate total rider earnings, including delivery fees and tips. It must also track and reconcile COD amounts collected by the rider. The rider application must display a clear financial ledger showing all earnings, all COD collected, and the net balance (amount to be paid out to the rider or remitted by the rider). Riders must be able to download weekly earnings statements.",Platform Core System,"The system shall calculate rider earnings (delivery fees, tips) and manage the reconciliation of Cash on Delivery (COD) collections. The system shall provide a clear ledger for riders showing earnings, COD collected, and the net amount to be paid out or remitted. Riders shall be able to download weekly earnings statements.",[],[],"['REQ-1-082', 'REQ-1-076']",FALSE,high,"['Complete several deliveries (prepaid and COD) as a rider.', 'Check the rider ledger and verify that earnings and COD collected are accurately reflected.', 'Verify the net balance is calculated correctly (Earnings - COD Collected).', 'Download a weekly statement and verify its accuracy.']"
773,REQ-1-085,Technical,"The system shall integrate with the RazorpayX bulk payout API to automate weekly fund disbursements to vendors and riders. Every payout attempt made via the API must be logged, and the log must include the outcome of the attempt (e.g., success, failure) and a reason code or message if the payout failed.",Platform Core System,"The system shall integrate with the RazorpayX bulk payout API to automate the disbursement of funds to vendor and rider bank accounts. Every payout attempt and its outcome (success, failure, reason) must be logged.",[],"[""The system is dependent on the RazorpayX API for payouts.""]","['REQ-1-083', 'REQ-1-034']",FALSE,high,"['Trigger a test payout for a vendor or rider.', 'Verify that an API call is made to the RazorpayX service with the correct details.', 'Check the payout logs to confirm the attempt and its outcome were recorded.']"
774,REQ-1-086,NonFunctional,"All user interfaces (mobile apps, web dashboards) shall be designed to be clean, intuitive, and responsive to different screen sizes. The design and implementation shall strive to meet the Web Content Accessibility Guidelines (WCAG) 2.1 Level AA standards to ensure usability for people with disabilities.",Platform Core System,"The User Interface (UI) for all applications shall be clean, intuitive, and responsive... All user-facing interfaces shall strive for compliance with Web Content Accessibility Guidelines (WCAG) 2.1 Level AA.",[],[],[],FALSE,medium,"['Verify the vendor and admin web dashboards render correctly on desktop, tablet, and mobile browser sizes.', 'Run an automated accessibility audit (e.g., Lighthouse, Axe) against the web interfaces and verify they pass WCAG 2.1 AA checks for color contrast, keyboard navigation, and screen reader compatibility.']"
775,REQ-1-087,NonFunctional,"The customer and rider mobile applications shall implement basic offline support. When the device has no internet connectivity, users must still be able to view locally cached data, such as their order history, profile information, or items currently in the cart.",Platform Core System,"The mobile applications shall provide basic offline support, such as viewing cached data (e.g., order history, cart items) when the network is unavailable.",[],[],[],FALSE,low,"['Open the customer app and view order history.', 'Enable airplane mode on the device.', 'Re-open the app and navigate to the order history screen. Verify the previously viewed data is still visible.']"
776,REQ-1-088,NonFunctional,"The system shall be built with internationalization (I18N) support from the ground up, with all UI strings externalized from the code. The initial launch language (L10N) shall be English. All monetary values must be displayed using the Indian Rupee symbol (₹). All dates and times displayed to users must be formatted and presented in the IST (Indian Standard Time) zone.",Platform Core System,"The system shall support localization and internationalization (I18N). Initially, all UI text shall be in English. The system shall correctly display currency in Indian Rupees (₹), and all dates and times shall be formatted according to the IST (Indian Standard Time) zone.",[],[],[],FALSE,medium,"['Inspect the codebase to verify that UI text is stored in resource files (e.g., JSON, properties files) rather than hardcoded.', ""View a product price and an order total, and verify they are displayed with the '₹' symbol."", 'View an order timestamp and verify it is displayed in IST.']"
777,REQ-1-089,Functional,"The mobile applications shall request necessary hardware permissions from the user. GPS access is required for both customer and rider apps. Camera access is required for the rider app (for POD) and vendor app (for product images). If a user denies a required permission, the application must handle it gracefully by displaying a message that explains why the permission is needed for a specific feature to function.",Platform Core System,"The customer and rider mobile applications shall require access to the device's GPS. The rider application shall require camera access for Proof of Delivery photos. ... The applications must gracefully handle cases where hardware permissions are denied by the user, explaining why the permission is needed to enable the feature.",[],[],[],FALSE,high,"['On first use of a location-based feature, verify the app prompts for GPS permission.', 'Deny the permission. Verify the app shows an explanatory message instead of crashing.', 'As a rider, attempt to complete a photo POD without camera permission. Verify the app explains that camera access is needed.']"
778,REQ-1-090,Technical,"The system shall integrate with the following specific third-party services: Razorpay for payment processing (using server-side SDKs), Mapbox for all mapping and location services, Firebase Cloud Messaging (FCM) for mobile push notifications, and AWS Simple Notification Service (SNS) for transactional SMS messages.",Platform Core System,"The platform shall integrate with the Razorpay payment gateway via server-side SDKs, Mapbox APIs for location services, Firebase Cloud Messaging (FCM) for push notifications, and AWS Simple Notification Service (SNS) for transactional SMS.",[],"[""The system is dependent on these specific third-party providers.""]",['REQ-1-008'],FALSE,high,"['Verify that the payment module uses the Razorpay SDK.', 'Verify that maps displayed in the apps are served from Mapbox.', 'Verify that push notifications are routed through FCM.', 'Verify that OTP SMS messages are sent via AWS SNS.']"
779,REQ-1-091,Technical,"All integrations with external third-party APIs must explicitly specify the API version being used to prevent unexpected breakages from provider updates. For critical integrations like the payment gateway, the CI/CD pipeline shall include contract tests to validate that the structure of API requests and responses matches the expected contract, allowing for early detection of breaking changes.",Platform Core System,All external API integrations must be versioned to ensure backward compatibility and stable operation during third-party updates. The system shall implement contract testing for critical third-party APIs to detect breaking changes early.,[],[],['REQ-1-090'],FALSE,high,"['Review the code for third-party integrations and confirm that API versions are pinned.', 'Review the CI/CD configuration and confirm the existence of a contract testing stage.', 'Intentionally break a mock response for a third-party API and verify that the contract tests fail.']"
780,REQ-1-092,NonFunctional,"The system shall enforce secure and standardized communication protocols. All client-server communication must use HTTPS with TLS 1.2 or higher. Real-time features like live tracking and chat must use the Secure WebSocket (WSS) protocol. The data interchange format for all APIs must be JSON. All public-facing APIs must be versioned in the URL path (e.g., /api/v1/).",Platform Core System,"All communication between clients and the backend shall occur over HTTPS/TLS 1.2 or higher. Real-time communication for tracking and chat shall use the Secure WebSocket (WSS) protocol. The standard data format for all API requests and responses shall be JSON. All public-facing APIs shall be versioned (e.g., /api/v1/).",[],[],[],FALSE,high,"['Use a network analysis tool to confirm that all API traffic is encrypted over HTTPS.', 'Confirm that WebSocket connections for chat/tracking are established using WSS.', 'Inspect API responses and confirm they are in valid JSON format.', 'Check the API Gateway configuration to verify that endpoints are prefixed with a version number.']"
781,REQ-1-093,NonFunctional,The system shall meet the following performance targets: The 95th percentile (P95) server-side latency for all critical APIs must be under 200ms. Core dashboard web pages must achieve a Largest Contentful Paint (LCP) of under 2.5 seconds. The P95 time for rider allocation (from 'Ready for Pickup' to 'Rider Assigned') must be under 30 seconds. The system architecture must be capable of processing a sustained load of at least 100 new orders per minute.,Platform Core System,The 95th percentile (P95) latency for all critical APIs shall be under 200ms. Core web pages on dashboards shall achieve a Largest Contentful Paint (LCP) of under 2.5 seconds. The time from an order being marked `Ready for Pickup` to a rider being assigned shall be under 30 seconds. The system shall be designed to process a minimum of 100 orders per minute during peak hours.,[],[],[],FALSE,high,"['Conduct load testing and verify that P95 API latency remains below 200ms at the target load.', 'Use web performance tools to measure the LCP of key dashboard pages and verify it is under 2.5s.', 'Measure the rider allocation time over many orders and confirm the P95 is under 30s.', 'Run a stress test simulating 100 orders per minute and verify the system remains stable without significant performance degradation.']"
782,REQ-1-094,NonFunctional,The system's primary PostgreSQL database on AWS RDS must be configured with automated daily snapshots and point-in-time recovery. Backups must be retained for at least 30 days. The production database must be deployed in a Multi-AZ configuration with automatic failover to achieve a Recovery Point Objective (RPO) of less than 5 minutes and a Recovery Time Objective (RTO) of less than 15 minutes.,Platform Core System,"The primary PostgreSQL database (AWS RDS) shall have automated daily snapshots with point-in-time recovery enabled, and backups shall be retained for a minimum of 30 days. The production environment shall be deployed in a Multi-AZ configuration on AWS with automatic failover, targeting a Recovery Point Objective (RPO) of less than 5 minutes and a Recovery Time Objective (RTO) of less than 15 minutes.",[],[],[],FALSE,high,"['Inspect the AWS RDS configuration for the production database.', 'Verify that automated backups are enabled, retention is set to 30 days or more, and point-in-time recovery is active.', 'Verify that the Multi-AZ option is enabled.', 'Conduct a disaster recovery drill by simulating a primary database failure and measure the time taken to failover (RTO) and the amount of data lost (RPO).']"
783,REQ-1-095,NonFunctional,The system shall enforce a data retention policy as follows: 1) Order and transaction records must be retained for at least 7 years. 2) PII in user profiles inactive for over 2 years must be anonymized. 3) POD photos and chat logs must be permanently deleted 90 days after order completion. 4) Application logs in CloudWatch must be archived to S3 Glacier after 90 days and retained for a total of 1 year.,Platform Core System,"Order details and transaction records shall be retained for a minimum of 7 years for financial and tax auditing purposes. Inactive user profiles and associated Personally Identifiable Information (PII) shall be anonymized after 2 years of inactivity. Sensitive operational data, such as Proof-of-Delivery photos and in-app chat logs, shall be permanently deleted after 90 days from order completion. System and application logs shall be retained in CloudWatch for 90 days for debugging and analysis, after which they shall be archived to AWS S3 Glacier for a total of 1 year.",[],[],['REQ-1-023'],FALSE,medium,"['Verify that there is no automated process that deletes order records before 7 years.', 'Verify that a scheduled job exists to identify and anonymize user accounts inactive for 2 years.', 'Verify that a scheduled job exists to delete POD photos and chat logs older than 90 days.', 'Check the CloudWatch and S3 lifecycle policies to confirm the log retention and archival rules are correctly configured.']"
784,REQ-1-096,NonFunctional,"The system shall use AWS Cognito for user authentication and identity management. The authentication strategy must use short-lived JWT access tokens and long-lived refresh tokens. Authorization shall be managed via a Role-Based Access Control (RBAC) model, with permission checks enforced at both the API Gateway layer and within each individual microservice.",Platform Core System,User authentication shall be managed by AWS Cognito. The system shall use short-lived JWT access tokens and long-lived refresh tokens. A Role-Based Access Control (RBAC) model shall be implemented and enforced at the API Gateway and microservice levels.,[],[],['REQ-1-040'],FALSE,high,"['Verify that user pools are configured in AWS Cognito.', 'Confirm that API Gateway authorizers are configured to validate JWTs issued by Cognito.', ""Attempt to access a vendor-only API endpoint using a customer's JWT and verify the request is denied with a 403 Forbidden status.""]"
785,REQ-1-097,NonFunctional,"The system must enforce encryption for all data. Data in transit must be encrypted using HTTPS/TLS 1.2 or higher. Data at rest across all AWS services (including RDS, ElastiCache, S3) must be encrypted using keys managed by AWS Key Management Service (KMS). All application secrets, such as database credentials and third-party API keys, must be stored in and managed by AWS Secrets Manager, not in code or configuration files.",Platform Core System,"All data in transit shall be encrypted using HTTPS/TLS 1.2+, and all data at rest (RDS, ElastiCache, S3) shall be encrypted using AWS KMS. All application secrets... shall be managed via AWS Secrets Manager...",[],[],['REQ-1-092'],FALSE,high,"['Verify that encryption at rest is enabled on all production data stores in AWS.', 'Verify that application containers are configured to fetch secrets from AWS Secrets Manager at runtime.', 'Scan the codebase to ensure no secrets are hardcoded.']"
786,REQ-1-098,NonFunctional,"The system must be developed following OWASP Top 10 security practices, with a focus on robust server-side input validation to prevent injection attacks. The system must achieve PCI-DSS compliance by ensuring no sensitive cardholder data is ever stored on its servers. The CI/CD pipeline must include automated vulnerability scanning for code dependencies and container images. The platform must undergo a formal third-party penetration test at least once per year.",Platform Core System,"The platform shall adhere to OWASP Top 10 security practices, including robust input validation on all user-supplied data to prevent injection attacks. The platform shall be PCI-DSS compliant by never storing sensitive card data on platform servers. The system shall undergo regular, automated vulnerability scanning of code dependencies and container images within the CI/CD pipeline, and an annual third-party penetration test.",[],[],[],FALSE,high,"['Attempt to submit a form with malicious input (e.g., a SQL injection string) and verify it is sanitized or rejected.', 'Confirm that the payment integration uses a method (e.g., tokenization) that avoids handling raw card data.', 'Verify that the CI/CD pipeline includes a security scanning step (e.g., Snyk, Trivy) that can fail the build if critical vulnerabilities are found.', 'Review the annual penetration test report and ensure all critical findings are remediated.']"
787,REQ-1-099,NonFunctional,"The platform's public-facing services shall achieve a minimum uptime of 99.9% each calendar month, excluding scheduled maintenance windows. All planned maintenance must be scheduled during off-peak hours, specifically between 2:00 AM and 4:00 AM IST. Users must be notified of any planned maintenance at least 24 hours in advance.",Platform Core System,"The platform services shall maintain an uptime of 99.9%, measured monthly, excluding scheduled maintenance. Planned maintenance shall be scheduled during off-peak hours between 2 AM and 4 AM IST, and users shall be notified at least 24 hours in advance.",[],[],[],FALSE,high,"['Review monitoring tool reports (e.g., Grafana, CloudWatch) to verify that the monthly uptime SLA of 99.9% is met.', 'Verify that a process and mechanism for notifying users of planned maintenance exists.']"
788,REQ-1-100,NonFunctional,"The system shall be architected to handle a load of at least 10,000 concurrent users. To achieve this, all microservices deployed on Kubernetes must have Horizontal Pod Autoscalers (HPA) configured to scale pods based on CPU and memory metrics. The underlying EKS cluster must use the Cluster Autoscaler to add or remove nodes as needed. The primary database must be configured with one or more read replicas to offload read-heavy queries.",Platform Core System,"The system shall be designed to support an initial load of 10,000 concurrent users. All microservices shall be containerized and deployed on Kubernetes with Horizontal Pod Autoscalers (HPA) configured based on CPU and memory utilization. The EKS cluster shall use the Cluster Autoscaler to manage nodes. The primary database shall use read replicas to scale read-heavy workloads.",[],[],['REQ-1-018'],FALSE,high,"['Conduct a load test simulating 10,000 concurrent users and verify the system remains stable and performant.', 'During the load test, monitor the Kubernetes cluster and verify that HPAs scale up the number of pods for services under load.', 'Verify that the Cluster Autoscaler provisions new nodes when pod scheduling pressure increases.', 'Inspect the database configuration to confirm the existence of read replicas.']"
789,REQ-1-101,NonFunctional,The project shall enforce strict code quality and maintainability standards. All backend services must achieve and maintain a minimum of 80% code coverage from unit and integration tests. All APIs must be documented using the OpenAPI (Swagger) specification. A consistent coding style must be enforced across all repositories using automated linters and formatters. All code merged into the main branch must go through a formal code review process requiring at least one peer approval.,Platform Core System,"All backend services shall maintain a minimum of 80% unit and integration test coverage... All APIs shall be documented using the OpenAPI specification. ... A consistent coding style, enforced by linters and formatters (ESLint, Prettier), shall be maintained across all codebases. A formal code review process requiring at least one peer approval shall be enforced for all pull requests to the main branch.",[],[],[],FALSE,medium,"['Check the CI/CD pipeline to verify that it runs code coverage reports and fails the build if coverage drops below 80%.', 'Verify that an up-to-date OpenAPI specification is generated and available for all services.', 'Verify that the CI/CD pipeline includes a linting step that fails the build on style violations.', ""Inspect the source control repository's branch protection rules to confirm that pull requests require at least one approval before merging.""]"
790,REQ-1-102,NonFunctional,"The system shall maintain a comprehensive audit trail for all security-sensitive and financially significant events. This trail must log events including, but not limited to: user login attempts (successful and failed), changes to user roles or permissions, all administrative actions, order cancellations, refund processing, and payout processing. Each log entry must contain a timestamp, the actor, the action, and the outcome.",Platform Core System,"The system must provide a comprehensive audit trail for all security-sensitive and financially significant events. This includes, but is not limited to, user login attempts, changes to user permissions, administrative actions, order cancellations, refunds, and payout processing.",[],[],['REQ-1-013'],FALSE,high,"['Perform a failed login attempt and verify it is logged in the audit trail.', 'Process a refund for an order and verify the event is logged.', 'Initiate a payout and verify the event is logged.']"
791,REQ-1-103,NonFunctional,"The project team shall create and maintain comprehensive documentation covering three areas: 1) User Documentation (user guides for customers, vendors, riders), 2) Technical Documentation (architecture diagrams, API specifications, data models), and 3) Operational Documentation (runbooks for common tasks, incident response plans, disaster recovery procedures).",Platform Core System,"The project shall maintain up-to-date documentation including: User Documentation, Technical Documentation, and Operational Documentation.",[],[],[],FALSE,medium,"['Verify the existence of a user guide for each user role.', 'Verify that system architecture diagrams are available and up-to-date.', 'Verify that a runbook exists for handling a critical system outage.']"
792,REQ-1-104,Technical,"The system shall be implemented using a Microservices Architecture. Service boundaries shall be determined using Domain-Driven Design (DDD) principles, corresponding to bounded contexts. The initial set of core microservices shall include: Identity & Access, Order Management, Vendor & Catalog, Rider Logistics, and Payments & Settlements.",Platform Core System,"The system shall be designed using a Microservices Architecture pattern. Initial high-level service boundaries shall be defined based on Domain-Driven Design (DDD) principles. Core bounded contexts shall include 'Identity & Access', 'Order Management', 'Vendor & Catalog', 'Rider Logistics', and 'Payments & Settlements'.",[],[],['REQ-1-007'],FALSE,high,"['Review the system architecture diagram and confirm it depicts a microservices pattern.', 'Verify that separate, independently deployable services exist for each of the specified bounded contexts.']"
793,REQ-1-105,Technical,"Communication between microservices shall primarily be asynchronous using a message bus (AWS SQS/SNS) to ensure decoupling and resilience. For distributed transactions that span multiple services (e.g., order creation), the Saga pattern must be implemented to manage data consistency. Synchronous, direct API calls are permissible only for user-facing operations requiring an immediate response.",Platform Core System,Services shall prefer asynchronous communication via a message bus (AWS SQS/SNS) for background tasks and decoupling. The Saga pattern shall be implemented for managing data consistency across services in distributed transactions. Synchronous request/response communication is permitted for user-facing operations that require an immediate and definitive outcome.,[],[],['REQ-1-104'],FALSE,high,"['Review the order processing flow. Verify that after initial placement, subsequent steps like notifying the vendor are handled via asynchronous messages.', 'Inspect the implementation of the order creation process and confirm it follows the Saga pattern to coordinate state changes across the Order, Payment, and Vendor services.', 'Verify that a user profile lookup is a synchronous API call.']"
794,REQ-1-106,Technical,"All external access to microservice APIs must be routed through a central API Gateway. Direct communication between services (inter-service communication) shall be managed and secured by a service mesh, specifically AWS App Mesh. The service mesh will be responsible for traffic routing, observability, and implementing resilience patterns like retries and circuit breakers.",Platform Core System,"Services shall expose APIs through a central API Gateway. Inter-service communication shall be managed and secured using a service mesh, specifically AWS App Mesh, to handle traffic routing, observability, and resilience patterns.",[],[],['REQ-1-104'],FALSE,high,"['Verify that all public API endpoints are configured in Amazon API Gateway.', 'Inspect the EKS cluster configuration and confirm that AWS App Mesh is deployed and configured.', 'Verify that microservices are communicating with each other via the App Mesh proxy.']"
795,REQ-1-107,Functional,"The system shall provide role-specific reporting capabilities. The admin dashboard must offer reports on sales, delivery metrics, vendor performance, and rider performance. The vendor dashboard must offer reports on sales, top-selling items, and order history. The rider app must provide delivery history and earnings statements. All reports generated from the web dashboards must be exportable in both CSV and PDF formats.",Platform Core System,"The admin dashboard shall provide detailed reports on sales, delivery performance, vendor performance, and rider performance. The vendor dashboard shall provide reports on their own sales, top-selling items, and order history. The rider application shall provide a history of completed deliveries and detailed earnings statements. All reports shall be exportable in CSV and PDF formats.",[],[],[],FALSE,medium,"['As an admin, generate a sales report for the last month.', 'As a vendor, generate a report of top-selling items.', 'Verify that both reports can be successfully downloaded as a CSV file and as a PDF file.', 'As a rider, view the delivery history for the past week.']"
796,REQ-1-108,Technical,"The system's observability stack shall consist of Prometheus for collecting metrics, Grafana for creating monitoring dashboards, and AWS CloudWatch Logs for centralized logging. All logs must be written in a structured JSON format. Distributed tracing shall be implemented across all microservices using the OpenTelemetry standard.",Platform Core System,The system shall use Prometheus for metrics and Grafana for visualization dashboards. All application and system logs shall be centralized in AWS CloudWatch Logs in a structured JSON format. The system shall implement OpenTelemetry across all services for distributed tracing.,[],[],[],FALSE,high,"['Verify that Prometheus is scraping metrics from all microservices.', 'Access the Grafana instance and confirm that dashboards are set up to visualize key system metrics.', 'Inspect logs in CloudWatch and confirm they are in a structured JSON format.', 'Trigger a multi-service workflow and use a tracing tool (e.g., Jaeger, X-Ray) to visualize the complete distributed trace via OpenTelemetry.']"
797,REQ-1-109,NonFunctional,"The system shall use Prometheus Alertmanager for automated, real-time alerting on system health. Alerts must be configured for key metrics, including but not limited to: high API latency, high API error rates, high database connection pool utilization, message queue depth exceeding a threshold, abnormal pod CPU or memory usage, and high failure rates for third-party API calls. Alerts must be categorized by severity and routed to on-call personnel.",Platform Core System,"Prometheus Alertmanager shall be used for real-time alerts on system health and performance degradation. ... Key Metrics & Alerts: Monitoring shall include, but not be limited to: API latency and error rates (per endpoint), database connection pool utilization, message queue depth, Kubernetes pod health (CPU/memory), and third-party API success/failure rates.",[],[],['REQ-1-108'],FALSE,high,"['Verify that Alertmanager is configured with alerting rules for the specified key metrics.', 'Simulate a high error rate on a critical API endpoint and verify that an alert is triggered and sent to the configured notification channel (e.g., Slack, PagerDuty).']"
798,REQ-1-110,Technical,"The system must implement distributed request tracing by ensuring every log entry contains a `correlationId`. For new incoming requests, this ID shall be generated at the API Gateway. The `correlationId` must then be propagated consistently through all subsequent synchronous API calls and asynchronous messages related to that initial request. This allows for tracing a single user action across multiple microservices.",Platform Core System,"Every log entry, across all services, must include a `correlationId` (or trace ID). This ID must be generated at the API Gateway for new requests or propagated from incoming messages and be passed consistently through all subsequent internal API calls and asynchronous events to enable effective request tracing.",[],[],['REQ-1-108'],FALSE,high,"['Initiate a user action, such as placing an order.', 'Go to the centralized logging system (CloudWatch).', 'Filter logs by the `correlationId` generated for that request.', 'Verify that logs from all involved services (e.g., API Gateway, Order Service, Payment Service) for that specific transaction appear in the filtered results.']"
799,REQ-1-111,Technical,"The project shall be implemented using the following mandated technology stack: Frontend (Mobile): React Native v0.73+; Frontend (Web): React.js v18.2+ with Vite; Backend: Node.js v18.18+ with NestJS (TypeScript); Database: Amazon RDS for PostgreSQL v15.4+; Infrastructure: AWS, Amazon EKS, Terraform; CI/CD: GitHub Actions; Third-Parties: Razorpay, Mapbox, FCM.",Platform Core System,"Technology Stack: Frontend: React Native v0.73+ (Mobile), React.js v18.2+ with Vite (Web)... Backend: Node.js v18.18+ with NestJS Framework (TypeScript)... Data Tier: Amazon RDS for PostgreSQL v15.4+... Infrastructure & Cloud Services: Amazon EKS... DevOps & Tooling: GitHub Actions (CI/CD), Terraform...",[],"[""The development team must use only the technologies specified in this list.""]",[],FALSE,high,"['Review package.json files to confirm frontend and backend framework versions.', 'Inspect the database instance to confirm it is PostgreSQL v15.4+.', 'Review the repository to confirm infrastructure is defined in Terraform and CI/CD pipelines are in GitHub Actions.']"
800,REQ-1-112,Functional,The platform launch shall follow a phased rollout strategy. The initial launch will be a pilot program restricted to designated geographical zones within Mumbai.,Platform Core System,"The platform shall be launched using a phased rollout strategy, beginning with a pilot launch in designated zones within Mumbai (`ap-south-1`).",[],[],['REQ-1-080'],FALSE,high,"['Verify that at launch, the system is configured to only allow registrations and orders within the specified pilot zones in Mumbai.']"
801,REQ-1-113,Functional,"The system shall provide a data migration path for bulk onboarding of initial vendors. This path must support ingesting vendor and catalog data from CSV or XLSX spreadsheets. A dedicated data transformation script must be created to validate, clean, and map the data from these files into the platform's database schema, leveraging the bulk import functionality.",Platform Core System,"For initial vendor onboarding, a data migration path shall be provided. ... Vendor and catalog data shall be extracted from vendor-provided spreadsheets in CSV or XLSX format. ... A dedicated data transformation script shall validate, clean, and map the extracted data to the platform's database schema.",[],[],['REQ-1-069'],FALSE,medium,"['Provide a sample vendor spreadsheet.', 'Execute the migration script against the spreadsheet.', 'Verify that the vendor and their catalog are correctly created in the system.', 'Verify that any invalid data in the spreadsheet is flagged or handled gracefully.']"
802,REQ-1-114,NonFunctional,"Prior to launching in any new operational zone, mandatory, role-specific training must be provided to all users. This includes online webinars and tutorials for Vendors, a virtual onboarding session for Riders, and hands-on sessions for platform Administrators.",Platform Core System,Role-specific training shall be provided to all user classes prior to go-live in a new operational zone.,[],[],[],FALSE,medium,"['Verify that training materials (videos, knowledge base articles) exist for vendors.', 'Verify that a curriculum and schedule for rider onboarding sessions are defined.', 'Confirm that a plan for training new administrators is in place.']"
803,REQ-1-115,NonFunctional,"A formal, documented cutover plan must be executed for each zonal launch. The plan must detail Pre-Go-Live, Go-Live, and Post-Go-Live activities. The plan must include a fallback procedure for critical failures, which is to immediately disable the ability for customers to place new orders within the affected zone while the issue is resolved.",Platform Core System,"A formal cutover plan shall be executed for the launch of each new operational zone. ... Pre-Go-Live ... Go-Live ... Post-Go-Live ... Fallback Procedure: In the event of a critical system failure during cutover, the immediate fallback procedure is to disable new order placement in the affected zone.",[],[],[],FALSE,high,"['Review the cutover plan document and verify it contains all the specified sections.', 'Verify that an administrative function exists to quickly disable ordering for a specific operational zone.']"