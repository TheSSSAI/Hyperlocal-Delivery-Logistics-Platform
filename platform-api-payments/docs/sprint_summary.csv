"sprint_number","sprint_name","sprint_goal","start_date","end_date","duration_days","total_story_points","estimated_hours","team_capacity_hours","capacity_utilization","task_count","epic_coverage","key_deliverables","demo_objectives","success_criteria","risk_factors","mitigation_strategies","dependencies_resolved","team_members","external_dependencies","integration_windows","review_schedule","retrospective_date","burndown_target"
"1","Sprint 1: Foundations","Establish foundational infrastructure (VPC, CI/CD) and core user registration flows for all three user types, plus the rider allocation engine.","2024-11-04","2024-11-15","10","24","165.5","384","43%","16","Platform Infrastructure & DevOps,Identity & Access Microservice,Vendor & Catalog Microservice,Rider Logistics Microservice","Isolated AWS environments (Dev, Staging, Prod); Automated CI pipeline; Customer, Vendor, and Rider registration flows (backend + frontend); Rider allocation algorithm and offer mechanism.","Showcase a PR triggering the CI pipeline. Demonstrate successful customer registration and login. Demonstrate successful vendor registration. Demonstrate the rider task offer screen appearing on the mobile app.","All foundational infrastructure code is merged. Customer registration is fully testable end-to-end. Vendor/Rider registration backend APIs are complete.","Delays in AWS infrastructure provisioning (RISK-004); Complexity of multi-user type registration.","Prioritize DevOps tasks at the start of the sprint; Use mock APIs to enable parallel frontend/backend development.","true","devops.engineer1@company.com,backend.dev1@company.com,backend.dev2@company.com,frontend.dev1@company.com,frontend.dev2@company.com,qa.engineer1@company.com","AWS, GitHub","Integration testing for registration flows in the last 3 days of the sprint.","Sprint Review on 2024-11-15 at 3 PM","2024-11-15","Complete 50% of estimated hours by day 5."
"2","Sprint 2: Core Transactions","Implement core transaction (Payment Checkout) and key experience (Live Tracking) features.","2024-11-18","2024-11-29","10","26","133.1","384","35%","12","Order Management Microservice,Rider Logistics Microservice","End-to-end online payment flow with Razorpay integration; Payment reconciliation job; Live rider location tracking on the customer's map.","Demonstrate a customer placing an order and completing a payment via Razorpay sandbox. Demonstrate the live movement of a rider's icon on the customer's map.","Payment flow is fully testable E2E. Live tracking is functional between two devices. All acceptance criteria for CUS-025 and CUS-028 are met.","Checkout Saga complexity (RISK-001); Razorpay API integration issues (RISK-002); Scalability of WebSocket service for live tracking.","Allocate senior developers to Saga and WebSocket tasks; Start integration testing with Razorpay sandbox on day 1.","true","backend.dev1@company.com,backend.dev2@company.com,frontend.dev1@company.com,frontend.dev2@company.com,qa.engineer1@company.com","Razorpay, Mapbox","Continuous integration testing throughout the sprint for payments and tracking.","Sprint Review on 2024-11-29 at 3 PM","2024-11-29","Complete 50% of estimated hours by day 5."