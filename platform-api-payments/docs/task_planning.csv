"task_id","title","description","type","status","priority","assignee","reporter","due_date","estimated_hours","story_points","labels","sprint","sprint_goal","epic","epic_id","project","parent_id","dependencies","skills_required","complexity","risk_level","acceptance_criteria","definition_of_done","created_at","updated_at","sprint_start_date","sprint_end_date","capacity_allocation","collaboration_required","external_dependencies","testing_requirements","deployment_notes","business_value"
"ADM-005-T1","Design and Implement Reusable Server-Side Data Table Component","Develop a generic, reusable React data table component supporting server-side pagination, sorting, and filtering using TanStack Table for headless logic. This component is a foundational element for multiple features.","Task","Sprint Backlog","Critical","frontend.dev1@company.com","product.owner@company.com","2024-11-12","14.3","8","frontend,react,component-library,critical-path","Sprint 1","Deliver complete user and registration management suite and operational dashboard.","User & Registration Management","EPIC-002","Admin Dashboard","ADM-005","","React.js,TypeScript,Component Design","High","Medium","Component renders data, handles pagination/sorting callbacks, and displays loading/empty states.","Code reviewed; Unit tests pass with >80% coverage; Component is usable in Storybook.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2024-11-04","2024-11-15","100%","None","None","Unit testing, Storybook validation.","To be published to internal component library.","Foundation for multiple admin features, ensuring UI consistency and development speed."
"ADM-005-T2","Develop User Management Page and API Integration","Create the main User Management page. Integrate the reusable data table, add filter controls (role, status), and a search bar. Implement the Axios service to fetch user data based on table state.","Task","Sprint Backlog","Critical","frontend.dev2@company.com","product.owner@company.com","2024-11-13","12","8","frontend,react,api-integration","Sprint 1","Deliver complete user and registration management suite and operational dashboard.","User & Registration Management","EPIC-002","Admin Dashboard","ADM-005","ADM-005-T1","React.js,Redux Toolkit,Axios","Medium","Low","Page loads and displays users. Filtering, searching, pagination, and sorting function correctly.","E2E tests pass for all UI interactions; Code reviewed and merged.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2024-11-04","2024-11-15","100%","Backend team for API contract.","Backend API for user filtering must be available.","E2E testing (Cypress) for filtering, sorting, and pagination.","Requires backend API to be deployed to staging.","Enables administrators to manage the entire user base of the platform."
"ADM-001-T1","Develop Pending Registrations Page","Create a new page at `/pending-registrations` that utilizes the reusable Data Table component. Configure the table to fetch users with `status=pending_verification` and display relevant columns (Name, Type, Submission Date). Implement a filter control for User Type (Vendor/Rider).","Task","Sprint Backlog","Critical","frontend.dev2@company.com","product.owner@company.com","2024-11-14","10","3","frontend,react,onboarding","Sprint 1","Deliver complete user and registration management suite and operational dashboard.","User & Registration Management","EPIC-002","Admin Dashboard","ADM-001","ADM-005-T1","React.js,TypeScript","Low","Low","Page correctly lists pending users. Filters for 'Vendor' and 'Rider' work. Each row has a 'Review' button.","E2E tests verify that the list is populated and filters work.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2024-11-04","2024-11-15","100%","Backend team.","Backend API must support filtering by 'pending_verification' status.","E2E testing for list population and filtering functionality.","Deploy as part of the admin dashboard web application.","Provides the entry point for the crucial vendor and rider onboarding workflow."
"ADM-004-T1","Backend: API endpoint for Registration Review Details","Create a backend endpoint `GET /api/v1/admin/registrations/{id}` that returns all submitted details for a pending user, including links to uploaded documents.","Task","Sprint Backlog","Critical","backend.qa@company.com","product.owner@company.com","2024-11-08","8.3","2","backend,api,nestjs,s3","Sprint 1","Deliver complete user and registration management suite and operational dashboard.","User & Registration Management","EPIC-002","Admin Dashboard","ADM-004","","Node.js,NestJS,AWS S3 SDK","Medium","Low","Endpoint returns registration data. Document URLs are secure, pre-signed S3 URLs. Endpoint is protected for Administrators.","Integration tests pass with >80% coverage; API documentation is updated.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2024-11-04","2024-11-15","100%","Frontend team for API contract.","S3 bucket for document storage must be configured.","Integration testing for data retrieval and security.","To be deployed as part of the Identity & Access microservice.","Enables administrators to review applicant details to make approval/rejection decisions."
"ADM-004-T2","Frontend: Develop Registration Review Page","Create the page `/registrations/{id}/review`. Fetch and display all details from the backend, including personal info and clickable links for documents. Add 'Approve' and 'Reject' buttons.","Task","Sprint Backlog","Critical","frontend.dev1@company.com","product.owner@company.com","2024-11-12","10.3","2","frontend,react,onboarding","Sprint 1","Deliver complete user and registration management suite and operational dashboard.","User & Registration Management","EPIC-002","Admin Dashboard","ADM-004","ADM-004-T1","React.js,TypeScript","Medium","Low","Page displays all data for Vendor/Rider types. Document links open in new tab. Action buttons are present.","E2E tests pass for rendering data correctly.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2024-11-04","2024-11-15","100%","Backend team.","None","E2E testing.","Deploy as part of admin dashboard.","Provides the UI for admins to perform the critical verification step."
"ADM-004-T3","Frontend: Implement Reject Registration Modal","Create a reusable modal component that takes a list of predefined reasons and an optional custom text input. Integrate this modal with the 'Reject' button on the review page. The rejection reason is mandatory.","Task","Sprint Backlog","Critical","frontend.dev2@company.com","product.owner@company.com","2024-11-14","6","2","frontend,react,modal","Sprint 1","Deliver complete user and registration management suite and operational dashboard.","User & Registration Management","EPIC-002","Admin Dashboard","ADM-004","ADM-004-T2","React.js","Low","Low","Modal opens on 'Reject' click. 'Confirm' is disabled until reason is selected. Confirmation triggers API call.","E2E tests pass for the rejection flow.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2024-11-04","2024-11-15","100%","Backend team for API contract.","None","E2E testing of the modal interactions.","Deploy as part of admin dashboard.","Enables admins to reject non-compliant applications with clear, auditable reasons."
"ADM-004-T4","Backend: API Endpoint for Rejecting Registration","Create a backend endpoint `POST /api/v1/admin/registrations/{id}/reject`. This endpoint should update the user's status to 'rejected', store the reason, trigger a notification, and create an audit log entry.","Task","Sprint Backlog","Critical","backend.qa@company.com","product.owner@company.com","2024-11-13","8.3","2","backend,api,nestjs","Sprint 1","Deliver complete user and registration management suite and operational dashboard.","User & Registration Management","EPIC-002","Admin Dashboard","ADM-004","","Node.js,NestJS","Medium","Low","Endpoint updates user status, saves reason, publishes `UserRejected` event, creates audit log. Endpoint is admin-only.","Integration tests pass; API is documented.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2024-11-04","2024-11-15","100%","Frontend team.","Message bus and audit log service must be available.","Integration testing of state changes and event publishing.","Part of Identity & Access microservice.","Provides the core logic for the rejection workflow."
"ADM-008-T1","Create Financial Settings Page and COD Limit Form","Develop a new page at `/settings/financial`. Add a simple form with a single numeric input for 'Maximum COD Order Value'. Implement frontend and backend validation for positive numeric values. On save, call the backend API and log the change to the audit trail.","Task","Sprint Backlog","Critical","frontend.dev1@company.com","product.owner@company.com","2024-11-15","10","2","frontend,react,settings,financial","Sprint 1","Deliver complete user and registration management suite and operational dashboard.","Operational & Financial Configuration","EPIC-003","Admin Dashboard","ADM-008","","React.js,HTML/CSS","Low","Low","Admin can view and update the COD limit. Invalid inputs are rejected. Save is confirmed with a notification.","E2E tests pass for updating the value and for invalid input.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2024-11-04","2024-11-15","100%","Backend team.","Backend API for config management must be available.","E2E testing.","Deploy as part of admin dashboard.","Allows business to control financial risk associated with COD orders."
"ADM-018-T1","Develop Dashboard Page with KPI Widgets and Charting","Create the main dashboard page at `/`. Implement reusable 'KPI Widget' components. Integrate a charting library (e.g., Recharts) for the 'Orders per Minute' time-series chart. The page should fetch initial data via a REST API.","Task","Sprint Backlog","Should Have","frontend.dev1@company.com","product.owner@company.com","2024-11-15","14.3","5","frontend,react,dashboard,charts","Sprint 1","Deliver complete user and registration management suite and operational dashboard.","Monitoring & Support Tools","EPIC-004","Admin Dashboard","ADM-018","","React.js,Recharts/Chart.js","Medium","Medium","Dashboard renders with widgets in loading state. Widgets populate with data on success or show error state on failure. Chart renders time-series data.","E2E tests verify widget rendering and data display.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2024-11-04","2024-11-15","100%","Backend team for metrics API.","Backend API for dashboard metrics must be available.","E2E testing.","Deploy as part of admin dashboard.","Provides at-a-glance visibility into platform health for operations team."
"ADM-013-T1","Research Spike: Mapbox Drawing/Editing Libraries","Investigate and prototype the integration of `mapbox-gl-draw` or a similar library with React to validate the feasibility and complexity of the interactive polygon editor.","Task","Sprint Backlog","Critical","frontend.dev1@company.com","product.owner@company.com","2024-11-20","6.3","13","frontend,research,spike,mapbox","Sprint 2","Implement advanced admin tools: geofencing and support ticket management.","Operational & Financial Configuration","EPIC-003","Admin Dashboard","ADM-013","","React.js,Mapbox GL JS","High","High","Working prototype demonstrates polygon creation/editing. Challenges are documented. Library recommendation is made.","Demonstration of the prototype to the team and creation of a short technical document.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2024-11-18","2024-11-29","100%","None","None","Prototyping, no formal testing.","Not for deployment.","De-risks the most technically challenging part of the geofencing feature."
"ADM-013-T2","Develop Zone Management Page with Map Integration","Create the `/zones` page, integrate the Mapbox map component, and implement the UI for displaying a list of existing zones. Fetch and render existing zone polygons on the map.","Task","Sprint Backlog","Critical","frontend.dev1@company.com","product.owner@company.com","2024-11-22","12","13","frontend,react,mapbox","Sprint 2","Implement advanced admin tools: geofencing and support ticket management.","Operational & Financial Configuration","EPIC-003","Admin Dashboard","ADM-013","ADM-013-T1","React.js,Mapbox GL JS","Medium","Medium","Page loads with map. Zone list is fetched and displayed. Polygons are rendered correctly on the map.","E2E tests verify map and list rendering.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2024-11-18","2024-11-29","100%","Backend team.","Backend API to fetch zones must be available.","E2E testing.","Deploy as part of admin dashboard.","Provides the foundational UI for the geofencing tool."
"ADM-013-T3","Implement Interactive Polygon Drawing and Editing UI","Integrate the chosen drawing library into the Zone Management page. Implement the full CRUD workflow for geofences: create a new polygon, move its vertices, delete vertices, and delete the entire polygon. Connect these UI events to the component's state.","Task","Sprint Backlog","Critical","frontend.dev1@company.com","product.owner@company.com","2024-11-27","14.3","13","frontend,react,mapbox,geofencing","Sprint 2","Implement advanced admin tools: geofencing and support ticket management.","Operational & Financial Configuration","EPIC-003","Admin Dashboard","ADM-013","ADM-013-T2","React.js,Mapbox GL JS,GeoJSON","High","High","Admin can draw, edit, and delete polygons on the map. Changes are reflected in component state as GeoJSON.","Manual or automated E2E tests for drawing and editing actions are passed.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2024-11-18","2024-11-29","100%","None","None","Manual E2E testing due to canvas complexity.","Deploy as part of admin dashboard.","Provides the core interactive functionality for managing service areas."
"ADM-013-T4","Implement Form and API Submission for Zones","Add form fields for Zone Name, Status, and Delivery Radius. Implement the 'Save' functionality which sends the zone's name and GeoJSON data to the backend API for creation or update. Handle success and error responses from the API.","Task","Sprint Backlog","Critical","frontend.dev1@company.com","product.owner@company.com","2024-11-29","10","13","frontend,react,api-integration","Sprint 2","Implement advanced admin tools: geofencing and support ticket management.","Operational & Financial Configuration","EPIC-003","Admin Dashboard","ADM-013","ADM-013-T3","React.js,Axios","Medium","Low","Saving a new drawing creates a zone. Editing and saving an existing zone updates it. API errors are handled.","E2E tests for creating and editing a zone pass.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2024-11-18","2024-11-29","100%","Backend team.","Backend API for zone CRUD must be available.","E2E testing.","Deploy as part of admin dashboard.","Completes the geofencing feature by enabling data persistence."
"ADM-024-T1","Develop Support Ticket Queue Page","Create a new page at `/support/tickets` that uses the reusable Data Table. Configure it to display tickets and add filters for 'Status' and 'Assignee'. Integrate with a WebSocket client to show a real-time notification for new incoming tickets.","Task","Sprint Backlog","Critical","frontend.dev2@company.com","product.owner@company.com","2024-11-25","12.3","13","frontend,react,support,websockets","Sprint 2","Implement advanced admin tools: geofencing and support ticket management.","Monitoring & Support Tools","EPIC-004","Admin Dashboard","ADM-024","ADM-005-T1","React.js,Socket.IO client","Medium","Medium","Page displays paginated ticket list. Filters work correctly. Real-time notification appears for new tickets.","E2E tests for filtering and real-time updates.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2024-11-18","2024-11-29","100%","Backend team for WebSocket events.","Backend API for tickets and WebSocket server must be available.","E2E testing.","Deploy as part of admin dashboard.","Provides the main entry point for the support team to manage user issues."
"ADM-024-T2","Implement Ticket Detail Page Layout","Create the page `/support/tickets/{id}`. Develop the static layout to display ticket metadata (user, status, assignee) and the conversation history. Fetch and render data from the backend API.","Task","Sprint Backlog","Critical","frontend.dev2@company.com","product.owner@company.com","2024-11-27","10.7","13","frontend,react,support","Sprint 2","Implement advanced admin tools: geofencing and support ticket management.","Monitoring & Support Tools","EPIC-004","Admin Dashboard","ADM-024","ADM-024-T1","React.js,HTML/CSS","Medium","Low","Page fetches and displays all details for a ticket. Conversation history is rendered. Internal notes are visually distinct.","E2E tests verify data rendering.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2024-11-18","2024-11-29","100%","Backend team.","None","E2E testing.","Deploy as part of admin dashboard.","Allows support agents to view the full context of a user's issue."
"ADM-024-T3","Implement Ticket Actions (Reply, Note, Assign, Status Change)","Add interactive elements to the Ticket Detail Page. Implement the forms and API calls for posting a public reply, adding an internal note, changing the ticket's assignee, and updating its status.","Task","Sprint Backlog","Critical","frontend.dev2@company.com","product.owner@company.com","2024-11-29","14.3","13","frontend,react,support,api-integration","Sprint 2","Implement advanced admin tools: geofencing and support ticket management.","Monitoring & Support Tools","EPIC-004","Admin Dashboard","ADM-024","ADM-024-T2","React.js,Redux Toolkit","High","Medium","Admin can post public reply, add internal note, change assignee, and update status. UI updates correctly after each action.","E2E tests for each action.","2024-10-28T10:00:00Z","2024-10-28T10:00:00Z","2024-11-18","2024-11-29","100%","Backend team.","Backend APIs for all ticket actions must be available.","E2E testing.","Deploy as part of admin dashboard.","Provides the core functionality for support agents to manage and resolve tickets."