"test_id","feature_area","test_type","test_level","priority","automation_candidate","automation_roi","test_description","business_risk","technical_complexity","preconditions","test_steps","expected_result","test_data_needs","tools_required","estimated_effort_hours","automation_effort_hours","maintenance_effort_annual","dependencies","environment_requirements","success_criteria","failure_impact","regression_frequency","data_setup_complexity","cleanup_requirements","security_considerations","performance_expectations","accessibility_requirements"
"TEST-AUTH-001","User Authentication","Functional","End-to-End","Critical","true","High","Verify a registered user can successfully log in using their mobile number and a valid OTP, and that their session is established with valid JWTs.","High - Authentication failure blocks all user access and transactions.","Medium","A registered and 'active' user exists in the database. AWS SNS is functional. The Identity & Access Service is running.","1. Navigate to the login screen. 2. Enter the registered mobile number. 3. Click 'Send OTP'. 4. Retrieve the OTP from the test harness. 5. Enter the correct OTP. 6. Click 'Verify & Login'.","User is successfully authenticated, receives valid access and refresh JWTs, and is redirected to their role-specific dashboard (e.g., Customer home screen).","A pre-registered active user's mobile number. A mechanism to intercept OTPs in the test environment.","Cypress (Web), Appium/Detox (Mobile), Jest (API), Mock SMS Service","2","12","4","User Registration (CUS-001), Identity & Access Service (IAM-003)","Staging environment with all services deployed.","100% pass rate. End-to-end login process completes in < 3 seconds (REQ-1-042).","Critical - All users are unable to access the platform.","Every release, included in smoke suite.","Low","Log out the user session after the test.","Test for account lockout after 5 failed attempts (REQ-1-041). Test OTP rate limiting.","API P95 latency < 200ms.","Login form must be WCAG 2.1 AA compliant."
"TEST-ORDER-001","Order Placement","Functional","Integration","Critical","true","High","Verify the Checkout Orchestration Saga correctly processes a successful prepaid order, coordinating between Order, Vendor, and Payment services.","Critical - Failure results in lost revenue and data inconsistency.","High","A valid user session exists. All microservices (Order, Payment, Vendor) are running. Payment Gateway sandbox is available.","1. Send a POST request to the checkout API. 2. Mock a successful payment confirmation from the gateway. 3. Monitor the message bus for `OrderPlaced` and `PaymentConfirmed` events. 4. Query the Order service to confirm the order status is 'pending_vendor_acceptance'.","The Saga completes successfully, the order is created in the correct state, and all related events are published.","A valid cart payload. Mock payment gateway success response.","Jest (for NestJS), Pact (for contract testing), AWS SDK Mocks (for SQS/SNS)","6","24","8","Checkout Orchestration Saga (ORD-CHK-001), Payment Integration (PAY-PROC-001)","Integration testing environment.","Order is created with correct state. All events are published. No data inconsistencies.","Critical - Leads to failed orders, financial discrepancies, and poor user experience.","Every build.","Medium","Delete created order and associated transaction records.","Validate payment signature verification in the webhook handler.","Saga orchestration should complete in < 2 seconds.","N/A"
"TEST-ORDER-002","Order Placement","Functional","Integration","High","true","High","Verify the Checkout Saga's compensating transactions are triggered correctly when a step fails (e.g., payment succeeds but order creation fails).","High - Failure to compensate can lead to customers being charged for orders that were never created.","High","All microservices are running. Payment Gateway sandbox is available.","1. Initiate checkout via API. 2. Mock a successful payment confirmation. 3. Force the Order service to fail during order creation (e.g., via a mock database error). 4. Verify that a `RefundPayment` event is published to the message bus. 5. Verify the payment is refunded via the payment gateway mock.","The failed step triggers a compensating transaction that successfully refunds the customer's payment.","A valid cart payload. Mock payment gateway. Mock database error.","Jest (for NestJS), Pact, AWS SDK Mocks","8","32","12","Checkout Orchestration Saga (ORD-CHK-001)","Integration testing environment.","100% of failed transactions are correctly compensated and refunded.","Critical - Financial loss for customers and loss of trust.","Every build.","High","Reset all mocks and transaction states.","Ensure refund logic is secure and cannot be exploited.","Compensation should trigger within 5 seconds of failure detection.","N/A"
"TEST-LOGISTICS-001","Rider Logistics","Performance","System","Critical","true","High","Verify the P95 latency of the rider allocation algorithm under simulated peak load conditions.","High - Slow allocation leads to delayed deliveries and poor customer experience.","High","A large dataset of 'online' riders is seeded in the database. The Rider Logistics service is deployed in the performance environment.","1. Simulate a sustained load of 100 new orders per minute (REQ-1-093). 2. Use a load testing tool to trigger the `OrderReadyForPickup` event at this rate. 3. Monitor the time from event publication to the `RiderAssigned` event. 4. Collect and analyze the 95th percentile latency.","The P95 rider allocation time remains under 30 seconds as per REQ-1-093.","Large, realistic dataset of riders with varied geolocations.","k6/JMeter, Prometheus, Grafana","12","40","10","Rider Allocation Algorithm (LOG-ALLOC-001)","Dedicated Performance testing environment with scaled-up infrastructure.","P95 latency < 30 seconds. System remains stable without significant error rate increases.","Critical - Inability to scale operations, leading to service degradation at peak times.","Before every major release.","High","Tear down performance environment resources.","N/A","Meets the < 30s P95 target.","N/A"
"TEST-SECURITY-001","Data Privacy","Security","System","Critical","","Low","Verify the 'Right to Erasure' functionality correctly anonymizes all customer PII across all microservices while preserving transactional integrity for auditing.","Critical - Failure to comply with DPDP Act (REQ-1-023) can result in severe legal and financial penalties.","High","A test user exists with a history of completed orders, saved addresses, and profile information.","1. Trigger the data erasure process for the test user. 2. Verify the user is logged out and their session tokens are invalidated. 3. Query the `users` and `addresses` tables to confirm their PII has been deleted or replaced with placeholders. 4. Query the `orders` table to confirm that PII (customer name, delivery address) has been anonymized. 5. Verify that transactional data (order items, amounts, timestamps) remains intact in the `orders` table.","All PII is successfully anonymized across the system, but transactional data is preserved for auditing.","A test user with a rich history of activity on the platform.","Postman (API), Database Client (psql)","8","","","Right to Erasure (REQ-1-023)","Staging environment.","100% of PII fields are anonymized. 0% of non-personal transactional data is lost.","Critical - Legal non-compliance, loss of user trust.","Quarterly manual audit.","Medium","N/A","The process must be thorough and cover all data stores, including logs and backups as per the data retention policy.","N/A","N/A"