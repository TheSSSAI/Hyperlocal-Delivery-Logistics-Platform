"story_id","epic","title","user_role","description","business_value","priority","story_points","dependencies","acceptance_criteria","technical_tasks","definition_of_done"
"PE-003","Service Infrastructure, CI/CD, and Observability","Platform Engineer Defines Service Infrastructure as Code","Platform Engineer","As a Platform Engineer, I want to define all AWS resources for the Vendor & Catalog service using Terraform, so that the infrastructure is version-controlled, repeatable, and can be managed as code, ensuring consistency across all environments.","Enables automated and reliable provisioning of cloud infrastructure, reducing manual errors, improving deployment speed, and providing a version-controlled history of all infrastructure changes.","Must Have","13","[]","[{""scenario"":""Terraform apply successfully creates all required resources"",""given"":""the Platform Engineer has configured AWS credentials and is in the 'infra' directory"",""when"":""they run 'terraform apply'"",""then"":""the command successfully provisions an S3 bucket for uploads, an SQS queue with a corresponding DLQ for import jobs, an AWS Lambda with an EventBridge trigger for compliance checks, and all necessary Kubernetes resources (Deployment, Service, HPA) in the EKS cluster.""},{""scenario"":""Resource configuration meets security and operational standards"",""given"":""the resources have been provisioned via Terraform"",""when"":""an audit is performed on the AWS account"",""then"":""the S3 bucket is confirmed to be private with encryption enabled, the SQS queue has a configured DLQ, and the Lambda function has an IAM role with least-privilege permissions.""}]","[""WI-VCS-016: Define Terraform for S3 Buckets and SQS Queues"",""WI-VCS-017: Define Terraform for EKS Service Deployment"",""WI-VCS-018: Define Terraform for Scheduled Job (EventBridge + Lambda)""]","[""Terraform code is peer-reviewed and merged."",""A `terraform plan` runs successfully in the CI pipeline."",""`terraform apply` successfully provisions all resources in the development environment."",""All resources are tagged according to project conventions."",""Terraform state is stored in a secure, remote backend (e.g., S3).""]"
"VND-008","Core Vendor Profile and Catalog Management","Vendor Manages Product Categories","Vendor","As a Vendor, I want to create, view, edit, and delete product categories within my store's dashboard, so that I can effectively organize my product catalog, which helps customers easily discover and browse my offerings.","Improves catalog organization for vendors and enhances product discovery for customers, potentially leading to increased sales. Provides structured data for platform analytics.","Must Have","3","[""VND-004"",""VND-005""]","[{""scenario"":""Vendor successfully creates a new category"",""given"":""I am a logged-in vendor on the 'Categories' management page"",""when"":""I enter a unique name 'Appetizers' and click 'Save'"",""then"":""a success notification is displayed, and 'Appetizers' appears in my list of categories.""},{""scenario"":""Vendor attempts to delete a category that contains products"",""given"":""I am a logged-in vendor and my 'Beverages' category has products in it"",""when"":""I attempt to delete the 'Beverages' category"",""then"":""an error message is displayed: 'Cannot delete category as it contains products. Please move or delete the products first.', and the category is not deleted.""},{""scenario"":""Vendor attempts to create a category with a duplicate name"",""given"":""a category named 'Main Course' already exists for my store"",""when"":""I attempt to create another category named 'main course'"",""then"":""a validation error 'A category with this name already exists.' is displayed, and the category is not created.""}]","[""WI-VCS-005: Implement CRUD API for Product Categories""]","[""All acceptance criteria are met and validated."",""Code is peer-reviewed and has >80% test coverage."",""E2E tests for the full CRUD lifecycle are passing."",""API endpoint is secured and documented."",""Feature is verified in the staging environment.""]"
"VND-005","Core Vendor Profile and Catalog Management","Vendor Manages Store Profile and Business Hours","Vendor","As a registered vendor, I want to view and edit my store's profile information, including its name, address, contact details, and daily business hours, so that I can ensure customers and riders have the most accurate and up-to-date information for my business.","Ensures data accuracy for logistics and customer experience, which builds trust and reduces operational errors. Automates store availability, preventing unfulfillable orders placed after hours.","Must Have","5","[""VND-004""]","[{""scenario"":""Vendor successfully updates their store profile"",""given"":""I am a logged-in vendor on the 'Store Profile' page"",""when"":""I modify the store name and click 'Save Changes'"",""then"":""the system saves the updated information, displays a success message, and the page refreshes to show the new store name.""},{""scenario"":""Vendor sets standard business hours for a single day"",""given"":""I am on the 'Business Hours' settings page"",""when"":""I set Monday's hours to 9:00 AM - 5:00 PM and click 'Save Changes'"",""then"":""the system saves the hours for Monday, and the saved hours are correctly shown on page reload.""},{""scenario"":""Customer view reflects store as 'Closed' outside business hours"",""given"":""my store hours are set to 10:00 AM - 8:00 PM"",""when"":""a customer views my store page at 9:00 PM IST"",""then"":""my store is displayed as 'Closed', and the 'add to cart' functionality is disabled.""}]","[""WI-VCS-001: Create Vendor Profile and Business Hours Entities"",""WI-VCS-002: Implement API Endpoints for Vendor Profile CRUD""]","[""All acceptance criteria are met and validated."",""Code is peer-reviewed and has >80% test coverage."",""E2E tests for profile updates and business hours are passing."",""API endpoint is secured and documented."",""Feature is verified in the staging environment.""]"
"PE-001","Service Infrastructure, CI/CD, and Observability","Platform Engineer Automates Service Deployment with CI/CD","Platform Engineer","As a Platform Engineer, I want a fully automated Continuous Integration and Continuous Deployment (CI/CD) pipeline for the Vendor & Catalog service, so that I can deploy new features and bug fixes to production safely, quickly, and with confidence.","Increases development velocity, improves deployment reliability, reduces the risk of human error during releases, and provides a repeatable process for delivering value to users.","Must Have","13","[""PE-003""]","[{""scenario"":""CI process validates a pull request"",""given"":""a developer opens a pull request with new code"",""when"":""the CI workflow is triggered"",""then"":""the workflow must run linting checks, execute all unit and integration tests, and fail if any step fails, thus blocking the merge.""},{""scenario"":""CD process deploys a merge to main"",""given"":""a pull request is successfully merged into the 'main' branch"",""when"":""the CD workflow is triggered"",""then"":""a new versioned Docker image is built and pushed to ECR, and Terraform is applied to update the Kubernetes deployment, triggering a zero-downtime rolling update of the service in production.""}]","[""WI-VCS-019: Create CI Workflow for Pull Requests"",""WI-VCS-020: Create CD Workflow for Production Deployment""]","[""GitHub Actions workflows for CI and CD are created and merged."",""CI pipeline is enforced as a status check on the main branch."",""A successful merge to main triggers a deployment that can be verified in the EKS cluster."",""All secrets and credentials are handled securely and are not exposed in logs.""]"
"VND-009","Core Vendor Profile and Catalog Management","Vendor Adds a New Product to Catalog","Vendor","As a registered and approved Vendor, I want to access a form to add a new product to my catalog by providing its name, description, price, an image, and its current stock quantity, so that I can make my goods available for customers to discover and purchase on the platform.","Enables vendors to populate their digital storefront, which is the fundamental requirement for generating sales. This directly contributes to the platform's marketplace inventory and revenue generation through commissions.","Must Have","5","[""VND-008""]","[{""scenario"":""Vendor successfully creates a new product"",""given"":""I am a logged-in vendor on the 'Add Product' page"",""when"":""I fill in all required fields with valid data, upload a valid image, and click 'Save Product'"",""then"":""the new product is created, the image is stored, a success notification is displayed, and the new item is visible in my product list.""},{""scenario"":""Vendor attempts to save with invalid data"",""given"":""I am on the 'Add Product' page"",""when"":""I enter a negative value for the price or non-numeric text for stock quantity"",""then"":""the form submission is blocked, and an inline validation error message is displayed next to the invalid field.""}]","[""WI-VCS-004: Create Product and Category TypeORM Entities"",""WI-VCS-006: Implement CRUD API for Products (Create part)""]","[""All acceptance criteria are met and validated."",""Code is peer-reviewed and has >80% test coverage."",""E2E tests for the product creation flow are passing."",""API endpoint is secured, handles file uploads, and is documented."",""Feature is verified in the staging environment.""]"
"VND-010","Core Vendor Profile and Catalog Management","Vendor Edits an Existing Product","Vendor","As a vendor, I want to edit the details of an existing product in my catalog, including its name, description, price, and stock quantity, so that I can keep my product information accurate and manage my inventory effectively.","Enables vendors to maintain an accurate and up-to-date product catalog, which is critical for customer trust, reducing order errors, and effective sales management.","Should Have","5","[""VND-009""]","[{""scenario"":""Vendor successfully edits a product's price"",""given"":""I am a logged-in vendor viewing my product list"",""when"":""I select a product to edit, change its price from 100 to 120, and click 'Save'"",""then"":""the product's price is updated in the system, a success notification is displayed, and the product list shows the new price.""},{""scenario"":""Vendor attempts to save an edit with an empty name"",""given"":""I am on the product edit page"",""when"":""I clear the 'Product Name' field and click 'Save'"",""then"":""the submission is blocked, and a validation error 'Product name is required' is displayed.""}]","[""WI-VCS-006: Implement CRUD API for Products (Update part)""]","[""All acceptance criteria are met and validated."",""Code is peer-reviewed and has >80% test coverage."",""E2E tests for the product editing flow are passing."",""API endpoint is secured and documented."",""Feature is verified in the staging environment.""]"
"PE-002","Service Infrastructure, CI/CD, and Observability","Platform Engineer Integrates Service with Observability Stack","Platform Engineer","As a Platform Engineer, I want the Vendor & Catalog service to be fully integrated with the observability stack (Prometheus, Grafana, CloudWatch, OpenTelemetry), so that I can monitor its health, debug issues using logs and traces, and set up alerts for critical failures.","Provides essential visibility into the service's real-time performance and health, enabling proactive issue detection, faster incident response, and data-driven capacity planning.","Must Have","8","[]","[{""scenario"":""Service exposes metrics to Prometheus"",""given"":""the service is running in the EKS cluster"",""when"":""Prometheus scrapes the service's /metrics endpoint"",""then"":""key operational metrics like API request latency, request count, and error rates are successfully collected and are viewable in Grafana.""},{""scenario"":""Service logs are structured and searchable"",""given"":""the service is processing requests"",""when"":""I view the logs in AWS CloudWatch Logs"",""then"":""all log entries are in a structured JSON format and contain a 'correlationId', allowing me to trace a single request's journey through the service.""},{""scenario"":""Service generates distributed traces"",""given"":""a user request triggers a workflow involving the Vendor & Catalog service"",""when"":""I view the transaction in the distributed tracing tool (e.g., Jaeger, AWS X-Ray)"",""then"":""a complete trace is visible, showing spans for the incoming request, any database queries, and any outgoing API calls made by the service.""}]","[""WI-VCS-021: Integrate Prometheus Metrics Endpoint"",""WI-VCS-022: Implement Structured JSON Logging"",""WI-VCS-023: Integrate OpenTelemetry for Distributed Tracing""]","[""All acceptance criteria are met and validated."",""NestJS modules for observability are implemented and tested."",""A sample Grafana dashboard for the service is created."",""The service is successfully configured for log and trace collection in the staging environment.""]"
"VND-007","Core Vendor Profile and Catalog Management","Vendor Toggles Store Availability (Online/Offline)","Vendor","As a Vendor, I want a master switch to immediately toggle my store's availability between 'Online' and 'Offline' so that I can instantly stop or resume accepting new orders to manage unexpected events like running out of stock or emergencies.","Provides vendors with direct control over their operational status, preventing orders during unforeseen closures. This reduces order cancellations and improves customer satisfaction.","Should Have","3","[""VND-005""]","[{""scenario"":""Vendor successfully takes their store offline"",""given"":""my store status is 'Online'"",""when"":""I activate the 'Go Offline' master switch and confirm the action"",""then"":""my store's availability status is updated to 'Offline', and my store is no longer listed as available for new orders in the customer app.""},{""scenario"":""Master 'Offline' switch overrides the daily schedule"",""given"":""my store is scheduled to be open"",""when"":""I set my master availability switch to 'Offline'"",""then"":""my store immediately appears as 'Closed' to all customers, overriding the scheduled hours.""}]","[""WI-VCS-003: Implement API Endpoint to Toggle Store Availability""]","[""All acceptance criteria are met and validated."",""Code is peer-reviewed and has >80% test coverage."",""E2E test confirming customer app reflects the status change is passing."",""An event is published to notify other services of the status change."",""Feature is verified in the staging environment.""]"
"VND-027","Automated Vendor Compliance","Vendor Manages Business License Information","Vendor","As a vendor, I want to add, view, and update my business license details, such as FSSAI number and its expiry date, so that I can maintain my compliance with platform policies and legal regulations, ensuring my store remains active.","Ensures the platform operates with legally compliant vendors, mitigating legal risk. Enables automated compliance checks and reminders.","Must Have","3","[""VND-005""]","[{""scenario"":""Vendor successfully adds a new license"",""given"":""I am a logged-in vendor on my store profile page"",""when"":""I add a valid license number and a future expiry date, and click 'Save'"",""then"":""the license information is saved to my profile, a success message is displayed, and the action is recorded in the audit log.""},{""scenario"":""Vendor attempts to save a license with a past expiry date"",""given"":""I am adding or editing a license"",""when"":""I select an expiry date that is in the past and attempt to save"",""then"":""the form submission is prevented, and an error message 'Expiry date must be in the future' is displayed.""}]","[""WI-VCS-013: Create Vendor License Entity and CRUD API""]","[""All acceptance criteria are met and validated."",""Code is peer-reviewed and has >80% test coverage."",""E2E tests for the license CRUD flow are passing."",""API endpoint is secured, auditable, and documented."",""Feature is verified in the staging environment.""]"
"SYS-004","Automated Vendor Compliance","System Sends Automated License Expiry Reminders","Platform Owner","As a Platform Owner, I want the system to send automated reminder notifications to vendors at 30, 15, and 7 days before their license expires, so that we can proactively ensure compliance, prevent business interruptions for vendors, and reduce manual administrative work.","Ensures vendor compliance and prevents revenue loss for both vendors and the platform by avoiding service interruptions. Improves vendor experience with proactive support.","Should Have","5","[""VND-027""]","[{""scenario"":""30-Day Expiry Reminder Trigger"",""given"":""a vendor has a license with an expiry date exactly 30 days from today"",""when"":""the daily automated license check job runs"",""then"":""the system sends a '30-day expiry' reminder notification to the vendor via push notification and email.""},{""scenario"":""Reminders stop after a vendor updates their license"",""given"":""a vendor has received a 30-day reminder"",""when"":""the vendor updates their license with a new expiry date set for one year in the future"",""then"":""the system does not send any further 15-day or 7-day reminders associated with the old expiry date.""}]","[""WI-VCS-014: Implement Scheduled Job for License Expiry""]","[""All acceptance criteria are met and validated."",""Scheduled job (Lambda) is implemented and tested with >80% coverage."",""The job is configured via Terraform and runs on schedule in the staging environment."",""Integration with the notification service is verified."",""Job failures are logged and trigger a monitoring alert.""]"
"SYS-005","Automated Vendor Compliance","System Automatically Suspends Vendors with Expired Licenses","Platform Owner","As a Platform Owner, I want the system to automatically suspend vendors from receiving new orders the day their license expires, so that the platform remains compliant with regulations and protects customers from unlicensed businesses.","Mitigates legal and reputational risk by enforcing vendor compliance automatically. Reduces manual administrative overhead and upholds the platform's brand integrity.","Should Have","5","[""VND-027""]","[{""scenario"":""System blocks a vendor whose license has expired"",""given"":""a vendor's license expiry date was yesterday"",""when"":""the daily system job for compliance checks runs"",""then"":""the system updates the vendor's status to 'suspended_license_expired', and an audit log is created.""},{""scenario"":""A suspended vendor is not assigned new orders"",""given"":""a vendor's status is 'suspended_license_expired'"",""when"":""the order management service attempts to assign a new order to this vendor"",""then"":""the assignment fails, and the system does not send the order to the vendor.""}]","[""WI-VCS-015: Implement Logic for Auto-Suspending Vendors""]","[""All acceptance criteria are met and validated."",""The scheduled job logic is implemented and tested."",""The status update publishes an event to notify other services."",""E2E test confirms a suspended vendor cannot receive new orders."",""Feature is verified in the staging environment.""]"
"VND-011","Core Vendor Profile and Catalog Management","Vendor Deletes a Product","Vendor","As a Vendor, I want to permanently remove a product from my catalog so that I can maintain an accurate and up-to-date list of items I offer for sale.","Ensures catalog accuracy, which improves the customer experience by preventing orders for discontinued items. Simplifies catalog management for vendors.","Should Have","8","[""VND-009""]","[{""scenario"":""Vendor successfully deletes a product"",""given"":""I am a logged-in vendor viewing my product list"",""when"":""I click the 'Delete' action for a product and confirm the deletion"",""then"":""the system soft-deletes the product, and it is no longer visible in my product list or in the customer-facing application.""},{""scenario"":""Vendor is prevented from deleting a product in an active order"",""given"":""I have a product that is part of an order with status 'Preparing'"",""when"":""I attempt to delete that product"",""then"":""the system prevents the deletion and displays an error message: 'This product cannot be deleted as it is part of an active order.'""}]","[""WI-VCS-006: Implement CRUD API for Products (Delete part)""]","[""All acceptance criteria are met and validated."",""Code is peer-reviewed and has >80% test coverage."",""E2E tests for the deletion flow and its business rule are passing."",""API endpoint is secured, handles the cross-service check, and is documented."",""Feature is verified in the staging environment.""]"
"VND-013","Bulk Catalog Management via CSV","Vendor Bulk Imports Products via CSV","Vendor","As a Vendor, I want to bulk import my product catalog using a CSV file so that I can quickly and efficiently add or update many products at once, saving significant time compared to manual entry.","Reduces vendor onboarding time and effort, especially for those with large inventories. Improves data accuracy by minimizing manual entry errors.","Should Have","13","[""VND-009"",""VND-008""]","[{""scenario"":""Vendor successfully initiates an import"",""given"":""I am a logged-in vendor on the 'Products' page"",""when"":""I click 'Import Products', request a secure upload URL, and upload a valid CSV file"",""then"":""the system accepts the file and queues it for asynchronous processing, and I receive a notification that the job has started.""},{""scenario"":""Successful import of a valid CSV file with new products"",""given"":""the asynchronous import job is processing a valid CSV file"",""when"":""the job completes successfully"",""then"":""all new products from the CSV are created and visible in my product list, and I receive a completion notification.""},{""scenario"":""Import updates existing products based on SKU"",""given"":""a product with SKU 'SKU-001' exists with price 100"",""when"":""I upload a CSV containing a row for 'SKU-001' with price 120"",""then"":""the existing product's price is updated to 120.""}]","[""WI-VCS-007: Create Endpoint to Generate Pre-signed S3 Upload URL"",""WI-VCS-008: Create Endpoint to Trigger Asynchronous Processing"",""WI-VCS-010: Set Up SQS Consumer and Worker Logic""]","[""All acceptance criteria are met and validated."",""The asynchronous workflow (API, SQS, Worker) is fully implemented and tested."",""E2E tests for the happy path import are passing."",""Performance of the worker meets NFRs."",""Feature is verified in the staging environment.""]"
"VND-014","Bulk Catalog Management via CSV","Vendor Receives Downloadable Error Report for Failed CSV Import","Vendor","As a Vendor, I want to receive a downloadable error report that details exactly which rows failed during a CSV import and why, so that I can efficiently correct the data and successfully re-upload my product catalog.","Reduces vendor frustration and support ticket volume by enabling self-service error correction for bulk product uploads. Improves data quality and speeds up the vendor onboarding process.","Should Have","8","[""VND-013""]","[{""scenario"":""CSV upload with invalid rows triggers an error report"",""given"":""I upload a CSV file containing some rows with errors (e.g., missing price)"",""when"":""the import process completes"",""then"":""the import is atomic and no data is persisted, I receive a notification that the import failed with errors, and a 'Download Error Report' link is provided.""},{""scenario"":""Error report contains only failed rows and specific error descriptions"",""given"":""I have received a link to an error report"",""when"":""I download and open the CSV file"",""then"":""the file contains only the rows that failed validation, and it includes a new final column 'Error_Description' detailing the specific validation error for each row.""}]","[""WI-VCS-011: Implement Row-by-Row CSV Validation Engine"",""WI-VCS-012: Implement Database Operations and Error Report Generation""]","[""All acceptance criteria are met and validated."",""The validation engine and report generation logic are fully tested."",""E2E tests for various failure scenarios are passing."",""The format of the error report is verified and documented."",""Feature is verified in the staging environment.""]"
"VND-015","Bulk Catalog Management via CSV","Vendor Bulk Exports Product Catalog to CSV","Vendor","As a vendor, I want to export my entire product catalog to a CSV file, so that I can create a local backup of my data and perform external analysis or bulk updates.","Enhances vendor data portability and control, enabling offline analysis, backups, and a streamlined export-edit-reimport workflow.","Could Have","5","[""VND-009"",""VND-013""]","[{""scenario"":""Vendor successfully exports their catalog"",""given"":""I am a logged-in vendor on my 'Products' page"",""when"":""I click the 'Export Catalog' button"",""then"":""an asynchronous export job starts, and I receive a notification with a secure, time-limited download link when the CSV file is ready.""},{""scenario"":""Exported CSV format is compatible with the import template"",""given"":""I have downloaded an exported catalog CSV"",""when"":""I inspect the file"",""then"":""the column headers and data format match the requirements of the bulk import feature, allowing me to edit and re-import it.""}]","[""WI-VCS-009: Create Endpoint to Generate Report Download URL""]","[""All acceptance criteria are met and validated."",""The asynchronous export workflow is implemented and tested."",""The generated CSV format is verified for import compatibility."",""The download link is confirmed to be secure and time-limited."",""Feature is verified in the staging environment.""]"