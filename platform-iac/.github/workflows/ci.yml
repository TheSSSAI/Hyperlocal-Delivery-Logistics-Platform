# .github/workflows/ci.yml
name: "Platform IAC CI"

on:
  pull_request:
    branches:
      - main
      - develop
    paths:
      - "**.tf"
      - "**.tfvars"
      - ".github/workflows/ci.yml"

permissions:
  id-token: write # Required for AWS OIDC authentication
  contents: read # Required to checkout the code
  pull-requests: write # Required to post plan comments

jobs:
  validate_and_plan:
    name: "Validate & Plan"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, staging, prod]

    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0" # Specify a consistent version

      - name: "Setup TFLint"
        uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: v0.50.1

      - name: "Setup TFSec"
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          version: v1.28.1

      - name: "Run TFLint"
        run: tflint --recursive
        continue-on-error: true # Allow PR to proceed but show errors

      - name: "Run TFSec"
        run: tfsec .
        continue-on-error: true # Allow PR to proceed but show errors

      - name: "Configure AWS Credentials for ${{ matrix.environment }}"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionRole-${{ matrix.environment }}"
          aws-region: "ap-south-1"

      - name: "Terraform Init for ${{ matrix.environment }}"
        id: init
        run: terraform init
        working-directory: ./environments/${{ matrix.environment }}
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_TF_STATE_BUCKET }}
          AWS_DYNAMODB_TABLE: ${{ secrets.AWS_TF_LOCK_TABLE }}
          
      - name: "Terraform Validate for ${{ matrix.environment }}"
        id: validate
        run: terraform validate -no-color
        working-directory: ./environments/${{ matrix.environment }}

      - name: "Terraform Plan for ${{ matrix.environment }}"
        id: plan
        run: terraform plan -no-color -out=tfplan
        working-directory: ./environments/${{ matrix.environment }}
        continue-on-error: true

      - name: "Format Terraform Plan Output"
        id: format-plan
        run: |
          PLAN_OUTPUT=$(terraform show -no-color tfplan)
          # Truncate plan for comment to avoid exceeding GitHub's limit
          TRUNCATED_PLAN=$(echo "$PLAN_OUTPUT" | head -c 65000)
          if [ ${#PLAN_OUTPUT} -gt 65000 ]; then
            TRUNCATED_PLAN="$TRUNCATED_PLAN\n\n... (plan output truncated)"
          fi
          echo "PLAN_BODY<<EOF" >> $GITHUB_ENV
          echo '```terraform' >> $GITHUB_ENV
          echo "$TRUNCATED_PLAN" >> $GITHUB_ENV
          echo '```' >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        working-directory: ./environments/${{ matrix.environment }}

      - name: "Comment Plan on PR"
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const plan_output = `${process.env.PLAN_BODY}`;
            const environment = "${{ matrix.environment }}";
            const plan_exit_code = ${{ steps.plan.outcome }};
            let plan_result_header;

            if (plan_exit_code == 'failure') {
              plan_result_header = `### ðŸš¨ Terraform Plan for \`${environment}\` Failed`;
            } else {
              plan_result_header = `### âœ… Terraform Plan for \`${environment}\``;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${plan_result_header}\n\n${plan_output}`
            });