"test_id","feature_area","test_type","test_level","priority","automation_candidate","automation_roi","test_description","business_risk","technical_complexity","preconditions","test_steps","expected_result","test_data_needs","tools_required","estimated_effort_hours","automation_effort_hours","maintenance_effort_annual","dependencies","environment_requirements","success_criteria","failure_impact","regression_frequency","data_setup_complexity","cleanup_requirements","security_considerations","performance_expectations","accessibility_requirements"
"TEST-AUTH-001","User Authentication","Security","Integration","Critical","true","High","Verify that a user account is temporarily locked after 5 consecutive failed OTP login attempts, as per REQ-FUN-002 and CUS-005.","High - Failure to prevent brute-force attacks can lead to account takeovers and fraud.","Medium","A registered customer account exists. Redis is running for stateful tracking. The current failed attempt count for the user is 4.","1. Make an API call to POST /api/v1/auth/verify with a valid mobile number and an incorrect OTP. 2. Verify the API returns a 400 'Invalid OTP' error. 3. Make a second API call to the same endpoint with another incorrect OTP. 4. Verify the API returns a 429 'Too Many Requests' error with a message indicating the account is locked for 15 minutes. 5. Attempt to call POST /api/v1/auth/otp to request a new OTP for the same number. 6. Verify the API returns a 429 error.","The 5th failed attempt triggers a lockout. All subsequent authentication attempts for the user are blocked for the configured duration.","A registered user's mobile number. A Redis client to inspect/reset the attempt counter for the test user.","Jest (Supertest); Redis CLI; Postman","4","8","2","Identity & Access Service; Redis","Integration environment with Redis.","API returns 429 status on 5th failed attempt and subsequent attempts within the lockout window.","Critical - System is vulnerable to brute-force attacks.","Every release","Medium - Requires manipulating Redis state.","Delete Redis keys for the test user's attempt count and lock status.","This test validates a primary security control against brute-force attacks.","API response time < 200ms.","N/A"
"TEST-PAY-001","Online Payment Processing","Functional","E2E","Critical","true","High","Verify the end-to-end happy path for a customer placing a prepaid order, including payment processing, order state transition, and event publication, as per CUS-025 and PAY-004.","Critical - Failure in the payment flow directly blocks all platform revenue.","High","Customer is logged in with items in cart. Vendor is online. Razorpay sandbox is available.","1. Customer proceeds to checkout. 2. API call to initiate payment performs inventory check. 3. Customer selects 'UPI' and is redirected to Razorpay. 4. Customer authorizes payment in Razorpay sandbox. 5. Customer is redirected back to the app. 6. System receives a valid webhook from Razorpay, validates the signature, and processes it. 7. Verify the in-app confirmation screen is displayed. 8. Verify the order status in the database is 'Pending Vendor Acceptance'. 9. Verify a 'PaymentConfirmed' event was published.","The order is successfully created and paid for, with all system states and events updated correctly.","Authenticated customer session; A vendor with in-stock products; Razorpay sandbox test credentials.","Cypress; A webhook inspection tool (e.g., ngrok); Database client.","8","24","8","Order Service; Payment Service; Vendor Service; Razorpay Sandbox","Staging environment with a publicly accessible endpoint for webhooks.","Order is successfully created in the correct state and a valid transaction is recorded.","Critical - Inability to process orders, leading to 100% revenue loss.","Every release, and on a nightly schedule.","High - Requires orchestration across multiple services and a third party.","Cancel the test order; potentially reset test product inventory.","Webhook signature validation is a critical part of this test.","End-to-end flow should feel seamless to the user.","N/A"
"TEST-LOG-001","Rider Logistics","Functional","System","High","true","High","Verify the rider allocation failure and re-assignment logic, as per SYS-002 and SYS-003. The system must re-assign a rejected task and eventually transition the order to 'Allocation Failed' after maximum retries.","High - Failure to handle re-assignments leads to unfulfilled orders and poor customer experience.","High","An order is in 'Ready for Pickup' state. At least 3 riders are 'Online' in the vicinity.","1. System offers the task to Rider A. 2. Simulate Rider A rejecting the task via API. 3. Verify the system immediately offers the task to Rider B. 4. Simulate Rider B timing out (no response). 5. Verify the system offers the task to Rider C. 6. Simulate Rider C rejecting the task. 7. Verify the order status changes to 'Allocation Failed'. 8. Verify a high-priority alert is generated for the admin dashboard.","The system correctly cycles through available riders and gracefully fails the order allocation, triggering an administrative alert.","One order in 'Ready for Pickup' state; Three test rider accounts set to 'Online'.","Jest (Supertest); Postman; A WebSocket client to monitor admin alerts.","6","16","6","Order Service; Rider Logistics Service; Notification Service","Integration environment.","Order status becomes 'Allocation Failed' after 3 rejections/timeouts. Admin alert is triggered.","High - Orders get stuck in the system, leading to SLA breaches and manual intervention.","Every release.","High - Requires precise state management of multiple rider accounts.","Reset rider statuses; Cancel the test order.","N/A","Re-assignment latency should be under 2 seconds.","N/A"
"TEST-DATA-001","Data Privacy","Functional","System","High","true","Medium","Verify the 'Right to Erasure' functionality, ensuring customer PII is anonymized across all relevant records while preserving transactional data for auditing, as per CUS-043 and REQ-1-023.","High - Failure to comply with DPDP Act 2023 can result in significant legal and financial penalties.","High","A customer account exists with a history of several completed orders.","1. As the customer, initiate the 'Delete My Account' process. 2. Confirm the action in the UI. 3. Verify the user is logged out and their session is invalidated. 4. Attempt to log in again with the same credentials and verify it fails. 5. As an admin, query the database for the user's record in the 'users' table. Verify PII fields are anonymized. 6. Query the 'orders' table for historical orders placed by this user. Verify customer-specific PII (name, address) is anonymized, but transactional data (items, amounts, timestamps) remains intact.","All PII related to the user is successfully anonymized across the system, but non-personal transactional data is preserved.","A test customer account with a populated order history.","Cypress; Database client (psql); Postman","8","20","5","Identity & Access Service; Order Management Service","Staging environment with direct DB access for verification.","No PII for the deleted user is retrievable from the database. Historical financial records are preserved.","Critical - Legal non-compliance, reputational damage, and potential fines.","Every release.","Medium - Requires creating a user with a realistic order history.","N/A - The test data is anonymized, not deleted.","This test validates a key compliance control.","Anonymization process can be asynchronous but should complete within 5 minutes.","N/A"