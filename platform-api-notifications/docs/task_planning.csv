"task_id","title","description","type","status","priority","assignee","reporter","due_date","estimated_hours","story_points","labels","sprint","sprint_goal","epic","epic_id","project","parent_id","dependencies","skills_required","complexity","risk_level","acceptance_criteria","definition_of_done","created_at","updated_at","sprint_start_date","sprint_end_date","capacity_allocation","collaboration_required","external_dependencies","testing_requirements","deployment_notes","business_value"
"TASK-PAY-004-01","[WI-004] Design & Implement Database Entities for Payments","Define and implement the TypeORM entities for `Payment` and `FinancialTransaction`. Ensure all columns, types (especially `decimal` for money), indexes, and foreign keys are correctly specified. Generate and review the initial TypeORM migration script.","Task","Sprint Backlog","Critical","senior.dev@company.com","product.owner@company.com","2024-06-03","8.3","1","backend,database,typeorm,payments","Sprint 1","Implement core customer payment processing and payout foundations.","Online Payment and Refund Processing","EPIC-002","Hyperlocal Delivery Service","PAY-004","","TypeORM,PostgreSQL,TypeScript","Medium","Low","TypeORM migration script is generated and applies successfully. All financial columns use the `decimal` type. Indexes are defined on foreign keys and `status` columns.","Code reviewed; Unit tests passing; Migration script validated in CI; Documentation updated","2024-05-24T09:00:00Z","2024-05-24T09:00:00Z","2024-05-27","2024-06-07","100%","N/A","N/A","Migration testing in CI pipeline.","Migration must be run before application deployment.","Foundation for all financial data persistence."
"TASK-PAY-004-02","[WI-005] Implement 'Create Payment Intent' Endpoint","Develop the NestJS controller and service for the `POST /internal/payments/create-intent` endpoint. This includes integrating the Razorpay SDK to create a payment order, creating a local `Payment` record in 'pending' state within a database transaction, and returning the necessary details to the caller.","Task","Sprint Backlog","High","mid.dev1@company.com","product.owner@company.com","2024-06-04","10.3","2","backend,api,nestjs,razorpay","Sprint 1","Implement core customer payment processing and payout foundations.","Online Payment and Refund Processing","EPIC-002","Hyperlocal Delivery Service","PAY-004","TASK-PAY-004-01","NestJS,TypeScript,Razorpay API","Medium","Medium","Endpoint successfully calls Razorpay's `orders.create` API. A new record is created in the `payments` table with status 'pending'. The API response contains the correct Razorpay order ID.","Code reviewed; Unit and Integration tests passing; API contract tests passing; Deployed to staging","2024-05-24T09:00:00Z","2024-05-24T09:00:00Z","2024-05-27","2024-06-07","100%","Order Service team for API contract.","Razorpay Sandbox availability","Integration and contract testing required.","Requires Razorpay sandbox credentials in environment variables.","Enables the start of the online payment flow."
"TASK-PAY-004-03","[WI-019] Implement Webhook Signature Validation Guard","Create a reusable NestJS Guard to validate incoming Razorpay webhook signatures using HMAC-SHA256 and a time-safe comparison. The secret must be fetched from AWS Secrets Manager.","Task","Sprint Backlog","Critical","senior.dev@company.com","product.owner@company.com","2024-06-05","6.3","1","backend,security,nestjs,webhook","Sprint 1","Implement core customer payment processing and payout foundations.","Online Payment and Refund Processing","EPIC-002","Hyperlocal Delivery Service","PAY-004","","NestJS,TypeScript,Cryptography","High","High","Guard successfully validates correct signatures and rejects incorrect signatures with a 403 status. Uses a time-safe string comparison. Unit test coverage is 100%.","Code reviewed by a senior engineer; Unit tests achieve 100% coverage; Security review passed","2024-05-24T09:00:00Z","2024-05-24T09:00:00Z","2024-05-27","2024-06-07","100%","DevOps for Secrets Manager access.","N/A","Rigorous unit testing of cryptographic logic.","Requires webhook secret in AWS Secrets Manager.","Prevents fraudulent payment confirmations."
"TASK-PAY-004-04","[WI-006] Implement Webhook Handler Logic with Transactional Outbox","Develop the controller and service to handle validated webhook events. The service must update the `Payment` record status, create double-entry `FinancialTransaction` records, and publish a `PaymentConfirmed` event using the Transactional Outbox pattern to ensure atomicity.","Task","Sprint Backlog","High","senior.dev@company.com","product.owner@company.com","2024-06-06","12","2","backend,nestjs,webhook,saga","Sprint 1","Implement core customer payment processing and payout foundations.","Online Payment and Refund Processing","EPIC-002","Hyperlocal Delivery Service","PAY-004","TASK-PAY-004-01,TASK-PAY-004-03","NestJS,TypeORM,PostgreSQL,AWS SNS","High","High","A 'payment.captured' event updates Payment status to 'success', creates correct ledger entries, and publishes a `PaymentConfirmed` event atomically.","Code reviewed; Integration tests for webhook flow passing; Transactional Outbox pattern verified","2024-05-24T09:00:00Z","2024-05-24T09:00:00Z","2024-05-27","2024-06-07","100%","N/A","N/A","Integration tests simulating webhook calls and verifying DB state and event publication.","Requires webhook endpoint to be configured in Razorpay.","Completes the payment confirmation and triggers downstream order processing."
"TASK-PAY-004-06","[WI-008] Implement Refund Processing Service","Create an internal NestJS service to handle refund requests. It will call the Razorpay API for refunds, create reversal ledger transactions, and handle gateway errors.","Task","Sprint Backlog","Medium","mid.dev1@company.com","product.owner@company.com","2024-06-07","10","2","backend,nestjs,refunds,razorpay","Sprint 1","Implement core customer payment processing and payout foundations.","Online Payment and Refund Processing","EPIC-002","Hyperlocal Delivery Service","PAY-004","TASK-PAY-004-01","NestJS,Razorpay API","Medium","Medium","Service correctly processes full/partial refunds, creates ledger entries, and handles refund failures by logging a critical alert.","Code reviewed; Integration tests for refund scenarios passing; Idempotency verified","2024-05-24T09:00:00Z","2024-05-24T09:00:00Z","2024-05-27","2024-06-07","100%","Order Service team for API contract.","Razorpay Sandbox availability","Integration tests for various refund scenarios.","N/A","Enables automated refunds for cancelled orders."
"TASK-PAY-001-01","[WI-007] Develop Stateful Payment Reconciliation Service","Create a NestJS service that queries for payments in a 'payment_pending_confirmation' state, calls the Razorpay API for definitive status, updates the local record, and publishes the appropriate event.","Task","Sprint Backlog","Medium","mid.dev2@company.com","product.owner@company.com","2024-06-07","10.3","2","backend,nestjs,reconciliation,cronjob","Sprint 1","Implement core customer payment processing and payout foundations.","Online Payment and Refund Processing","EPIC-002","Hyperlocal Delivery Service","PAY-001","TASK-PAY-004-02","NestJS,Razorpay API","Medium","Low","Service correctly processes pending payments, updates status to 'success' or 'failed', publishes correct events, and is idempotent.","Code reviewed; Integration tests passing for all reconciliation scenarios","2024-05-24T09:00:00Z","2024-05-24T09:00:00Z","2024-05-27","2024-06-07","100%","N/A","Razorpay Sandbox availability","Integration tests covering success, failure, and idempotency.","N/A","Provides resilience against missed payment webhooks."
"TASK-PAY-001-03","[WI-007] Configure Kubernetes CronJob for Reconciliation","Using Terraform, define a Kubernetes `CronJob` resource that runs on a schedule (e.g., every 5 minutes) and triggers the internal reconciliation job endpoint.","Task","Sprint Backlog","Low","senior.dev@company.com","product.owner@company.com","2024-06-07","5.2","1","infrastructure,devops,terraform,kubernetes","Sprint 1","Implement core customer payment processing and payout foundations.","Online Payment and Refund Processing","EPIC-002","Hyperlocal Delivery Service","PAY-001","TASK-PAY-001-02","Terraform,Kubernetes,YAML","Low","Low","Terraform plan is valid, creates the CronJob resource, and the job successfully triggers on schedule in the staging EKS cluster.","Terraform code peer-reviewed; CronJob verified in staging","2024-05-24T09:00:00Z","2024-05-24T09:00:00Z","2024-05-27","2024-06-07","100%","N/A","N/A","Manual verification in staging EKS cluster.","Requires correct service endpoint and cluster networking.","Automates the execution of the reconciliation job."
"TASK-PAY-002-01","[WI-009] Implement Commission Calculation Service","Develop a NestJS service that consumes `OrderCompleted` events, calculates platform commission based on the defined hierarchy (vendor-specific > category > default), and creates corresponding double-entry `FinancialTransaction` records.","Task","Sprint Backlog","High","mid.dev1@company.com","product.owner@company.com","2024-06-12","12","2","backend,nestjs,commission,payments","Sprint 2","Deliver automated weekly settlements for vendors and riders.","Payouts and Settlements Automation","EPIC-003","Hyperlocal Delivery Service","PAY-002","TASK-PAY-004-01","NestJS,TypeScript","High","Medium","Service correctly calculates commission using the full hierarchy, creates accurate ledger entries, and is idempotent.","Code reviewed; Unit and integration tests passing for all commission scenarios","2024-05-24T09:00:00Z","2024-05-24T09:00:00Z","2024-06-10","2024-06-21","100%","Vendor & Catalog service team for API contract.","N/A","Extensive integration testing for the commission hierarchy logic.","N/A","Automates the calculation of the platform's primary revenue stream."
"TASK-PAY-003-01","[WI-010] Implement Rider Earnings Aggregation Service","Develop a NestJS service that consumes `OrderDelivered` events, creating `FinancialTransaction` records to credit rider earnings and manage their cash-in-hand ledger for COD orders.","Task","Sprint Backlog","High","mid.dev2@company.com","product.owner@company.com","2024-06-13","12","2","backend,nestjs,payments,cod","Sprint 2","Deliver automated weekly settlements for vendors and riders.","Payouts and Settlements Automation","EPIC-003","Hyperlocal Delivery Service","PAY-003","TASK-PAY-004-01","NestJS,TypeScript","High","Medium","Prepaid delivery correctly credits earnings. COD delivery correctly credits earnings and manages the cash ledger. Tips are credited. Service is idempotent.","Code reviewed; Unit and integration tests passing for all earnings scenarios","2024-05-24T09:00:00Z","2024-05-24T09:00:00Z","2024-06-10","2024-06-21","100%","Order Management service team for event contract.","N/A","Integration testing for prepaid, COD, and tipped order scenarios.","N/A","Automates the tracking of rider earnings and cash liabilities."
"TASK-PAY-002-02","[WI-011] Design & Implement Payout Entity (Shared)","Define and implement the shared TypeORM entity for `Payout` to store a record of each disbursement attempt to both vendors and riders. Generate and review the TypeORM migration.","Task","Sprint Backlog","Critical","senior.dev@company.com","product.owner@company.com","2024-06-11","4","1","backend,database,typeorm,payments","Sprint 2","Deliver automated weekly settlements for vendors and riders.","Payouts and Settlements Automation","EPIC-003","Hyperlocal Delivery Service","PAY-002","TASK-PAY-004-01","TypeORM,PostgreSQL","Low","Low","The `Payout` entity is defined correctly. The migration script is generated and applies successfully. A one-to-many relationship is established with `FinancialTransaction`.","Code reviewed; Migration script validated in CI","2024-05-24T09:00:00Z","2024-05-24T09:00:00Z","2024-06-10","2024-06-21","100%","N/A","N/A","Migration testing in CI pipeline.","Migration must be run before application deployment.","Provides a unified model for tracking all outgoing payments."
"TASK-PAY-002-03","[WI-012] Develop Payout Calculation Job Logic for Vendors","Create the core job logic for weekly vendor payouts. This involves an optimized SQL/TypeORM query to aggregate balances (Sales - Commissions) from the `financial_transactions` ledger for all vendors.","Task","Sprint Backlog","High","mid.dev1@company.com","product.owner@company.com","2024-06-17","13.3","2","backend,nestjs,sql,payments","Sprint 2","Deliver automated weekly settlements for vendors and riders.","Payouts and Settlements Automation","EPIC-003","Hyperlocal Delivery Service","PAY-002","TASK-PAY-002-01","NestJS,PostgreSQL,TypeORM,SQL","High","High","Job correctly calculates net payable amount for vendors. Job correctly identifies all eligible vendors. Aggregation query is performant.","Code reviewed; Integration tests passing with pre-populated ledger data","2024-05-24T09:00:00Z","2024-05-24T09:00:00Z","2024-06-10","2024-06-21","100%","N/A","N/A","Extensive integration testing with various ledger scenarios.","N/A","Core logic for calculating vendor payments."
"TASK-PAY-003-03","[WI-012] Extend Payout Job for Rider COD Reconciliation","Extend the weekly payout job to handle riders. This requires a complex aggregation query to calculate net balance as `(Earnings + Tips) - CashCollected`. It must handle positive and negative balances.","Task","Sprint Backlog","High","mid.dev2@company.com","product.owner@company.com","2024-06-18","13.3","2","backend,nestjs,sql,payments,cod","Sprint 2","Deliver automated weekly settlements for vendors and riders.","Payouts and Settlements Automation","EPIC-003","Hyperlocal Delivery Service","PAY-003","TASK-PAY-003-01,TASK-PAY-002-03","NestJS,PostgreSQL,TypeORM,SQL","High","High","Job correctly calculates positive net balance for riders with low COD, and negative net balance for riders with high COD. Aggregation query is performant.","Code reviewed; Integration tests passing with pre-populated rider ledger data","2024-05-24T09:00:00Z","2024-05-24T09:00:00Z","2024-06-10","2024-06-21","100%","N/A","N/A","Extensive integration testing with various rider ledger scenarios (positive, negative, zero balance).","N/A","Core logic for calculating rider payments and reconciling cash."
"TASK-PAY-002-04","[WI-013] Implement RazorpayX Payout Service Integration (Shared)","Develop the shared service that integrates with the RazorpayX Payouts API. This will take a user ID and amount, create a `Payout` record, initiate the fund transfer, update the record with the result, and create the ledger debit.","Task","Sprint Backlog","Critical","senior.dev@company.com","product.owner@company.com","2024-06-20","12","2","backend,nestjs,razorpayx,payouts","Sprint 2","Deliver automated weekly settlements for vendors and riders.","Payouts and Settlements Automation","EPIC-003","Hyperlocal Delivery Service","PAY-002","TASK-PAY-002-02,TASK-PAY-002-03,TASK-PAY-003-03","NestJS,RazorpayX API","High","High","Successful payout results in 'success' status. Failed payout results in 'failed' status with reason. All API interactions are logged. Service is idempotent.","Code reviewed; Integration tests mocking RazorpayX API passing","2024-05-24T09:00:00Z","2024-05-24T09:00:00Z","2024-06-10","2024-06-21","100%","N/A","RazorpayX Sandbox availability","Integration tests covering success, failure (invalid beneficiary), and idempotency.","Requires RazorpayX sandbox credentials.","Enables the automated transfer of funds to partners."