/* tslint:disable */
/* eslint-disable */
/**
 * Platform API
 * Platform API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI, RequiredError } from './base';
import {
    AddressDTO,
    AdminDashboardDataDTO,
    AuthTokensDTO,
    CreateAddressDTO,
    CreateOrderDTO,
    CreateProductDTO,
    CreateSupportTicketDTO,
    CustomerProfileDTO,
    OrderDTO,
    ProductDTO,
    RequestOtpDTO,
    RiderProfileDTO,
    SupportTicketDTO,
    UpdateAddressDTO,
    UpdateCustomerProfileDTO,
    UpdateOrderStatusDTO,
    UpdateProductDTO,
    UpdateVendorProfileDTO,
    VendorDashboardDataDTO,
    VendorProfileDTO,
    VerifyOtpDTO,
} from './models';

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new address for the current customer
         * @param {CreateAddressDTO} createAddressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAddress: async (createAddressDTO: CreateAddressDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAddressDTO' is not null or undefined
            if (createAddressDTO === null || createAddressDTO === undefined) {
                throw new RequiredError('createAddressDTO','Required parameter createAddressDTO was null or undefined when calling createAddress.');
            }
            const localVarPath = `/api/v1/customer/addresses`;
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    * : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createAddressDTO !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createAddressDTO !== undefined ? createAddressDTO : {}) : (createAddressDTO || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new order
         * @param {CreateOrderDTO} createOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder: async (createOrderDTO: CreateOrderDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            if (createOrderDTO === null || createOrderDTO === undefined) {
                throw new RequiredError('createOrderDTO','Required parameter createOrderDTO was null or undefined when calling createOrder.');
            }
            const localVarPath = `/api/v1/orders`;
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';
            const needsSerialization = (typeof createOrderDTO !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createOrderDTO !== undefined ? createOrderDTO : {}) : (createOrderDTO || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the current customer's profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyCustomerProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/customer/profile`;
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an order by its ID
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderById: async (orderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling getOrderById.');
            }
            const localVarPath = `/api/v1/orders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get nearby vendors based on location
         * @param {number} latitude 
         * @param {number} longitude 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNearbyVendors: async (latitude: number, longitude: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            if (latitude === null || latitude === undefined) {
                throw new RequiredError('latitude','Required parameter latitude was null or undefined when calling getNearbyVendors.');
            }
            if (longitude === null || longitude === undefined) {
                throw new RequiredError('longitude','Required parameter longitude was null or undefined when calling getNearbyVendors.');
            }
            const localVarPath = `/api/v1/vendors/nearby`;
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }
            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request an OTP for login or registration
         * @param {RequestOtpDTO} requestOtpDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestOtp: async (requestOtpDTO: RequestOtpDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            if (requestOtpDTO === null || requestOtpDTO === undefined) {
                throw new RequiredError('requestOtpDTO','Required parameter requestOtpDTO was null or undefined when calling requestOtp.');
            }
            const localVarPath = `/api/v1/auth/otp`;
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            const localVarRequestOptions = { method: 'POST', ...options};
            localVarRequestOptions.headers = {...options.headers};
            localVarRequestOptions.data = JSON.stringify(requestOtpDTO);

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify an OTP and get auth tokens
         * @param {VerifyOtpDTO} verifyOtpDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyOtp: async (verifyOtpDTO: VerifyOtpDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            if (verifyOtpDTO === null || verifyOtpDTO === undefined) {
                throw new RequiredError('verifyOtpDTO','Required parameter verifyOtpDTO was null or undefined when calling verifyOtp.');
            }
            const localVarPath = `/api/v1/auth/verify`;
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            const localVarRequestOptions = { method: 'POST', ...options};
            localVarRequestOptions.headers = {...options.headers};
            localVarRequestOptions.data = JSON.stringify(verifyOtpDTO);

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        async createAddress(createAddressDTO: CreateAddressDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAddress(createAddressDTO, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = configuration.basePath) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        async createOrder(createOrderDTO: CreateOrderDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrder(createOrderDTO, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = configuration.basePath) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        async getMyCustomerProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerProfileDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyCustomerProfile(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = configuration.basePath) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        async getOrderById(orderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderById(orderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = configuration.basePath) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        async getNearbyVendors(latitude: number, longitude: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VendorProfileDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNearbyVendors(latitude, longitude, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = configuration.basePath) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        async requestOtp(requestOtpDTO: RequestOtpDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestOtp(requestOtpDTO, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = configuration.basePath) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        async verifyOtp(verifyOtpDTO: VerifyOtpDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthTokensDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyOtp(verifyOtpDTO, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = configuration.basePath) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        createAddress(createAddressDTO: CreateAddressDTO, options?: any): AxiosPromise<AddressDTO> {
            return localVarFp.createAddress(createAddressDTO, options).then((request) => request(axios, basePath));
        },
        createOrder(createOrderDTO: CreateOrderDTO, options?: any): AxiosPromise<OrderDTO> {
            return localVarFp.createOrder(createOrderDTO, options).then((request) => request(axios, basePath));
        },
        getMyCustomerProfile(options?: any): AxiosPromise<CustomerProfileDTO> {
            return localVarFp.getMyCustomerProfile(options).then((request) => request(axios, basePath));
        },
        getOrderById(orderId: string, options?: any): AxiosPromise<OrderDTO> {
            return localVarFp.getOrderById(orderId, options).then((request) => request(axios, basePath));
        },
        getNearbyVendors(latitude: number, longitude: number, options?: any): AxiosPromise<Array<VendorProfileDTO>> {
            return localVarFp.getNearbyVendors(latitude, longitude, options).then((request) => request(axios, basePath));
        },
        requestOtp(requestOtpDTO: RequestOtpDTO, options?: any): AxiosPromise<void> {
            return localVarFp.requestOtp(requestOtpDTO, options).then((request) => request(axios, basePath));
        },
        verifyOtp(verifyOtpDTO: VerifyOtpDTO, options?: any): AxiosPromise<AuthTokensDTO> {
            return localVarFp.verifyOtp(verifyOtpDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * @summary Create a new address for the current customer
     * @param {CreateAddressDTO} createAddressDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createAddress(createAddressDTO: CreateAddressDTO, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createAddress(createAddressDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * @summary Create a new order
     * @param {CreateOrderDTO} createOrderDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createOrder(createOrderDTO: CreateOrderDTO, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createOrder(createOrderDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * @summary Get the current customer's profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMyCustomerProfile(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMyCustomerProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * @summary Get an order by its ID
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getOrderById(orderId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getOrderById(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * @summary Get nearby vendors based on location
     * @param {number} latitude 
     * @param {number} longitude 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getNearbyVendors(latitude: number, longitude: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getNearbyVendors(latitude, longitude, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * @summary Request an OTP for login or registration
     * @param {RequestOtpDTO} requestOtpDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public requestOtp(requestOtpDTO: RequestOtpDTO, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).requestOtp(requestOtpDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * @summary Verify an OTP and get auth tokens
     * @param {VerifyOtpDTO} verifyOtpDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public verifyOtp(verifyOtpDTO: VerifyOtpDTO, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).verifyOtp(verifyOtpDTO, options).then((request) => request(this.axios, this.basePath));
    }
}