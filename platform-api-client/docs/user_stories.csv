"story_id","epic","title","user_role","description","business_value","priority","story_points","dependencies","acceptance_criteria","technical_tasks","definition_of_done"
"VND-005","Vendor Profile & Compliance Management","Vendor Manages Store Profile","Vendor (Store Owner/Manager)","As a registered vendor, I want to view and edit my store's profile information, including its name, address, and contact details, so that I can ensure customers, riders, and the platform have the most accurate and up-to-date information for my business.","Ensures data accuracy for logistics (rider navigation, delivery radius calculation) and customer experience (correct store info, contact details), which builds trust and reduces operational errors.","Must Have","5","[]","[{""scenario"":""Vendor successfully views and updates their store profile"",""given"":""a logged-in vendor is on the 'Store Profile' page of the vendor dashboard"",""when"":""they modify the store name, phone number, and address fields with valid information and click the 'Save Changes' button"",""then"":""the system validates the inputs, saves the updated information to the database, displays a success message, and the page refreshes to show the new details.""},{""scenario"":""Vendor attempts to save the profile with invalid data"",""given"":""a logged-in vendor is on the 'Store Profile' page"",""when"":""they clear the 'Store Name' field or enter an invalidly formatted phone number and click 'Save Changes'"",""then"":""the system must prevent the save operation and display clear, inline validation error messages next to the corresponding fields.""}]","[""Develop TypeORM entity for VendorProfile"",""Implement NestJS controller with GET/PUT endpoints for store profile"",""Use DTOs with class-validator for input validation"",""Ensure RBAC guards protect the endpoints""]","[""API endpoints are documented in OpenAPI/Swagger."",""Unit and integration tests achieve >80% code coverage."",""Code has been peer-reviewed and merged."",""Feature is deployed and verified in the staging environment.""]"
"VND-006","Vendor Profile & Compliance Management","Vendor Sets and Manages Daily Business Hours","Vendor","As a vendor, I want to define and manage my store's daily operating hours, including setting multiple time slots per day or marking days as closed, so that the platform automatically controls my store's availability and prevents customers from placing orders outside of my business hours.","Automates store availability, preventing unfulfillable orders placed after hours. This improves operational efficiency for vendors, manages customer expectations, and enhances platform reliability.","Must Have","5","[""VND-005""]","[{""scenario"":""Vendor sets standard business hours for a single day"",""given"":""the vendor is on the 'Business Hours' settings page"",""when"":""the vendor sets Monday's hours to 9:00 AM - 5:00 PM and clicks 'Save Changes'"",""then"":""the system successfully saves the hours for Monday and a success notification is displayed.""},{""scenario"":""Vendor sets multiple time slots for a single day"",""given"":""the vendor is on the 'Business Hours' settings page"",""when"":""the vendor sets Tuesday's hours to 10:00 AM - 2:00 PM, adds a second time slot for 5:00 PM - 9:00 PM, and saves"",""then"":""the system saves both time slots for Tuesday, and the store is shown as open only during these two periods.""},{""scenario"":""System prevents saving invalid or overlapping time ranges"",""given"":""the vendor is on the 'Business Hours' settings page"",""when"":""the vendor attempts to set hours to 7:00 PM - 11:00 AM or create overlapping slots"",""then"":""the system prevents saving and displays an inline validation error message.""}]","[""Create TypeORM entity for VendorBusinessHour with a one-to-many relationship to VendorProfile"",""Extend the profile update API to accept and validate business hours data"",""Implement logic to check for overlapping time slots and valid time ranges""]","[""API endpoints are documented in OpenAPI/Swagger."",""Unit and integration tests achieve >80% code coverage."",""Code has been peer-reviewed and merged."",""Feature is deployed and verified in the staging environment.""]"
"VND-007","Vendor Profile & Compliance Management","Vendor Toggles Store Availability (Online/Offline)","Vendor","As a Vendor, I want a master switch to immediately toggle my store's availability between 'Online' and 'Offline' so that I can instantly stop or resume accepting new orders to manage unexpected events.","Provides vendors with direct control over their operational status, preventing orders during unforeseen closures. This reduces order cancellations and improves customer satisfaction.","Must Have","3","[""VND-005""]","[{""scenario"":""Vendor successfully takes their store offline"",""given"":""a vendor is logged in and their store status is 'Online'"",""when"":""the vendor activates the 'Go Offline' master switch and confirms"",""then"":""the system updates the store's availability status to 'Offline' and the store is no longer listed as available in the customer-facing application.""},{""scenario"":""Vendor successfully brings their store back online"",""given"":""a vendor is logged in and their store status is 'Offline'"",""when"":""the vendor activates the 'Go Online' master switch"",""then"":""the system updates the store's availability status to 'Online' and the store becomes available for new orders (subject to business hours).""}]","[""Add a status field to the VendorProfile entity"",""Create a dedicated PATCH endpoint for toggling availability"",""Publish a 'VendorStatusChanged' event to an SNS topic upon status change""]","[""Event publication is verified via integration test."",""API endpoint is documented in OpenAPI/Swagger."",""Code has been peer-reviewed and merged."",""Feature is deployed and verified in the staging environment.""]"
"VND-027","Vendor Profile & Compliance Management","Vendor Manages Business License Information","Vendor","As a vendor, I want to add, view, and update my business license details, such as FSSAI number and its expiry date, so that I can maintain my compliance with platform policies and legal regulations.","Ensures platform operates with legally compliant vendors, mitigating legal risk. Enables automated compliance checks, reminders, and enforcement actions.","Must Have","3","[""VND-005""]","[{""scenario"":""Vendor successfully adds a new license"",""given"":""a logged-in vendor is on their store profile page"",""when"":""they add a valid license number, type, and a future expiry date, and click 'Save'"",""then"":""the system saves the license information, a success message is displayed, and the action is recorded in the audit log.""},{""scenario"":""Vendor attempts to save a license with a past expiry date"",""given"":""a logged-in vendor is adding a license"",""when"":""they select an expiry date that is in the past and attempt to save"",""then"":""the system prevents the save and displays a validation error message: 'Expiry date must be in the future'.""}]","[""Create a `VendorLicense` entity and associated CRUD API endpoints."",""Ensure all state changes are recorded in an audit log."",""Add validation for expiry dates.""]","[""API endpoints are documented in OpenAPI/Swagger."",""Unit and integration tests achieve >80% code coverage."",""Code has been peer-reviewed and merged."",""Feature is deployed and verified in the staging environment.""]"
"SYS-004","Vendor Profile & Compliance Management","System Sends Automated License Expiry Reminders","System","As a Platform Owner, I want the system to automatically send reminder notifications to vendors whose licenses are expiring soon, so that they can renew them in time and avoid service disruption.","Ensures vendor compliance and prevents revenue loss for both vendors and the platform by avoiding service interruptions. Reduces administrative overhead for the compliance team.","Should Have","5","[""VND-027""]","[{""scenario"":""30-Day Expiry Reminder Trigger"",""given"":""a vendor has a license with an expiry date exactly 30 days from today"",""when"":""the daily automated license check job runs"",""then"":""the system sends a '30-day expiry' reminder notification to the vendor via configured channels (Push Notification, SMS).""},{""scenario"":""15-Day and 7-Day Expiry Reminders"",""given"":""a vendor has a license expiring in 15 days (or 7 days)"",""when"":""the daily automated license check job runs"",""then"":""the system sends the corresponding 15-day (or 7-day) reminder notification.""}]","[""Implement a scheduled job (e.g., using NestJS `@Cron()`) that runs daily."",""Query for licenses expiring at 30, 15, and 7 days."",""Publish `LicenseExpiringSoon` events to an SNS topic for the notification service to consume.""]","[""Scheduled job is tested and verified to run correctly."",""Event publication is verified via integration test."",""Code has been peer-reviewed and merged."",""Feature is deployed and verified in the staging environment.""]"
"SYS-005","Vendor Profile & Compliance Management","System Blocks Vendors with Expired Licenses","System","As a Platform Owner, I want the system to automatically suspend vendors with expired licenses from receiving new orders, so that the platform remains compliant with regulations and protects customers.","Mitigates legal and regulatory risk, ensures customer safety, and upholds the platform's brand integrity by enforcing vendor compliance.","Must Have","3","[""VND-027"",""SYS-004""]","[{""scenario"":""System automatically blocks a vendor whose license has expired"",""given"":""a vendor's license expiry date was yesterday"",""when"":""the daily system job runs to check for expired licenses"",""then"":""the system updates the vendor's status to 'suspended_license_expired' and publishes a `VendorSuspended` event.""},{""scenario"":""A suspended vendor is not assigned new orders"",""given"":""a vendor's status is 'suspended_license_expired'"",""when"":""the order management service attempts to assign a new order to this vendor"",""then"":""the assignment fails, and the system does not send the order to the vendor.""}]","[""Extend the daily scheduled job to check for licenses with an expiry date in the past."",""Update the vendor's status in the database."",""Publish a `VendorSuspended` event to SNS.""]","[""Scheduled job is tested and verified to update status correctly."",""Event publication is verified via integration test."",""Code has been peer-reviewed and merged."",""Feature is deployed and verified in the staging environment.""]"
"VND-008","Vendor Catalog & Inventory Management","Vendor Manages Product Categories","Vendor","As a Vendor, I want to create, view, edit, and delete product categories within my dashboard, so that I can effectively organize my product catalog for customers.","Improves catalog organization for vendors and enhances product discovery for customers, potentially leading to increased sales.","Must Have","3","[""VND-005""]","[{""scenario"":""Vendor successfully creates a new product category"",""given"":""the vendor is on the 'Categories' management page"",""when"":""they enter a unique name (e.g., 'Appetizers') and click 'Save'"",""then"":""the new 'Appetizers' category appears in the list of categories.""},{""scenario"":""Vendor attempts to delete a category that contains products"",""given"":""a category exists that has one or more products associated with it"",""when"":""the vendor clicks the 'Delete' control for that category and confirms"",""then"":""an error notification is displayed: 'Cannot delete category as it contains products.' and the category is not deleted.""},{""scenario"":""Vendor attempts to create a category with a duplicate name"",""given"":""a category named 'Beverages' already exists"",""when"":""the vendor attempts to create a new category named 'beverages'"",""then"":""a validation error is displayed: 'A category with this name already exists.'""}]","[""Create `ProductCategory` entity and a NestJS controller for CRUD operations."",""Implement business rule to prevent deletion of a category with associated products."",""Ensure category names are unique per vendor (case-insensitive).""]","[""API endpoints are documented in OpenAPI/Swagger."",""Unit and integration tests achieve >80% code coverage."",""Code has been peer-reviewed and merged."",""Feature is deployed and verified in the staging environment.""]"
"VND-009","Vendor Catalog & Inventory Management","Vendor Adds a New Product to Catalog","Vendor","As a Vendor, I want to add a new product to my catalog by providing its name, description, price, an image, and its current stock quantity, so that my goods are available for customers to purchase.","Enables vendors to populate their digital storefront, which is the fundamental requirement for generating sales and platform revenue.","Must Have","5","[""VND-008""]","[{""scenario"":""Successful Product Creation"",""given"":""the vendor is on the 'Add Product' page"",""when"":""they fill in all required fields (Name, Price, Stock, Category) with valid data, upload a valid image, and click 'Save Product'"",""then"":""the system creates the new product, stores the image, displays a success notification, and the new item is visible in the product list.""},{""scenario"":""Attempt to Save with Invalid Data Types"",""given"":""the vendor is on the 'Add Product' page"",""when"":""they enter non-numeric text in the 'Price' field and attempt to save"",""then"":""the form submission is blocked, and an inline validation error message appears: 'Price must be a valid number'.""}]","[""Create `Product` entity."",""Implement 'create' flow handling image uploads by generating a pre-signed S3 URL for the client."",""Implement soft-delete for products to preserve historical order data."",""Validate price and stock are non-negative.""]","[""API endpoints are documented in OpenAPI/Swagger."",""Unit and integration tests achieve >80% code coverage."",""Code has been peer-reviewed and merged."",""Feature is deployed and verified in the staging environment.""]"
"VND-010","Vendor Catalog & Inventory Management","Vendor Edits an Existing Product in their Catalog","Vendor","As a vendor, I want to edit the details of an existing product, including its name, description, price, image, and stock quantity, so that I can keep my product information accurate.","Enables vendors to maintain an up-to-date catalog, which is critical for customer trust, reducing order errors, and effective sales management.","Must Have","3","[""VND-009""]","[{""scenario"":""Successfully edit all product fields"",""given"":""a vendor selects a product to edit"",""when"":""they modify the name, price, stock, and clicks 'Save'"",""then"":""the system updates the product details in the database, and the product list shows the updated details.""},{""scenario"":""Attempt to save with invalid data"",""given"":""a vendor is on the product edit page"",""when"":""they enter a negative value for the price and clicks 'Save'"",""then"":""the submission is prevented, and a validation error 'Price must be a positive number' is displayed.""}]","[""Implement a PATCH endpoint to update product details."",""Handle optional image replacement via the pre-signed URL pattern."",""Ensure RBAC guards prevent a vendor from editing another vendor's products.""]","[""API endpoints are documented in OpenAPI/Swagger."",""Unit and integration tests achieve >80% code coverage."",""Code has been peer-reviewed and merged."",""Feature is deployed and verified in the staging environment.""]"
"VND-011","Vendor Catalog & Inventory Management","Vendor Deletes a Product from Catalog","Vendor","As a Vendor, I want to permanently remove a product from my catalog so that I can maintain an accurate list of items I offer for sale.","Ensures catalog accuracy, which improves customer experience by preventing orders for discontinued items.","Must Have","5","[""VND-009""]","[{""scenario"":""Successful Deletion of a Product"",""given"":""a vendor is viewing their product list"",""when"":""they click 'Delete' for a product not in any active orders, and confirms the action"",""then"":""the system performs a soft delete on the product, and it no longer appears in the vendor's catalog or the customer-facing app.""},{""scenario"":""Attempt to Delete a Product in an Active Order"",""given"":""a product is part of an order that is not yet 'Delivered' or 'Cancelled'"",""when"":""the vendor attempts to delete that product"",""then"":""the system prevents the deletion and displays an error message: 'This product cannot be deleted as it is part of an active order.'""}]","[""Implement a DELETE endpoint that performs a soft-delete."",""Integrate with the Order service to check if a product exists in any active orders before deletion."",""Ensure historical order data is preserved by not using a hard delete.""]","[""API endpoints are documented in OpenAPI/Swagger."",""Unit and integration tests achieve >80% code coverage."",""Code has been peer-reviewed and merged."",""Feature is deployed and verified in the staging environment.""]"
"VND-012","Vendor Catalog & Inventory Management","Vendor Configures 'Limited Stock' Threshold","Vendor","As a Vendor, I want to set a store-wide threshold, so that any product with stock at or below this level is displayed to customers as 'Limited Stock', creating urgency.","Increases potential for sales conversion by creating customer urgency and provides vendors with more control over product presentation.","Should Have","2","[""VND-005"",""VND-009""]","[{""scenario"":""Vendor sets a valid 'Limited Stock' threshold"",""given"":""a vendor is on the 'Store Settings' page"",""when"":""they enter a positive whole number (e.g., 5) into the 'Limited Stock Threshold' field and clicks 'Save'"",""then"":""the new threshold is saved, and a success message is displayed.""},{""scenario"":""Product status correctly displays as 'Limited Stock'"",""given"":""a vendor has set their threshold to 10 and has a product with stock quantity of 7"",""when"":""a customer views that product"",""then"":""the system displays the product's status as 'Limited Stock'.""}]","[""Add a `limited_stock_threshold` field to the `VendorProfile` entity."",""Extend the product retrieval logic to calculate and return a `stock_status` enum ('Available', 'Limited Stock', 'Out of Stock').""]","[""API endpoints are documented in OpenAPI/Swagger."",""Unit tests for the calculation logic are implemented."",""Code has been peer-reviewed and merged."",""Feature is deployed and verified in the staging environment.""]"
"CUS-024","Vendor Catalog & Inventory Management","Customer Notified of Stock Change at Checkout","Customer","As a customer proceeding to payment, I want the system to perform a final, real-time availability check on my cart and notify me if an item has become unavailable, so I can update my cart and avoid a failed payment.","Prevents customer frustration from failed payments, reduces cart abandonment at the final step, and minimizes unnecessary payment gateway transactions.","Must Have","3","[""VND-009""]","[{""scenario"":""A single item in the cart becomes out of stock"",""given"":""a customer has 'Product X' in their cart and clicks 'Proceed to Payment'"",""when"":""the system's real-time check finds that 'Product X' is now out of stock"",""then"":""the checkout flow is halted, and a modal is displayed stating that 'Product X' is no longer available and prompting to 'Update Cart'.""},{""scenario"":""All items in cart are available at checkout"",""given"":""a customer has items in their cart and clicks 'Proceed to Payment'"",""when"":""the real-time availability check for all cart items is successful"",""then"":""the customer proceeds to the payment gateway selection screen without interruption.""}]","[""Implement an internal-only API endpoint that accepts a list of product IDs and quantities."",""The endpoint must perform a highly performant batch database query to check stock."",""The Order service will call this endpoint before initiating a payment.""]","[""API endpoint is documented for internal use."",""Performance test confirms P95 latency is under 50ms."",""Code has been peer-reviewed and merged."",""Feature is deployed and verified in the staging environment via integration testing.""]"
"VND-015","Vendor Catalog & Inventory Management","Vendor Bulk Exports Product Catalog to CSV","Vendor","As a vendor, I want to export my entire product catalog to a CSV file, so that I can create a local backup and perform external analysis or bulk updates.","Enhances vendor data portability and control, enabling offline analysis, backups, and streamlined bulk updates via an export-edit-reimport workflow.","Should Have","5","[""VND-009"",""VND-013""]","[{""scenario"":""Vendor successfully exports a populated product catalog"",""given"":""a vendor is on the 'Products' management page"",""when"":""they click the 'Export Catalog' button"",""then"":""an asynchronous export job is initiated, and upon completion, the vendor receives an in-app notification with a secure, time-limited link to download the generated CSV file.""}]","[""Create an API endpoint to trigger a background job (SQS)."",""Implement a worker to stream data from the database, format it into a CSV, and upload it to S3."",""Generate a pre-signed S3 URL for download."",""Implement a notification mechanism to inform the vendor when the export is ready.""]","[""API endpoints are documented in OpenAPI/Swagger."",""E2E test for the export-to-download flow is implemented."",""Code has been peer-reviewed and merged."",""Feature is deployed and verified in the staging environment.""]"
"VND-013","Vendor Catalog & Inventory Management","Vendor Bulk Imports Product Catalog via CSV","Vendor","As a Vendor, I want to bulk import my product catalog using a CSV file so that I can quickly add or update many products at once, saving time compared to manual entry.","Reduces vendor onboarding time and effort, especially for those with large inventories, and improves data accuracy by minimizing manual entry errors.","Should Have","8","[""VND-009""]","[{""scenario"":""Successful import of a valid CSV file with new products"",""given"":""the vendor has a correctly formatted CSV file with 10 new, valid product rows"",""when"":""they upload the file via the import interface"",""then"":""an asynchronous job processes the file, and the 10 new products are visible in the vendor's product list after completion.""},{""scenario"":""Update existing products based on SKU"",""given"":""a product with 'product_sku' = 'SHOE-BL-42' already exists"",""when"":""the vendor uploads a CSV containing a row with 'product_sku' = 'SHOE-BL-42' and a new price"",""then"":""the system identifies the existing product and updates its price.""}]","[""Implement a file upload flow using pre-signed S3 URLs."",""Create a background job (SQS) to process the uploaded CSV."",""Implement a worker with robust validation logic for each row."",""Handle create vs. update logic based on SKU."",""Generate a detailed error report for failed rows.""]","[""API endpoints are documented in OpenAPI/Swagger."",""Unit tests cover all validation rules."",""Code has been peer-reviewed and merged."",""Feature is deployed and verified in the staging environment.""]"
"VND-014","Vendor Catalog & Inventory Management","Vendor Receives Downloadable CSV Import Error Report","Vendor","As a Vendor, I want to receive a downloadable error report detailing which rows failed during a CSV import and why, so that I can efficiently correct the data and re-upload.","Reduces vendor frustration and support ticket volume by enabling self-service error correction for bulk uploads. Improves data quality and speeds up the catalog update process.","Should Have","5","[""VND-013""]","[{""scenario"":""CSV upload with invalid rows triggers error report generation"",""given"":""a vendor uploads a CSV file with at least one row containing an error"",""when"":""the import process completes"",""then"":""the UI displays a failure message with a link to 'Download Error Report (.csv)'.""},{""scenario"":""Error report contains only failed rows and an error description"",""given"":""a vendor downloads the error report"",""when"":""they open the CSV file"",""then"":""the file contains ONLY the rows that failed validation, with a new final column named 'Error_Description' detailing the specific validation error(s).""}]","[""Extend the CSV import worker to capture failed rows and error messages."",""Implement logic to generate a new CSV file from the failed rows."",""Upload the error report to S3 and provide a pre-signed download URL to the vendor via notification.""]","[""E2E test with a mixed valid/invalid CSV is implemented."",""The format of the error report is verified."",""Code has been peer-reviewed and merged."",""Feature is deployed and verified in the staging environment.""]"
"TRN-001","Vendor Catalog & Inventory Management","Onboarding Team Transforms Vendor Spreadsheets via Script","Onboarding Specialist","As a member of the Onboarding Team, I want to use a dedicated script to transform vendor-provided spreadsheets, so that I can efficiently validate, clean, and prepare the data for the system's bulk import functionality.","Accelerates vendor onboarding, improves data integrity by enforcing quality checks before import, and reduces operational costs by automating a manual and error-prone task.","Could Have","5","[""VND-013""]","[{""scenario"":""Successful transformation of a valid spreadsheet"",""given"":""the specialist has a vendor spreadsheet (.CSV or .XLSX) with all required columns"",""when"":""they execute the transformation script with the input file path"",""then"":""the script generates a new CSV file named '[original_filename]_clean.csv' formatted for bulk import, and an empty error report.""},{""scenario"":""Handling of rows with invalid data types"",""given"":""a vendor spreadsheet contains a row where the 'price' is non-numeric"",""when"":""the transformation script is executed"",""then"":""the invalid row is excluded from the clean CSV, and the error CSV contains an entry for the failed row specifying the row number and a clear error message.""}]","[""Create a standalone Node.js/TypeScript CLI script."",""Use libraries like `xlsx` and `fast-csv` for parsing."",""Implement configurable column mapping and validation logic."",""Produce a clean CSV and an error report CSV as output.""]","[""Script is documented with a README.md."",""Unit tests for transformation logic are implemented."",""Code has been peer-reviewed and merged."",""Script is delivered and verified by the Onboarding Team.""]"
"TRN-002","Vendor Catalog & Inventory Management","Onboarding Specialist Validates Migrated Vendor Data","Onboarding Specialist","As an Onboarding Specialist, I want a dedicated interface to review a sample of a newly migrated vendor's data against their source file, so that I can ensure data accuracy before approving the vendor to go live.","Ensures data integrity for new vendors, preventing incorrect orders and customer dissatisfaction. Reduces operational cost of fixing data errors post-launch.","Could Have","5","[""TRN-001""]","[{""scenario"":""Successful validation and approval of a clean data migration"",""given"":""a vendor's catalog has been imported without errors"",""when"":""the specialist navigates to the 'Migration Validation' view for that vendor"",""then"":""the system displays vendor profile details and a sample of at least 20 migrated products.""},{""scenario"":""Approving a valid migration"",""given"":""the specialist has reviewed the migrated data and confirmed its accuracy"",""when"":""they click the 'Approve Migration' button"",""then"":""the system marks the migration batch as 'Approved' and records the action in the admin audit trail.""}]","[""Create API endpoints for the Admin Dashboard to fetch a sample of migrated products."",""Create endpoints to 'approve' or 'reject' a migration batch."",""Ensure all actions are logged in the audit trail."",""Implement RBAC guards to restrict access to Admins/Onboarding Specialists.""]","[""API endpoints are documented in OpenAPI/Swagger."",""Integration tests for the approval/rejection workflow are implemented."",""Code has been peer-reviewed and merged."",""Feature is deployed and verified in the staging environment.""]"