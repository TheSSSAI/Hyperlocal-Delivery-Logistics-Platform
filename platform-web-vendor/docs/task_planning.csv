"task_id","title","description","type","status","priority","assignee","reporter","due_date","estimated_hours","story_points","labels","sprint","sprint_goal","epic","epic_id","project","parent_id","dependencies","skills_required","complexity","risk_level","acceptance_criteria","definition_of_done","created_at","updated_at","sprint_start_date","sprint_end_date","capacity_allocation","collaboration_required","external_dependencies","testing_requirements","deployment_notes","business_value"
"VND-005-T1","Schema: Define VendorProfile Entity","Define and create the TypeORM entity for `VendorProfile`. Include fields for storeName, averageRating, isOnline, address components, and geospatial columns (latitude, longitude). Establish the one-to-one relationship with the external User entity (via userId).","Task","Sprint Backlog","Critical","backend-dev-1@company.com","product.owner@company.com","2024-08-01","4.2","","database,schema,typeorm,backend","Sprint 1","Establish core vendor profile, store controls, and foundational product management (categories and add/edit/delete product).","Vendor Profile & Store Management","EPIC-001","Vendor & Catalog Service","VND-005","","TypeORM,PostgreSQL,PostGIS","Low","Low","`VendorProfile` entity is created with all required fields. A TypeORM migration file is generated and successfully applies the schema. Geospatial column type is correctly defined for PostGIS.","Code reviewed; Migration file generated; Migration successfully runs in CI.","2024-07-29T09:00:00Z","2024-07-29T09:00:00Z","2024-07-29","2024-08-09","100%","None","PostGIS extension enabled on RDS instance.","Migration script validation.","Database migration must be applied before application deployment.","Foundation for all vendor-related data."
"VND-008-T1","Schema: Define ProductCategory Entity","Define and create the TypeORM entity for `ProductCategory`. It will have a many-to-one relationship with `VendorProfile` and a one-to-many relationship with `Product`. Include a `name` column with a unique constraint scoped to the vendor.","Task","Sprint Backlog","Critical","backend-dev-2@company.com","product.owner@company.com","2024-08-01","4.2","","database,schema,typeorm,backend","Sprint 1","Establish core vendor profile, store controls, and foundational product management (categories and add/edit/delete product).","Product & Catalog Management","EPIC-002","Vendor & Catalog Service","VND-008","VND-005-T1","TypeORM,PostgreSQL","Low","Low","`ProductCategory` entity is created with correct relationships. A TypeORM migration is generated and runs successfully.","Code reviewed; Migration file generated; Migration successfully runs in CI.","2024-07-29T09:00:00Z","2024-07-29T09:00:00Z","2024-07-29","2024-08-09","100%","None","","Migration script validation.","Database migration must be applied before application deployment.","Enables product organization for vendors."
"VND-005-T2","Backend: Implement Profile GET and PATCH Endpoints","Create a NestJS Vendor module, controller, and service. Implement `GET /vendors/me` and `PATCH /vendors/me`. Secure endpoints with a JWT guard to ensure a vendor can only access their own profile. Use DTOs with class-validator for input validation.","Task","Sprint Backlog","Critical","backend-dev-1@company.com","product.owner@company.com","2024-08-02","8.3","","backend,api,nestjs","Sprint 1","Establish core vendor profile, store controls, and foundational product management (categories and add/edit/delete product).","Vendor Profile & Store Management","EPIC-001","Vendor & Catalog Service","VND-005","VND-005-T1","NestJS,TypeScript,REST API","Medium","Low","`GET /vendors/me` returns the authenticated vendor's profile. `PATCH /vendors/me` updates the profile with valid data. Requests for other vendors' profiles are rejected with 403 Forbidden. Invalid data in PATCH request is rejected with 400 Bad Request.","Code reviewed; Unit & Integration tests passing; OpenAPI spec generated.","2024-07-29T09:00:00Z","2024-07-29T09:00:00Z","2024-07-29","2024-08-09","100%","QA Engineer for testing.","A standard JWT authentication guard is available.","Unit and Integration tests required.","Endpoint to be documented in OpenAPI spec.","Allows vendors to manage their core business information."
"VND-008-T2","Backend: Implement Category CRUD Endpoints","Create a `CategoryController` with `POST`, `GET`, `PATCH`, and `DELETE` endpoints. All operations must be authorized to ensure a vendor can only manage their own categories.","Task","Sprint Backlog","Critical","backend-dev-2@company.com","product.owner@company.com","2024-08-05","8.3","","backend,api,nestjs,crud","Sprint 1","Establish core vendor profile, store controls, and foundational product management (categories and add/edit/delete product).","Product & Catalog Management","EPIC-002","Vendor & Catalog Service","VND-008","VND-008-T1","NestJS,TypeScript","Medium","Low","Vendor can perform all CRUD operations on their own categories. API calls are rejected if the vendor does not own the category.","Code reviewed; Unit & Integration tests passing; OpenAPI spec generated.","2024-07-29T09:00:00Z","2024-07-29T09:00:00Z","2024-07-29","2024-08-09","100%","QA Engineer for testing.","","Unit and Integration tests required.","Endpoints to be documented in OpenAPI spec.","Core functionality for vendors to organize their products."
"VND-009-T1","Schema: Define Product Entity","Define and create the TypeORM entity for `Product`. Include columns for name, description, price, stock quantity, image URL, and relationships to `VendorProfile` and `ProductCategory`. Implement soft-delete via `@DeleteDateColumn`.","Task","Sprint Backlog","Critical","backend-dev-1@company.com","product.owner@company.com","2024-08-02","5.2","","database,schema,typeorm,backend","Sprint 1","Establish core vendor profile, store controls, and foundational product management (categories and add/edit/delete product).","Product & Catalog Management","EPIC-002","Vendor & Catalog Service","VND-009","VND-005-T1,VND-008-T1","TypeORM,PostgreSQL","Medium","Low","`Product` entity is created with correct relationships and columns. Soft-delete is enabled on the entity. A TypeORM migration is generated and runs successfully.","Code reviewed; Migration file generated; Migration successfully runs in CI.","2024-07-29T09:00:00Z","2024-07-29T09:00:00Z","2024-07-29","2024-08-09","100%","None","","Migration script validation.","Database migration must be applied before application deployment.","Foundation for the core marketplace offering: products."
"VND-005-T3","Integration: Implement Mapbox Geocoding on Address Change","Integrate the Mapbox Geocoding API. When a vendor updates their address via `PATCH /vendors/me`, call the Mapbox API to convert the address string to latitude/longitude coordinates. Store these coordinates in the database.","Task","Sprint Backlog","High","backend-dev-1@company.com","product.owner@company.com","2024-08-05","6.3","","backend,api,integration,mapbox","Sprint 1","Establish core vendor profile, store controls, and foundational product management (categories and add/edit/delete product).","Vendor Profile & Store Management","EPIC-001","Vendor & Catalog Service","VND-005","VND-005-T2","NestJS,API Integration,Error Handling","Medium","Medium","Successfully updating an address also updates the `latitude` and `longitude` fields. If the Mapbox API call fails, the entire profile update is rolled back. API key for Mapbox is securely retrieved from AWS Secrets Manager.","Code reviewed; Integration tests passing; Circuit breaker implemented.","2024-07-29T09:00:00Z","2024-07-29T09:00:00Z","2024-07-29","2024-08-09","100%","DevOps for secrets manager access.","Mapbox API key and service availability.","Integration tests mocking Mapbox API.","Requires Mapbox API key in production environment secrets.","Ensures accurate location data for logistics and customer-facing maps."
"VND-009-T2","Backend: Implement Product Creation Endpoint","Create the `POST /products` endpoint. It should accept product metadata. It will NOT handle the file upload directly. Instead, it will generate a pre-signed S3 URL for the client to upload the image.","Task","Sprint Backlog","Critical","backend-dev-2@company.com","product.owner@company.com","2024-08-06","8.3","","backend,api,nestjs,s3","Sprint 1","Establish core vendor profile, store controls, and foundational product management (categories and add/edit/delete product).","Product & Catalog Management","EPIC-002","Vendor & Catalog Service","VND-009","VND-009-T1","NestJS,TypeScript,AWS S3","Medium","Medium","The endpoint returns a pre-signed URL and a `productId` for the new product record. Input data (price, stock) is validated. The product is initially saved with a temporary image URL.","Code reviewed; Unit & Integration tests passing; OpenAPI spec generated.","2024-07-29T09:00:00Z","2024-07-29T09:00:00Z","2024-07-29","2024-08-09","100%","DevOps for S3 bucket setup.","AWS S3 service.","Integration tests for pre-signed URL generation.","Requires S3 bucket and IAM permissions.","Core functionality for vendors to add products to their catalog."
"VND-010-T1","Backend: Implement Product Update Endpoint","Create a `PATCH /products/{id}` endpoint. This endpoint will accept a DTO with optional fields for all editable product properties. It must enforce ownership.","Task","Sprint Backlog","Critical","backend-dev-1@company.com","product.owner@company.com","2024-08-07","8.2","","backend,api,nestjs","Sprint 1","Establish core vendor profile, store controls, and foundational product management (categories and add/edit/delete product).","Product & Catalog Management","EPIC-002","Vendor & Catalog Service","VND-010","VND-009-T1","NestJS,TypeScript","Medium","Low","Endpoint successfully updates one or more fields of a product. A vendor cannot update a product they do not own. Input validation is applied to all fields.","Code reviewed; Unit & Integration tests passing; OpenAPI spec generated.","2024-07-29T09:00:00Z","2024-07-29T09:00:00Z","2024-07-29","2024-08-09","100%","QA Engineer for testing.","","Unit and Integration tests required.","Endpoint to be documented in OpenAPI spec.","Allows vendors to keep their product catalog accurate."
"VND-011-T1","Analysis: Design Asynchronous Product Deletion Flow","Design the asynchronous flow for product deletion to mitigate RISK-001. This involves defining the 'PENDING_DELETION' status, the 'ProductDeletionRequested' event schema, and the confirmation workflow from the Order Management service.","Task","Sprint Backlog","High","backend-dev-1@company.com","product.owner@company.com","2024-08-07","4.2","","analysis,architecture,backend","Sprint 1","Establish core vendor profile, store controls, and foundational product management (categories and add/edit/delete product).","Product & Catalog Management","EPIC-002","Vendor & Catalog Service","VND-011","","System Design,Microservices Architecture","High","High","A sequence diagram for the asynchronous deletion process is created. The event schema is defined and documented. The state transitions for the Product entity are defined.","Architectural review completed and design approved.","2024-07-29T09:00:00Z","2024-07-29T09:00:00Z","2024-07-29","2024-08-09","100%","Backend Lead, Order Management Service Team.","Order Management service API contract.","Design review.","No deployment, this is a design task.","Mitigates a high-impact architectural risk (cascading failures)."
"VND-011-T2","Backend: Implement Asynchronous Product Deletion Endpoint","Implement the `DELETE /products/{id}` endpoint. Instead of a hard delete, this endpoint will update the product's status to 'PENDING_DELETION' and publish a 'ProductDeletionRequested' event using the Transactional Outbox pattern.","Task","Sprint Backlog","High","backend-dev-2@company.com","product.owner@company.com","2024-08-08","8.3","","backend,api,nestjs,async","Sprint 1","Establish core vendor profile, store controls, and foundational product management (categories and add/edit/delete product).","Product & Catalog Management","EPIC-002","Vendor & Catalog Service","VND-011","VND-011-T1,VND-007-T2","NestJS,TypeScript,TypeORM","High","Medium","The endpoint updates the product status to 'PENDING_DELETION'. A 'ProductDeletionRequested' event is written to the outbox table atomically. The endpoint returns an immediate 202 Accepted response.","Code reviewed; Integration tests passing.","2024-07-29T09:00:00Z","2024-07-29T09:00:00Z","2024-07-29","2024-08-09","100%","None","","Integration tests for atomicity and event publication.","","Allows vendors to remove products without risking system stability."
"VND-005-T4","QA: Create Unit and Integration Tests for Profile Management","Write comprehensive unit tests for the VendorService, mocking dependencies. Write integration tests for the VendorController to validate endpoints, DTO validation, and authorization.","Task","Sprint Backlog","Medium","qa-engineer-1@company.com","product.owner@company.com","2024-08-06","8","","qa,testing,jest","Sprint 1","Establish core vendor profile, store controls, and foundational product management (categories and add/edit/delete product).","Vendor Profile & Store Management","EPIC-001","Vendor & Catalog Service","VND-005","VND-005-T2,VND-005-T3","Jest,TypeScript,NestJS","Medium","Low","Code coverage for `vendor.service.ts` and `vendor.controller.ts` is >= 80%. Tests cover happy paths, validation errors, and authorization failures. Integration tests for Mapbox geocoding logic are included.","All tests passing in CI pipeline.","2024-07-29T09:00:00Z","2024-07-29T09:00:00Z","2024-07-29","2024-08-09","100%","Backend developers.","","Test framework (Jest) is already configured.","","Ensures quality and reliability of the profile management feature."
"VND-008-T5","QA: Write Tests for Category Management Logic","Write comprehensive unit and integration tests for all category management business logic, including ownership checks, duplicate name validation, and deletion constraints.","Task","Sprint Backlog","Medium","qa-engineer-1@company.com","product.owner@company.com","2024-08-07","8","","qa,testing,jest","Sprint 1","Establish core vendor profile, store controls, and foundational product management (categories and add/edit/delete product).","Product & Catalog Management","EPIC-002","Vendor & Catalog Service","VND-008","VND-008-T2,VND-008-T3,VND-008-T4","Jest,TypeScript","Medium","Low","Code coverage for the category module is >= 80%. All business rules are covered by specific test cases.","All tests passing in CI pipeline.","2024-07-29T09:00:00Z","2024-07-29T09:00:00Z","2024-07-29","2024-08-09","100%","Backend developers.","","","","Ensures quality and reliability of the category management feature."
"VND-009-T4","QA: Write Tests for Product Creation Flow","Write unit tests for the product service, including validation logic. Write integration tests for the two-step product creation endpoints, mocking the S3 pre-signed URL generation.","Task","Sprint Backlog","Medium","qa-engineer-1@company.com","product.owner@company.com","2024-08-08","10.3","","qa,testing,jest","Sprint 1","Establish core vendor profile, store controls, and foundational product management (categories and add/edit/delete product).","Product & Catalog Management","EPIC-002","Vendor & Catalog Service","VND-009","VND-009-T2,VND-009-T3","Jest,TypeScript","Medium","Low","Code coverage for the product creation logic is >= 80%. Tests cover validation errors for price and stock. Tests confirm ownership authorization.","All tests passing in CI pipeline.","2024-07-29T09:00:00Z","2024-07-29T09:00:00Z","2024-07-29","2024-08-09","100%","Backend developers.","","","","Ensures quality and reliability of the product creation feature."
"VND-006-T1","Schema: Define VendorBusinessHour Entity","Define and create the TypeORM entity for `VendorBusinessHour`. This entity will have a many-to-one relationship with `VendorProfile` and include columns for `dayOfWeek`, `openTime`, `closeTime`, and `isClosed`.","Task","Sprint Backlog","Critical","backend-dev-1@company.com","product.owner@company.com","2024-08-12","3.2","","database,schema,typeorm,backend","Sprint 2","Implement real-time store operational controls (Hours, Availability), establish the critical Transactional Outbox pattern, and build the foundation for vendor compliance.","Vendor Profile & Store Management","EPIC-001","Vendor & Catalog Service","VND-006","VND-005-T1","TypeORM,PostgreSQL","Low","Low","`VendorBusinessHour` entity is created with all required fields. A TypeORM migration file is generated and successfully applies the schema.","Code reviewed; Migration file generated; Migration successfully runs in CI.","2024-07-29T09:00:00Z","2024-07-29T09:00:00Z","2024-08-12","2024-08-23","100%","None","","Migration script validation.","Database migration must be applied before application deployment.","Enables vendors to define their operating hours."
"VND-007-T1","Backend: Implement Availability Toggle Endpoint","Create a `PATCH /vendors/me/availability` endpoint that accepts 'Online' or 'Offline'. This updates the `isOnline` flag in the `VendorProfile` record.","Task","Sprint Backlog","Critical","backend-dev-2@company.com","product.owner@company.com","2024-08-13","4.2","","backend,api,nestjs","Sprint 2","Implement real-time store operational controls (Hours, Availability), establish the critical Transactional Outbox pattern, and build the foundation for vendor compliance.","Vendor Profile & Store Management","EPIC-001","Vendor & Catalog Service","VND-007","VND-005-T1","NestJS,TypeScript","Low","Low","Endpoint successfully updates the `isOnline` flag in the database. Endpoint is secured and authorized for the vendor role.","Code reviewed; Integration tests passing.","2024-07-29T09:00:00Z","2024-07-29T09:00:00Z","2024-08-12","2024-08-23","100%","None","","Integration tests.","","Allows vendors to manually control their store's live status."
"VND-007-T2","Eventing: Implement Transactional Outbox for Status Change","Implement the Transactional Outbox pattern (as identified in RISK-002) for the availability update. On `PATCH /vendors/me/availability`, write the `VendorStatusChanged` event to an `outbox` table within the same database transaction as the `VendorProfile` update.","Task","Sprint Backlog","High","backend-dev-1@company.com","product.owner@company.com","2024-08-15","10.7","","backend,architecture,resilience,eventing","Sprint 2","Implement real-time store operational controls (Hours, Availability), establish the critical Transactional Outbox pattern, and build the foundation for vendor compliance.","Vendor Profile & Store Management","EPIC-001","Vendor & Catalog Service","VND-007","VND-007-T1","NestJS,PostgreSQL,Distributed Systems Patterns","High","High","The status update and outbox insert are atomic. If the status update fails, the outbox record is not created. A separate worker process successfully relays the event from the outbox to SNS.","Code reviewed; Integration tests verifying atomicity and event relay are passing.","2024-07-29T09:00:00Z","2024-07-29T09:00:00Z","2024-08-12","2024-08-23","100%","DevOps for worker process infrastructure.","","Complex integration testing is required.","Requires deployment of a new worker process.","Ensures reliable propagation of vendor status changes across the microservices ecosystem."
"VND-027-T1","Schema: Define VendorLicense Entity","Define and create a TypeORM entity `VendorLicense` with a many-to-one relationship to `VendorProfile`. Include fields for `licenseNumber`, `expiryDate`, and `licenseType`.","Task","Sprint Backlog","Critical","backend-dev-2@company.com","product.owner@company.com","2024-08-14","4.2","","database,schema,typeorm,backend,compliance","Sprint 2","Implement real-time store operational controls (Hours, Availability), establish the critical Transactional Outbox pattern, and build the foundation for vendor compliance.","Vendor Compliance Management","EPIC-003","Vendor & Catalog Service","VND-027","VND-005-T1","TypeORM,PostgreSQL","Low","Low","`VendorLicense` entity is created with correct fields and relationships. A TypeORM migration is generated and runs successfully.","Code reviewed; Migration file generated; Migration successfully runs in CI.","2024-07-29T09:00:00Z","2024-07-29T09:00:00Z","2024-08-12","2024-08-23","100%","None","","Migration script validation.","Database migration must be applied before application deployment.","Foundation for all compliance-related features."
"VND-028-T1","Infra: Set up Scheduled Job Infrastructure","Using Terraform, provision an AWS EventBridge rule to trigger a Lambda function on a daily schedule (e.g., at midnight UTC).","Task","Sprint Backlog","High","devops-1@company.com","product.owner@company.com","2024-08-16","6","","devops,iac,terraform,aws,lambda","Sprint 2","Implement real-time store operational controls (Hours, Availability), establish the critical Transactional Outbox pattern, and build the foundation for vendor compliance.","Vendor Compliance Management","EPIC-003","Vendor & Catalog Service","VND-028","","Terraform,AWS IAM,AWS Lambda","Medium","Low","EventBridge rule is created and configured with the correct schedule. A Lambda function is provisioned with the necessary permissions to be invoked by EventBridge and to query the database.","Terraform apply is successful; resources are visible in AWS console.","2024-07-29T09:00:00Z","2024-07-29T09:00:00Z","2024-08-12","2024-08-23","100%","Backend team for Lambda permissions.","","Manual trigger of the rule in a test environment.","Terraform scripts to be run as part of the CI/CD pipeline.","Enables automated, recurring compliance checks."
"VND-013-T1","Analysis: Design Atomic CSV Import Strategy","Design the strategy for the bulk import process as identified in RISK-004. The design must enforce atomicity at the file level and include a 'preview' step. Define the database transaction management for this flow.","Task","Sprint Backlog","High","backend-dev-1@company.com","product.owner@company.com","2024-08-26","6.3","","analysis,architecture,backend,database","Sprint 3","Deliver bulk catalog management (Import/Export with error reporting) and complete the automated compliance workflow (Suspension).","Product & Catalog Management","EPIC-002","Vendor & Catalog Service","VND-013","","System Design,Database Architecture","High","High","A design document outlining the two-phase (validate/preview, commit) import process is created. The transaction strategy is defined to ensure all-or-nothing commits for a file.","Architectural review completed and design approved.","2024-07-29T09:00:00Z","2024-07-29T09:00:00Z","2024-08-26","2024-09-06","100%","Backend Lead.","","Design review.","No deployment, this is a design task.","Mitigates the high-risk of data corruption from bulk operations."
"VND-029-T1","Backend: Enhance Job to Suspend Vendors","Modify the daily license check job (from VND-028). Add logic to query for licenses with an `expiryDate` in the past. For each found, call the Vendor service to update the associated vendor's status to 'suspended_license_expired'.","Task","Sprint Backlog","Critical","backend-dev-2@company.com","product.owner@company.com","2024-08-28","6.3","","backend,lambda,compliance,automation","Sprint 3","Deliver bulk catalog management (Import/Export with error reporting) and complete the automated compliance workflow (Suspension).","Vendor Compliance Management","EPIC-003","Vendor & Catalog Service","VND-029","VND-028-T2","Node.js,SQL","Medium","High","Job correctly identifies vendors with expired licenses. The vendor's status is updated in the database. A `VendorSuspended` event is published to SNS.","Code reviewed; Integration tests passing.","2024-07-29T09:00:00Z","2024-07-29T09:00:00Z","2024-08-26","2024-09-06","100%","None","","Integration tests.","Lambda function update.","Automates the enforcement of platform compliance rules."
"VND-029-T3","Integration: Update Order Service to Check Vendor Status","Modify the Order Management service's logic. Before assigning a new order to a vendor, it must first check the vendor's status. If the status is 'suspended_license_expired' (or any other non-active state), the vendor must be excluded from consideration.","Task","Sprint Backlog","Critical","backend-dev-1@company.com","product.owner@company.com","2024-08-30","10.3","","backend,integration,nestjs","Sprint 3","Deliver bulk catalog management (Import/Export with error reporting) and complete the automated compliance workflow (Suspension).","Vendor Compliance Management","EPIC-003","Vendor & Catalog Service","VND-029","VND-029-T1","NestJS,TypeScript","High","Medium","A suspended vendor is not assigned any new orders. The logic correctly filters out vendors with any non-active status.","Pull request to Order Management service is reviewed and merged. E2E test passes.","2024-07-29T09:00:00Z","2024-07-29T09:00:00Z","2024-08-26","2024-09-06","100%","Order Management Service Team.","Order Management service repository access.","E2E testing.","Requires coordinated deployment with the Order Management service.","Enforces the business impact of vendor suspension, protecting customers."
"VND-029-T4","QA: Write Tests for Suspension Logic and Enforcement","Write integration tests for the suspension job to confirm status updates and event publishing. Write an E2E test that attempts to place an order from a suspended vendor and asserts that it fails or is assigned elsewhere.","Task","Sprint Backlog","High","qa-engineer-1@company.com","product.owner@company.com","2024-09-04","10.3","","qa,testing,e2e,cypress","Sprint 3","Deliver bulk catalog management (Import/Export with error reporting) and complete the automated compliance workflow (Suspension).","Vendor Compliance Management","EPIC-003","Vendor & Catalog Service","VND-029","VND-029-T1,VND-029-T3","Jest,Cypress,TypeScript","High","Low","Integration test verifies a vendor with a past-date license is suspended. E2E test confirms a customer cannot order from a suspended vendor.","All tests passing in CI pipeline.","2024-07-29T09:00:00Z","2024-07-29T09:00:00Z","2024-08-26","2024-09-06","100%","Backend developers.","","","","Ensures the automated compliance feature works correctly and reliably."