"story_id","epic","title","user_role","description","business_value","priority","story_points","dependencies","acceptance_criteria","technical_tasks","definition_of_done"
"VND-005","Vendor Profile & Store Management","Vendor Manages Store Profile","Vendor (Store Owner/Manager)","As a registered vendor, I want to view and edit my store's profile information, including its name, address, and contact details, so that I can ensure customers, riders, and the platform have the most accurate and up-to-date information for my business.","Ensures data accuracy for logistics (rider navigation, delivery radius calculation) and customer experience (correct store info, contact details), which builds trust and reduces operational errors.","Must Have","5","[""VND-004"",""ADM-013""]","[{""scenario"":""Vendor successfully views and updates their store profile"",""given"":""a logged-in vendor is on the 'Store Profile' page of the vendor dashboard"",""when"":""they modify the store name, phone number, and address fields with valid information and click the 'Save Changes' button"",""then"":""the system validates the inputs, saves the updated information to the database, displays a success message, and the page refreshes to show the new details.""},{""scenario"":""Address change triggers re-geocoding"",""given"":""a logged-in vendor is on the 'Store Profile' page"",""when"":""they update the address field with a new, valid address and click 'Save Changes'"",""then"":""the system must make a call to the mapping service (Mapbox) to get the latitude and longitude for the new address and update these coordinates in the vendor's store record.""},{""scenario"":""Vendor attempts to save the profile with invalid data"",""given"":""a logged-in vendor is on the 'Store Profile' page"",""when"":""they clear the 'Store Name' field or enter an invalidly formatted phone number and click 'Save Changes'"",""then"":""the system must prevent the save operation and display clear, inline validation error messages.""},{""scenario"":""Geocoding API fails during address update"",""given"":""a logged-in vendor is on the 'Store Profile' page"",""when"":""they update their address and the external mapping service API call fails or returns an error"",""then"":""the system must not save any profile changes and must display a user-friendly error message.""}]","[""Define and create TypeORM entity for `VendorProfile` with fields for store name, address, latitude, longitude, and contact details."",""Implement NestJS controller with endpoints for `GET /vendors/me` and `PATCH /vendors/me`."",""Secure endpoints with a JWT Guard to ensure only the authenticated vendor can modify their own profile."",""Use DTOs with `class-validator` for input validation on the PATCH endpoint."",""Integrate with the Mapbox Geocoding API to retrieve coordinates when the address is updated."",""Implement error handling and circuit breaker patterns for the Mapbox API dependency.""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by at least one peer"",""Unit and integration tests implemented with >= 80% coverage and all passing"",""E2E tests for the happy path and key error conditions are implemented and passing"",""API endpoint is documented in the OpenAPI specification"",""Security requirements (authentication, authorization, input sanitization) are validated"",""Story deployed and verified in the staging environment""]"
"VND-006","Vendor Profile & Store Management","Vendor Sets and Manages Daily Business Hours","A registered and approved Vendor user responsible for managing their store's operational settings via the web dashboard.","As a vendor, I want to define and manage my store's daily operating hours, including the ability to set multiple time slots per day or mark days as closed, so that the platform automatically controls my store's availability and prevents customers from placing orders outside of my business hours.","Automates store availability, preventing unfulfillable orders placed after hours. This improves operational efficiency for vendors, manages customer expectations, and enhances the reliability and trustworthiness of the platform.","Must Have","5","[""VND-005"",""VND-007""]","[{""scenario"":""Vendor sets standard business hours for a single day"",""given"":""The vendor is logged into the vendor dashboard and is on the 'Business Hours' settings page"",""when"":""the vendor sets Monday's hours to 9:00 AM - 5:00 PM and clicks 'Save Changes'"",""then"":""the system successfully saves the hours for Monday and a success notification is displayed.""},{""scenario"":""Vendor sets multiple time slots for a single day"",""given"":""The vendor is on the 'Business Hours' settings page"",""when"":""the vendor sets Tuesday's hours to 10:00 AM - 2:00 PM, adds a second time slot, sets it to 5:00 PM - 9:00 PM, and clicks 'Save Changes'"",""then"":""the system saves both time slots for Tuesday, and the store is shown as open only during these two periods.""},{""scenario"":""System prevents saving invalid time ranges"",""given"":""The vendor is on the 'Business Hours' settings page"",""when"":""the vendor attempts to set Wednesday's hours to 7:00 PM - 11:00 AM"",""then"":""the system prevents saving and displays an inline validation error message 'Closing time must be after opening time'.""},{""scenario"":""System prevents saving overlapping time slots"",""given"":""The vendor has set a time slot for Thursday from 9:00 AM to 5:00 PM"",""when"":""the vendor adds a second time slot and attempts to set it to 4:00 PM - 8:00 PM"",""then"":""the system prevents saving and displays an inline validation error message 'Time slots cannot overlap'.""}]","[""Define and create TypeORM entity for `VendorBusinessHour` with a many-to-one relationship to `VendorProfile`."",""Create API endpoints `GET /vendors/me/hours` and `PUT /vendors/me/hours`."",""Implement complex validation logic in a DTO or service to ensure time slots do not overlap and have valid start/end times."",""Write unit tests covering all validation cases for business hours.""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by at least one peer"",""Unit and integration test coverage meets the 80% project standard"",""E2E tests covering the vendor setting hours and the customer seeing the correct status are implemented and passing"",""API performance meets latency requirements under simulated load"",""Story deployed and verified in the staging environment by QA""]"
"VND-007","Vendor Profile & Store Management","Vendor Toggles Store Availability","A registered and approved Vendor user responsible for managing their store's daily operations on the platform.","As a Vendor, I want a master switch to immediately toggle my store's availability between 'Online' and 'Offline' so that I can instantly stop or resume accepting new orders to manage unexpected events like running out of stock, staff shortages, or emergencies.","Provides vendors with direct control over their operational status, preventing orders during unforeseen closures. This reduces order cancellations and improves customer satisfaction by avoiding unfulfillable orders.","Must Have","3","[""VND-004"",""VND-005"",""VND-006""]","[{""scenario"":""Vendor successfully takes their store offline"",""given"":""a vendor is logged into the vendor dashboard and their store status is 'Online'"",""when"":""the vendor activates the 'Go Offline' master switch and confirms the action"",""then"":""the system updates the store's availability status to 'Offline', the UI reflects the change, and the store is no longer available for new orders in the customer app.""},{""scenario"":""Vendor successfully brings their store back online"",""given"":""a vendor is logged into the vendor dashboard and their store status is 'Offline'"",""when"":""the vendor activates the 'Go Online' master switch"",""then"":""the system updates the store's availability status to 'Online', the UI reflects the change, and the store becomes available for new orders (subject to business hours).""}]","[""Create a `PATCH /vendors/me/availability` endpoint that accepts a status of 'Online' or 'Offline'."",""Implement service logic to update the `isOnline` flag on the `VendorProfile` record."",""Publish a `VendorStatusChanged` event to an SNS topic upon a successful update."",""Write an integration test to verify the event is published correctly to SNS.""]","[""All acceptance criteria are validated and passing in the staging environment."",""Code has been peer-reviewed and merged into the main branch."",""E2E tests for the primary scenarios are automated and passing."",""The UI has been reviewed by a UX designer and approved."",""API documentation (OpenAPI) for the new endpoint is complete."",""The feature has been successfully deployed and verified in the staging environment.""]"
"VND-008","Product & Catalog Management","Vendor Manages Product Categories","Vendor user role, accessing the platform via the Vendor Web Dashboard.","As a Vendor, I want to create, view, edit, and delete product categories within my store's dashboard, so that I can effectively organize my product catalog, which helps customers easily discover and browse my offerings.","Improves catalog organization for vendors and enhances product discovery for customers, potentially leading to increased sales. Provides structured data for platform analytics.","Must Have","3","[""VND-004"",""VND-005""]","[{""scenario"":""Vendor successfully creates a new product category"",""given"":""The vendor is logged into the Vendor Dashboard and is on the 'Categories' management page"",""when"":""The vendor enters a unique name (e.g., 'Appetizers') and clicks 'Save'"",""then"":""A success notification is displayed, and the new 'Appetizers' category appears in the list.""},{""scenario"":""Vendor attempts to create a category with a duplicate name"",""given"":""a category named 'Beverages' already exists"",""when"":""The vendor attempts to create a new category with the name 'beverages' (case-insensitive)"",""then"":""The form displays a validation error message, such as 'A category with this name already exists.'""},{""scenario"":""Vendor attempts to delete a category that contains products"",""given"":""a category exists that has one or more products associated with it"",""when"":""The vendor clicks the 'Delete' control for that category and confirms"",""then"":""An error notification is displayed, such as 'Cannot delete category as it contains products.' and the category is not deleted.""}]","[""Define and create TypeORM entities for `ProductCategory` with a many-to-one relationship to `VendorProfile`."",""Create a `CategoryController` with endpoints for `POST`, `GET`, `PATCH`, and `DELETE` on `/categories`."",""Ensure all endpoints are scoped to the authenticated vendor using a Guard."",""Implement validation logic to prevent deletion of categories with associated products."",""Implement validation for unique category names per vendor (case-insensitive).""]","[""All acceptance criteria validated and passing"",""Backend code reviewed, approved, and merged with >80% unit test coverage"",""E2E tests for the full CRUD lifecycle are created and passing"",""API endpoints are documented using OpenAPI specification"",""Security checks for authorization are implemented and tested"",""Story deployed and verified in the staging environment""]"
"VND-009","Product & Catalog Management","Vendor Adds a New Product to Catalog","Vendor (Store Owner/Manager)","As a registered and approved Vendor, I want to access a form to add a new product to my catalog by providing its name, description, price, an image, and its current stock quantity, so that I can make my goods available for customers to discover and purchase on the platform.","Enables vendors to populate their digital storefront, which is the fundamental requirement for generating sales. This directly contributes to the platform's marketplace inventory and revenue generation through commissions.","Must Have","5","[""VND-004"",""VND-008""]","[{""scenario"":""Successful Product Creation"",""given"":""The vendor is logged into their dashboard and navigates to the 'Add Product' page"",""when"":""The vendor fills in all required fields with valid data, uploads a valid image, and clicks 'Save Product'"",""then"":""The system successfully creates the new product, stores the image, displays a success notification, and the new item is visible in their product list.""},{""scenario"":""Attempt to Save with Invalid Data Types"",""given"":""The vendor is on the 'Add Product' page"",""when"":""The vendor enters non-numeric text in the 'Price' field or a non-integer in the 'Stock Quantity' field and attempts to save"",""then"":""The form submission is blocked, and an inline validation error message appears.""}]","[""Define and create TypeORM entity for `Product` with relationships to `ProductCategory` and `VendorProfile`."",""Implement a `ProductController` with a `POST /products` endpoint."",""Handle multipart/form-data for image uploads using NestJS `FileInterceptor`."",""Integrate with AWS SDK to generate a pre-signed S3 URL for the client to upload the image to."",""Implement robust input validation for price (non-negative) and stock (non-negative integer).""]","[""All acceptance criteria are met and have been manually verified."",""Unit and integration tests are written and achieve >= 80% code coverage."",""End-to-end (E2E) tests for the happy path are passing."",""Code has been peer-reviewed and merged."",""API documentation (OpenAPI) for the new endpoint is created/updated."",""Security checks (input sanitization, authorization) have been implemented and verified."",""The feature is deployed to the staging environment and passes QA validation.""]"
"VND-010","Product & Catalog Management","Vendor Edits an Existing Product in their Catalog","A registered and approved Vendor using the vendor-facing web dashboard.","As a vendor, I want to edit the details of an existing product in my catalog, including its name, description, price, image, category, and stock quantity, so that I can keep my product information accurate, respond to market changes, and manage my inventory effectively.","Enables vendors to maintain an accurate and up-to-date product catalog, which is critical for customer trust, reducing order errors, and effective sales management.","Must Have","5","[""VND-009"",""VND-008"",""VND-004""]","[{""scenario"":""Successfully edit all product fields"",""given"":""A vendor is logged into the vendor dashboard and is viewing their product list"",""when"":""The vendor selects a product to edit, modifies its details, and clicks 'Save'"",""then"":""The system validates and updates the product details in the database and displays a 'Product updated successfully' notification.""},{""scenario"":""Attempt to save with invalid data"",""given"":""A vendor is on the product edit page"",""when"":""The vendor enters a negative value for the price and clicks 'Save'"",""then"":""The form submission is prevented, and a field-specific validation error message is displayed.""}]","[""Implement a `PATCH /products/{id}` endpoint in the `ProductController`."",""Handle optional image replacement via multipart/form-data."",""Ensure the service logic correctly fetches the product, applies changes, and saves it."",""Enforce authorization to ensure a vendor can only edit their own products.""]","[""All acceptance criteria validated and passing in a staging environment."",""Code has been peer-reviewed and merged."",""Automated E2E tests for the happy path and key error conditions are implemented and passing."",""Security review confirms authorization logic is correct."",""API documentation (OpenAPI) for the endpoint has been updated."",""The feature is successfully deployed and verified in the staging environment.""]"
"VND-011","Product & Catalog Management","Vendor Deletes a Product from Catalog","Vendor user responsible for managing their store's product catalog.","As a Vendor, I want to permanently remove a product from my catalog so that I can maintain an accurate and up-to-date list of items I offer for sale.","Ensures catalog accuracy, which improves the customer experience by preventing orders for discontinued items. Simplifies catalog management for vendors and reduces potential order fulfillment errors.","Should Have","5","[""VND-009"",""VND-004"",""REQ-FUN-017""]","[{""scenario"":""Successful Deletion of a Product"",""given"":""a vendor is logged into their dashboard and is viewing their product list"",""when"":""the vendor clicks the 'Delete' action for a product that is not part of any active orders, and confirms the deletion"",""then"":""the system shall perform a soft delete on the product record, and the product shall no longer be visible in the customer-facing application.""},{""scenario"":""Attempt to Delete a Product in an Active Order"",""given"":""a product is part of an order that is not yet 'Delivered' or 'Cancelled'"",""when"":""the vendor attempts to delete that product"",""then"":""the system shall prevent the deletion and display an error message: 'This product cannot be deleted as it is part of an active order.'""}]","[""Implement a `DELETE /products/{id}` endpoint in the `ProductController`."",""Implement soft-delete logic using TypeORM's `@DeleteDateColumn`."",""Before deleting, the service must call the Order Management service to check if the product ID exists in any active orders."",""Ensure the authorization guard prevents a vendor from deleting another vendor's products.""]","[""All acceptance criteria validated and passing."",""Code has been peer-reviewed and merged."",""E2E tests for the happy path and key error conditions are implemented and passing."",""Integration test with the Order Management service is implemented and passing."",""API documentation (OpenAPI) for the endpoint is updated."",""The feature has been successfully deployed and verified in the staging environment.""]"
"VND-012","Vendor Profile & Store Management","Vendor Configures 'Limited Stock' Threshold","Vendor (Store Owner/Manager)","As a Vendor managing my store, I want to set a store-wide numerical threshold for my inventory, so that any product with a stock quantity at or below this threshold is automatically displayed to customers with a 'Limited Stock' status, creating a sense of urgency and encouraging faster purchases.","Increases potential for sales conversion by creating customer urgency. Enhances vendor satisfaction by providing more granular control over product presentation and inventory display.","Could Have","3","[""VND-005"",""VND-009"",""CUS-014""]","[{""scenario"":""Vendor successfully sets a valid 'Limited Stock' threshold"",""given"":""a logged-in vendor is on the 'Store Settings' page of their dashboard"",""when"":""the vendor enters a valid, positive whole number (e.g., 5) into the 'Limited Stock Threshold' input field and clicks 'Save'"",""then"":""the system persists the new threshold value for the vendor's store and displays a success confirmation message.""},{""scenario"":""Product status correctly displays as 'Limited Stock' on the customer app"",""given"":""a vendor has set their 'Limited Stock Threshold' to 10 and they have a product with a stock quantity of 7"",""when"":""a customer views that product's listing or details page"",""then"":""the system displays the product's stock status as 'Limited Stock'.""}]","[""Extend the `VendorProfile` entity with a `limitedStockThreshold` column."",""Update the `PATCH /vendors/me` endpoint to accept and validate the new field."",""Modify the customer-facing product retrieval logic to calculate and include the stock status based on this threshold."",""Add a data migration to set a default value for existing vendors.""]","[""All acceptance criteria validated and passing."",""E2E tests successfully simulate a vendor setting the threshold and a customer seeing the correct product status."",""Data migration script for existing vendors has been created, tested, and is ready for deployment."",""Story has been deployed and verified in the staging environment by QA.""]"
"VND-013","Product & Catalog Management","Vendor Bulk Imports Product Catalog via CSV","A registered Vendor user responsible for managing their store's product catalog on the platform.","As a Vendor, I want to bulk import my product catalog using a CSV file so that I can quickly and efficiently add or update many products at once, saving significant time compared to manual entry.","Reduces vendor onboarding time and effort, especially for those with large inventories. Improves data accuracy by minimizing manual entry errors. Encourages vendors to maintain a larger, more up-to-date product selection on the platform.","Should Have","8","[""VND-009"",""VND-008""]","[{""scenario"":""Successful import of a valid CSV file with new and updated products"",""given"":""The vendor has a correctly formatted CSV file with new products and updates to existing products (identified by SKU)"",""when"":""they upload the file via the import interface"",""then"":""the system processes it asynchronously, and upon completion, the new products are created and existing products are updated in the vendor's catalog.""},{""scenario"":""Partial success with mixed valid and invalid data"",""given"":""The vendor uploads a CSV file with both valid and invalid rows"",""when"":""the import process completes"",""then"":""the UI displays a summary message: 'Import complete: X products created/updated, Y rows failed.' and provides a link to download an error report.""}]","[""Implement an endpoint `POST /products/import/initiate` to generate a pre-signed S3 URL for upload."",""Implement an endpoint `POST /products/import/execute` to enqueue a job in SQS."",""Develop a background worker (Lambda or NestJS app) to consume SQS messages."",""The worker must stream the CSV from S3, parse it, and validate each row."",""Implement logic to either create a new product or update an existing one based on SKU."",""Use database transactions to import valid rows in batches.""]","[""All acceptance criteria validated and passing."",""The asynchronous processing job is monitored and logged correctly."",""Performance testing confirms the system meets the specified NFRs for file processing time."",""Security review of file handling and parsing logic is complete."",""Story deployed and verified in the staging environment.""]"
"VND-014","Product & Catalog Management","Vendor Receives Downloadable CSV Import Error Report","Vendor (Store owner or manager responsible for catalog management).","As a Vendor, I want to receive a downloadable error report that details exactly which rows failed during a CSV import and why, so that I can efficiently correct the data and successfully upload my product catalog.","Reduces vendor frustration and support ticket volume by enabling self-service error correction for bulk product uploads. Improves data quality and speeds up the vendor onboarding/catalog update process.","Should Have","5","[""VND-013""]","[{""scenario"":""Error report contains only failed rows and a new error description column"",""given"":""A vendor has received a failure message after a CSV import attempt"",""when"":""The vendor clicks the 'Download Error Report (.csv)' link"",""then"":""A CSV file is downloaded which contains ONLY the rows that failed validation, all original columns, and a new final column named 'Error_Description' detailing the error(s).""},{""scenario"":""Error description for multiple errors in a single row is comprehensive"",""given"":""A vendor uploads a CSV where a single row is missing the 'price' AND has a non-numeric 'stock_quantity'"",""when"":""The vendor downloads the corresponding error report"",""then"":""The 'Error_Description' column for that row must contain a concatenated message detailing all errors.""}]","[""Enhance the CSV processing worker from VND-013."",""Collect all failed rows and their validation error messages during processing."",""If failures exist, use a CSV generation library to create a new CSV file in memory or on disk."",""Upload the generated error report CSV to a secure S3 bucket."",""Send a notification to the vendor (e.g., via WebSocket) with a pre-signed download URL for the report.""]","[""All acceptance criteria validated and passing."",""The format of the downloaded error report CSV has been verified."",""Security requirements for temporary file storage and download links are implemented and verified."",""Documentation for the CSV import format, including all validation rules, is updated."",""Story deployed and verified in the staging environment.""]"
"VND-015","Product & Catalog Management","Vendor Bulk Exports Product Catalog to CSV","Vendor: A business owner or store manager responsible for managing their product catalog on the platform.","As a vendor, I want to export my entire product catalog to a CSV file, so that I can create a local backup of my data and perform external analysis or bulk updates.","Enhances vendor data portability and control, enabling offline analysis, backups, and streamlined bulk updates via an export-edit-reimport workflow.","Could Have","8","[""VND-009"",""VND-013""]","[{""scenario"":""Vendor successfully exports a populated product catalog"",""given"":""a vendor is logged into the vendor dashboard and is on the 'Products' management page"",""when"":""the vendor clicks the 'Export Catalog' button"",""then"":""the system initiates an asynchronous export job, and once complete, the vendor receives a notification with a secure, time-limited link to download the generated CSV file.""},{""scenario"":""Exported CSV handles special characters correctly"",""given"":""a vendor's product catalog contains items with special characters in their names"",""when"":""the vendor successfully exports their catalog"",""then"":""the generated CSV file is UTF-8 encoded and all fields containing special characters are properly quoted and escaped.""}]","[""Create an endpoint `POST /products/export` to trigger a background export job in SQS."",""Develop a background worker to consume the export job."",""The worker must query all of the vendor's products, using streaming to handle large catalogs."",""Generate a CSV file in the same format as the import template."",""Upload the file to S3 and notify the user with a pre-signed download URL.""]","[""All acceptance criteria validated and passing."",""Performance testing with a large catalog (>5,000 products) has been conducted."",""Security review of the file access mechanism has been completed and approved."",""Story deployed and verified in the staging environment.""]"
"VND-027","Vendor Compliance Management","Vendor Manages Business License Information for Compliance","A registered and approved vendor using the vendor-facing web dashboard.","As a vendor, I want to add, view, and update my business license details, such as FSSAI or drug license number and its expiry date, within my store profile, so that I can maintain my compliance with platform policies and legal regulations.","Ensures platform operates with legally compliant vendors, mitigating legal and reputational risk. Enables automated compliance checks, reminders, and enforcement actions.","Must Have","5","[""VND-005"",""ADM-021""]","[{""scenario"":""Vendor successfully adds a new license"",""given"":""I am a logged-in vendor on my store profile page"",""when"":""I navigate to the 'License Information' section, enter a valid license number and a future expiry date, and click 'Save'"",""then"":""The system saves the license information, a success message is displayed, and the creation event is recorded in the audit log.""},{""scenario"":""Vendor attempts to save a license with a past expiry date"",""given"":""I am a logged-in vendor in the process of adding or editing a license"",""when"":""I select an expiry date that is in the past and attempt to save"",""then"":""The system prevents the form submission and displays a clear, inline validation error message such as 'Expiry date must be in the future'.""}]","[""Define and create a TypeORM entity for `VendorLicense` with a many-to-one relationship to `VendorProfile`."",""Implement API endpoints for vendors to `POST` and `PATCH` their license information."",""Implement validation to ensure `expiryDate` is a future date."",""Ensure every create, update, or delete operation is recorded in an audit log.""]","[""All acceptance criteria validated and passing."",""E2E test scenario for adding and editing a license is automated and passing."",""Security requirement for data encryption at rest is verified."",""Audit log integration is confirmed to be working correctly."",""Story deployed and verified in the staging environment.""]"
"VND-028","Vendor Compliance Management","Vendor Receives Automated License Expiry Reminders","An active Vendor on the platform who is required to maintain one or more business licenses.","As a Vendor, I want to receive automated notifications at specific intervals (30, 15, and 7 days) before my business license expires, so that I have sufficient time to complete the renewal process and update my details on the platform.","Ensures vendors remain compliant, preventing automatic deactivation and subsequent revenue loss for both the vendor and the platform. Reduces administrative overhead for tracking and managing vendor compliance.","Should Have","5","[""VND-027"",""VND-001""]","[{""scenario"":""30-Day Expiry Reminder Trigger"",""given"":""A vendor has a license stored in the system with an expiry date exactly 30 days from today's date"",""when"":""The daily automated license check job runs"",""then"":""The system sends a reminder notification to the vendor via push notification and email.""},{""scenario"":""Reminders Stop After License Update"",""given"":""A vendor has a license expiring in 20 days and has already received the 30-day reminder"",""when"":""The vendor updates their license information with a new expiry date set for one year in the future"",""then"":""The system must not send the 15-day or 7-day reminders associated with the old expiry date.""}]","[""Create a scheduled job (Lambda function triggered by AWS EventBridge) that runs daily."",""The job must query the `VendorLicense` table for licenses expiring in exactly 30, 15, and 7 days."",""For each expiring license found, the job must publish a notification event to an SNS topic."",""The job must have robust logging and monitoring to detect failures.""]","[""All acceptance criteria validated and passing."",""The scheduled job is deployed with appropriate logging, monitoring, and alerts for failures."",""Manual E2E tests have been successfully executed for all key scenarios."",""Story deployed and verified in staging environment.""]"
"VND-029","Vendor Compliance Management","Vendor Prevented from Operating with Expired License","Vendor (e.g., restaurant owner, shopkeeper)","As a Vendor, I want the system to automatically prevent me from accepting new orders if my business license is expired, and clearly notify me of the reason, so that I am immediately aware of the compliance issue and can take action to renew my license and resume my business operations on the platform.","Ensures platform compliance with local regulations by automatically preventing business with non-compliant vendors. Mitigates legal and reputational risk for the platform and protects customers.","Must Have","5","[""VND-027"",""VND-016"",""ADM-021""]","[{""scenario"":""System automatically blocks a vendor whose license has expired"",""given"":""A vendor's license expiry date was yesterday"",""when"":""A daily system job runs to check for expired licenses"",""then"":""The system updates the vendor's status to 'suspended_license_expired' and logs the action in the audit trail.""},{""scenario"":""A suspended vendor is not assigned new orders"",""given"":""A vendor's status is 'suspended_license_expired'"",""when"":""The order management service attempts to assign a new order to this vendor"",""then"":""The assignment fails, and the system does not send the order to the vendor.""},{""scenario"":""Suspended vendor is shown a clear notification on their dashboard"",""given"":""A vendor with status 'suspended_license_expired' logs into their web dashboard"",""when"":""They view their main dashboard page"",""then"":""A prominent, non-dismissible notification is displayed stating 'Your store is offline because your license has expired. Please update your license details to resume operations.'""}]","[""Enhance the scheduled license check job to also check for licenses with an expiry date in the past."",""If an expired license is found, the job must call the Vendor service to update the vendor's status to 'suspended_license_expired'."",""The status change must be recorded in the audit log."",""The Order Management service must be updated to check a vendor's status before assigning an order.""]","[""All acceptance criteria validated and passing."",""E2E tests for the suspension and reactivation flow are automated and passing."",""The scheduled job is deployed with appropriate logging, monitoring, and alerts."",""Story deployed and verified in the staging environment.""]"