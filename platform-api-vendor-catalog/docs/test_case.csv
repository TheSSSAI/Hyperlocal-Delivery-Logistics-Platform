"test_id","feature_area","test_type","test_level","priority","automation_candidate","automation_roi","test_description","business_risk","technical_complexity","preconditions","test_steps","expected_result","test_data_needs","tools_required","estimated_effort_hours","automation_effort_hours","maintenance_effort_annual","dependencies","environment_requirements","success_criteria","failure_impact","regression_frequency","data_setup_complexity","cleanup_requirements","security_considerations","performance_expectations","accessibility_requirements"
"TEST-AUTH-001","User Authentication","Security","E2E","Critical","true","High","Verify the complete OTP login flow, including successful login, incorrect OTP, expired OTP, and account lockout after 5 failed attempts as per REQ-1-039 and REQ-1-041.","Critical - A flaw could allow unauthorized access or lock out legitimate users, destroying trust and platform integrity.","Medium","User account exists in Cognito with 'approved' status. Redis is running. AWS SNS is configured.","1. Enter registered mobile number, request OTP. 2. Enter incorrect OTP 5 times. 3. Verify 'Account Locked' message. 4. Wait for lockout period. 5. Request new OTP. 6. Enter correct OTP. 7. Verify successful login and JWT issuance.","User is successfully logged in after the lockout period, and all intermediate error states and security mechanisms function as specified.","Approved user accounts (Customer, Vendor, Rider), a mechanism to retrieve OTPs in the test environment, a tool to manipulate system time to test expiry.","Detox/Appium (Mobile), Cypress (Web), Postman/Jest (API), Redis CLI","8","24","8","AWS Cognito, AWS SNS, Redis","Staging environment with integrated services.","100% pass rate; P95 login latency <3s; Lockout triggers at exactly 5 failures and lasts for the configured duration.","Critical - Brute-force attacks could compromise user accounts.","Every release","Medium","Reset failed attempt counters and lockout status in Redis for test users.","Tests must use dedicated test accounts. OTPs and tokens must be handled securely even in test logs.","OTP validation API P95 latency < 200ms.","Error messages must be announced by screen readers."
"TEST-ORDER-001","Order Placement","Functional","E2E","Critical","true","High","Verify the end-to-end choreographed saga for placing a prepaid order, including inventory check, payment intent creation, mock payment, and order confirmation as per Sequence Diagram ID 206.","Critical - This is the primary revenue-generating workflow. Any failure directly results in lost sales and poor customer experience.","High","Customer is logged in, has items in cart, and a valid delivery address. Vendor, Catalog, and Payments services are running.","1. Customer proceeds to checkout. 2. API triggers inventory check. 3. API triggers payment intent creation. 4. Customer is redirected to a mock payment gateway. 5. Customer 'approves' payment. 6. Backend receives mock webhook. 7. Order status transitions to 'pending_vendor_acceptance'.","The order is successfully created in the correct initial state, and all intermediate steps of the saga complete successfully.","Test customer account, test products with known stock levels, a mock payment gateway that can simulate success and failure webhooks.","Detox/Appium, Cypress, Mock server (e.g., WireMock), AWS SQS/SNS verification tools.","12","40","15","Vendor & Catalog Service, Payments & Settlements Service, Notification Service.","Integration environment with all microservices and mocked external gateways.","Order is created with 100% data integrity; All events in the saga are published and consumed correctly.","Critical - Users cannot place orders, resulting in zero revenue.","Every release","High","Delete test orders, reset inventory levels.","Payment signature verification must be tested. No sensitive data should be logged.","Checkout initiation API P95 latency < 200ms.","N/A for saga, but UI components must be accessible."
"TEST-FIN-001","Financial Management","Functional","Unit","Critical","true","High","Verify the commission calculation logic against REQ-1-033, covering the hierarchy: vendor-specific rate, category rate, and global default rate.","High - Incorrect commission calculations lead to financial discrepancies, loss of revenue, and damaged partner trust.","Medium","Commission calculation service/module is available for testing.","1. Test with a vendor having no specific or category rate (uses default). 2. Test with a vendor in a category with a custom rate. 3. Test with a vendor having their own specific rate. 4. Test with edge cases like zero-value orders or 0% commission.","The commission is calculated with 100% accuracy for all scenarios based on the defined precedence.","A matrix of order values, default rates, category rates, and vendor-specific rates.","Jest","6","10","2","N/A (isolated unit test).","Local development environment.","100% accuracy on all calculation test cases; handles decimal precision correctly.","High - Incorrect payouts to vendors and incorrect revenue recognition for the platform.","Every commit to the financial module.","Low","N/A","N/A for unit test.","Calculation should be highly performant (<1ms).","N/A"
"TEST-LOGISTICS-001","Rider Logistics","Functional","E2E","High","true","Medium","Verify the rider allocation re-assignment logic as per REQ-1-079. An order is rejected by the first rider and immediately offered to the next best rider.","High - Failure in re-assignment leads to delayed or failed deliveries, poor customer experience, and operational inefficiency.","High","An order is in 'Ready for Pickup' state. At least two riders are online and available in the vicinity.","1. System offers task to Rider A. 2. Rider A rejects the task via a mock API call. 3. Verify the system immediately offers the same task to Rider B. 4. Verify Rider A is not offered the task again in this cycle.","The task is successfully re-assigned to the next eligible rider within seconds of the initial rejection.","Test accounts for two riders, a vendor, and a customer. A mechanism to simulate rider locations and rejections.","Detox/Appium (or mock clients), Postman/Jest, GPS simulation tools.","10","30","10","Order Management Service, Rider Logistics Service, Notification Service.","Integration environment.","Re-assignment latency < 2 seconds; correct rider is chosen based on proximity/rating.","High - Orders get stuck, leading to manual intervention and delivery failures.","Every release","High","Reset rider and order states.","Ensure a rider can only reject a task assigned to them.","Re-allocation algorithm runs in < 500ms.","N/A"