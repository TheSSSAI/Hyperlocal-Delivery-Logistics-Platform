name: Deploy Orders Service to EKS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: platform-api-orders
  EKS_CLUSTER_NAME: platform-eks-cluster
  EKS_DEPLOYMENT_NAME: orders-deployment

jobs:
  deploy:
    name: Build, Push, and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubAction-ECR-EKS-Role
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Configure kubectl for EKS
        uses: aws-actions/amazon-eks-cluster-entrypoint@v1
        with:
          cluster_name: ${{ env.EKS_CLUSTER_NAME }}

      - name: Deploy to EKS
        run: |
          # This is a simplified deployment. In a real-world scenario, you would use a kustomization
          # or a Helm chart and apply the changes. This example uses `kubectl set image`.
          # Assumes the deployment 'orders-deployment' already exists in the cluster.
          kubectl set image deployment/${{ env.EKS_DEPLOYMENT_NAME }} orders-container=${{ steps.build-image.outputs.image }} -n services
          kubectl rollout status deployment/${{ env.EKS_DEPLOYMENT_NAME }} -n services