"test_id","feature_area","test_type","test_level","priority","automation_candidate","automation_roi","test_description","business_risk","technical_complexity","preconditions","test_steps","expected_result","test_data_needs","tools_required","estimated_effort_hours","automation_effort_hours","maintenance_effort_annual","dependencies","environment_requirements","success_criteria","failure_impact","regression_frequency","data_setup_complexity","cleanup_requirements","security_considerations","performance_expectations","accessibility_requirements"
"TEST-AUTH-001","User Authentication","Functional","E2E","Critical","true","High","Verify customer can successfully log in using a valid mobile number and OTP, receives JWTs, and is redirected to the home screen. (Covers CUS-003)","Critical - Login failure blocks all user activity and revenue generation.","Medium","Customer account exists with 'active' status. AWS SNS is configured and operational. Authentication service is running.","1. Navigate to customer login screen. 2. Enter a valid, registered mobile number. 3. Click 'Send OTP'. 4. Intercept the OTP from the test harness. 5. Enter the correct OTP. 6. Click 'Verify & Login'. 7. Verify redirection to the main dashboard. 8. Verify valid JWTs (access and refresh tokens) are stored in the client's secure storage.","User is successfully authenticated, receives valid JWTs, and is granted access to the application's main dashboard within 3 seconds.","A pre-provisioned active customer account with a known mobile number. A mechanism to retrieve OTPs in the test environment.","Cypress/Detox; Mock SMS Gateway; JWT Inspector","3","12","4","Identity & Access Service; AWS Cognito; AWS SNS","Staging environment with integrated services.","100% test pass rate; P95 end-to-end latency < 3 seconds.","Critical - Blocks all user engagement.","Every build","Medium","Logout user to invalidate session tokens.","Test for rate limiting on OTP requests and account lockout after multiple failures.","E2E process completes in < 3 seconds (REQ-FUN-002).","All login form elements are WCAG 2.1 AA compliant."
"TEST-PAY-001","Payments & Checkout","Functional","Integration","Critical","true","High","Verify the successful processing of a prepaid order via Razorpay, including the Saga steps for order creation, payment processing, and vendor notification. (Covers CUS-025, SEQUENCE-206)","Critical - Failure in the payment flow results in direct revenue loss and customer dissatisfaction.","High","Customer is logged in with items in cart. Payment, Order, and Vendor services are running. Razorpay sandbox is available.","1. API call to initiate checkout. 2. Verify real-time inventory check is triggered and succeeds. 3. Verify payment intent is created with Razorpay. 4. Mock a successful payment callback from Razorpay to the webhook endpoint. 5. Verify the order status transitions to 'pending_vendor_acceptance'. 6. Verify a 'PaymentConfirmedEvent' is published. 7. Verify a corresponding financial transaction is recorded in the double-entry ledger.","Order is successfully created with the correct status, payment is captured, and all downstream events for the Saga are published correctly.","Customer session token, valid cart ID, Razorpay test credentials, mock successful payment webhook payload.","Jest/Supertest; Mock server (WireMock) for Razorpay; AWS SQS/SNS test client.","8","24","8","Order Service; Payment Service; Vendor Service; Razorpay API.","Integration environment with service dependencies and mock for Razorpay.","All Saga steps complete successfully. Data is consistent across Order and Payment services.","Critical - Prevents order placement and revenue capture.","Every build","High","Delete created order and financial transaction records.","Validate payment signature on the webhook to prevent tampering.","P95 API latency for payment initiation < 200ms.","N/A (API Test)"
"TEST-LOGISTICS-005","Rider Logistics","Functional","E2E","Critical","true","High","Verify the rider allocation re-assignment flow when a rider rejects a task. (Covers SYS-002, RDR-013)","High - Failure to re-assign tasks leads to unfulfilled orders and customer churn.","High","Two riders are 'Online'. An order is 'Ready for Pickup'.","1. Trigger the rider allocation process for the order. 2. Verify Rider A receives the task offer. 3. Simulate Rider A rejecting the task via API call. 4. Verify the system immediately offers the task to Rider B. 5. Verify Rider A is not offered the same task again. 6. Simulate Rider B accepting the task. 7. Verify the order is assigned to Rider B and its status is updated.","The system gracefully handles the rejection and re-assigns the task to the next-best rider within 2 seconds.","Two active rider accounts, one active vendor, one customer, one order in 'Ready for Pickup' state.","Cypress/Detox; API client (for simulating rider actions).","6","20","6","Order Service; Rider Logistics Service; Notification Service.","Staging environment.","Re-assignment is successful and meets performance NFRs. Rider A is correctly excluded from the re-assignment pool for this order.","High - Orders get stuck, leading to cancellations.","Every release","High","Reset state of riders and the order.","Verify a rider can only reject a task specifically assigned to them.","Latency between rejection and new offer is < 2 seconds.","N/A (System Logic)"
"TEST-VND-010","Vendor Catalog Management","Performance","System","High","true","High","Verify the performance of the asynchronous CSV bulk import worker under load. (Covers VND-013)","Medium - Slow imports frustrate vendors and delay onboarding of new products.","Medium","CSV processing worker is deployed. SQS queue and S3 bucket are configured. Database is seeded with a vendor.","1. Generate a valid CSV file with 5,000 product rows. 2. Upload the file to S3 and place a corresponding job message on the SQS queue. 3. Monitor the time taken for the worker to consume the message and complete processing. 4. Monitor worker CPU/memory usage and database load during the process. 5. Verify all 5,000 products are correctly created in the database.","The asynchronous processing of a CSV with 5,000 rows completes in under 5 minutes without causing significant degradation to other system components.","A large, valid CSV file (5,000 rows). A test vendor account.","k6/JMeter; AWS SQS/S3 CLI; Database client; CloudWatch/Grafana.","8","16","4","Vendor & Catalog Service worker; AWS SQS; AWS S3; PostgreSQL DB.","Dedicated Performance environment.","Job completion time < 5 minutes. DB CPU utilization < 70%. Worker memory usage within defined limits.","Medium - Scalability issues with vendor onboarding.","Quarterly or after major changes to the worker.","Medium","Delete all imported products.","Test with a CSV containing malicious formulas to check for formula injection vulnerabilities.","Process 5,000 rows in under 5 minutes.","N/A (Backend Process)"