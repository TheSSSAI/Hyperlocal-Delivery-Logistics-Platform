"story_id","epic","title","user_role","description","business_value","priority","story_points","dependencies","acceptance_criteria","technical_tasks","definition_of_done"
"CUS-001","Identity & Access Management","Customer Registers with Mobile Number and OTP","Prospective Customer","As a new user, I want to register for an account using my Indian mobile number and an OTP, so that I can securely create my profile and start placing orders.","Enables new user acquisition by providing a secure and standard entry point. Validates the user's primary contact method, reducing fraudulent accounts.","Must Have","8","[]","[{""scenario"":""Successful registration with a new mobile number"",""given"":""A new user is on the registration screen"",""when"":""The user enters a valid, unregistered 10-digit Indian mobile number, requests and enters the correct OTP"",""then"":""The system creates a new customer account, issues a JWT, and navigates the user to the profile creation screen.""},{""scenario"":""Attempted registration with an existing mobile number"",""given"":""A user is on the registration screen"",""when"":""The user enters a mobile number that is already registered"",""then"":""The system displays an error message 'This mobile number is already registered. Please log in instead.' and does not proceed.""}]","[""Create NestJS endpoints for requesting and verifying OTP for customer registration."",""Integrate with AWS SNS to send OTP SMS."",""Use Redis to store OTP hash with a 5-minute TTL."",""Add a unique constraint on the mobile number in the user database."",""Implement logic to create a user record and issue JWTs upon successful verification.""]","[""API endpoints are documented in OpenAPI spec."",""Unit and integration tests achieve >80% coverage."",""E2E test for successful registration is automated and passing."",""Security requirements for rate limiting and OTP handling are met."",""Performance of the API meets the <500ms P95 latency requirement.""]"
"VND-001","Identity & Access Management","Vendor Initiates Registration with Business Details","Prospective Vendor","As a prospective local business owner, I want to fill out a registration form with my business details and upload legal documents, so that my application can be verified to start selling on the platform.","Critical step in the vendor acquisition funnel. A seamless registration process is essential for growing the platform's vendor network.","Must Have","5","[""ADM-001""]","[{""scenario"":""Successful registration submission"",""given"":""A new vendor is on the registration page"",""when"":""The vendor enters all mandatory fields and uploads required documents (e.g., GST certificate)"",""then"":""The system creates a new vendor account with a status of 'pending_verification' and securely stores the documents.""},{""scenario"":""Attempt to register with an existing mobile number or GST number"",""given"":""A vendor with a specific mobile number or GST number already exists"",""when"":""A new vendor attempts to register using the same mobile number or GST number"",""then"":""The backend rejects the submission, and an error message is displayed on the form.""}]","[""Create NestJS endpoints for multi-step vendor registration."",""Generate S3 pre-signed URLs for secure document uploads."",""Set initial user status to 'pending_verification' in the database."",""Implement validation for uniqueness of mobile number and GST number.""]","[""API endpoints are documented in OpenAPI spec."",""Unit and integration tests achieve >80% coverage."",""E2E test for successful vendor registration is automated and passing."",""Secure file handling for document uploads is implemented and verified.""]"
"RDR-001","Identity & Access Management","Rider Initiates Registration with Document Upload","Prospective Rider","As a prospective delivery rider, I want to register by providing my personal, vehicle, and bank details, and uploading documents like my driver's license, so my application can be verified.","Enables the onboarding of new riders, which is critical for expanding the platform's delivery capacity and scaling operations.","Must Have","5","[""ADM-001""]","[{""scenario"":""Successful registration submission"",""given"":""A new user is on the rider registration screen"",""when"":""They enter all valid required details and upload all required documents"",""then"":""The system creates a new rider user record with a status of 'pending_verification' and securely stores the documents.""},{""scenario"":""Attempt to register with an existing mobile number"",""given"":""A new user is on the registration form"",""when"":""They enter a mobile number that already exists in the system"",""then"":""An inline error message is displayed, and the user cannot proceed.""}]","[""Create NestJS endpoints for multi-step rider registration."",""Generate S3 pre-signed URLs for secure document uploads."",""Set initial user status to 'pending_verification' in the database."",""Implement validation for required fields and document types.""]","[""API endpoints are documented in OpenAPI spec."",""Unit and integration tests achieve >80% coverage."",""E2E test for successful rider registration is automated and passing."",""Secure file handling for document uploads is implemented and verified.""]"
"ADM-003","Platform Administration","Admin Approves a Vendor or Rider Registration","Administrator","As an Administrator, I want to approve a verified vendor or rider registration with a single action, so that I can efficiently onboard them to the platform and grant them operational access.","Enables the growth of the vendor and rider network. Acts as a critical quality and security gate, ensuring only vetted partners are onboarded.","Must Have","3","[""ADM-001"",""ADM-002"",""VND-001"",""RDR-001""]","[{""scenario"":""Approve a valid Vendor registration"",""given"":""An Administrator is viewing a Vendor's registration with a 'pending_verification' status"",""when"":""The Administrator clicks the 'Approve' button and confirms"",""then"":""The Vendor's account status changes to 'active', an approval notification is sent, and an entry is created in the audit trail.""},{""scenario"":""Attempting to approve a registration already processed"",""given"":""An Administrator is viewing a pending registration that another administrator has just processed"",""when"":""The Administrator clicks the 'Approve' button"",""then"":""The system prevents the action and displays an error message 'This registration has already been processed'.""}]","[""Create authenticated API endpoints for Administrators to approve or reject applications."",""Endpoints must be protected by an Admin role guard."",""Approval/rejection action must change user status in the database."",""Approval/rejection action must trigger a notification event to the user."",""All approval/rejection actions must be logged in the immutable audit trail.""]","[""API endpoints are documented in OpenAPI spec."",""Unit and integration tests achieve >80% coverage."",""E2E test for the approval flow is automated and passing."",""Security testing confirms only Admins can access the endpoints.""]"
"CUS-003","Identity & Access Management","Customer Logs In with OTP","Registered Customer","As a registered customer, I want to log in to my account using my mobile number and an OTP so that I can access my profile and place orders.","Provides a secure and convenient method for users to access their accounts, which is a critical prerequisite for all platform engagement.","Must Have","5","[""CUS-001""]","[{""scenario"":""Successful Login on Happy Path"",""given"":""A registered customer is on the login screen"",""when"":""The customer enters their valid mobile number, requests an OTP, and enters it correctly"",""then"":""The system validates the OTP, issues JWTs, and redirects the customer to the main dashboard.""},{""scenario"":""Account Lockout After Multiple Failed OTP Attempts"",""given"":""A customer has made 4 consecutive failed OTP attempts"",""when"":""The customer makes a 5th consecutive failed OTP attempt"",""then"":""The system temporarily locks the account and displays a message 'Too many failed attempts. Your account is locked.'.""}]","[""Create NestJS endpoints for OTP-based login (request and verify)."",""Implement rate limiting and account lockout logic using Redis."",""Upon successful verification, return JWT access and refresh tokens."",""Implement secure client-side storage for tokens.""]","[""API endpoints are documented in OpenAPI spec."",""Unit and integration tests achieve >80% coverage."",""E2E test for the login flow is automated and passing."",""Security features (rate limiting, lockout) are implemented and tested."",""Performance of the login process is under 3 seconds.""]"
"VND-004","Identity & Access Management","Vendor Logs In with OTP","Registered Vendor","As a registered vendor, I want to log in to my dashboard using my mobile number and an OTP so that I can securely manage my store.","Provides secure, passwordless access for vendors to the platform's core management tools, enhancing security and user experience.","Must Have","3","[""VND-001"",""ADM-003""]","[{""scenario"":""Successful login with a valid mobile number and correct OTP"",""given"":""A registered and active vendor is on the vendor login page"",""when"":""They enter their mobile number, request and enter the correct OTP"",""then"":""The system validates the OTP, issues JWTs, and redirects them to the vendor dashboard.""},{""scenario"":""Login attempt with a non-active vendor account"",""given"":""A vendor account exists but its status is 'pending_verification' or 'suspended'"",""when"":""They attempt to log in"",""then"":""The system displays an appropriate message (e.g., 'Your account is pending approval.') and does not proceed with the login.""}]","[""Reuse and adapt the existing OTP login logic for the vendor user type."",""Ensure the login endpoint checks for an 'active' vendor status before issuing tokens."",""Redirect to the vendor-specific web dashboard upon successful login.""]","[""Login flow is tested for vendors with 'active', 'pending', and 'suspended' statuses."",""Code is refactored to be reusable across user types where applicable."",""E2E test for vendor login is automated and passing.""]"
"RDR-004","Identity & Access Management","Rider Logs In with OTP","Registered Rider","As a registered Rider, I want to log in to the mobile application using my registered mobile number and an OTP so that I can access my account to manage my availability and tasks.","Provides a secure, password-less authentication method for riders, improving user experience and reducing support overhead from forgotten passwords.","Must Have","3","[""RDR-001"",""ADM-003""]","[{""scenario"":""Successful login with a valid mobile number and correct OTP"",""given"":""A registered and approved rider is on the login screen"",""when"":""They enter their mobile number, request and enter the correct OTP"",""then"":""The system validates the OTP, issues JWTs, and navigates the rider to the main application dashboard.""},{""scenario"":""Account is temporarily locked after multiple failed OTP attempts"",""given"":""A rider has entered an incorrect OTP 4 consecutive times"",""when"":""The rider enters an incorrect OTP for the 5th consecutive time"",""then"":""The system displays a message indicating the account is temporarily locked.""}]","[""Reuse and adapt the existing OTP login logic for the rider user type."",""Ensure the login endpoint checks for an 'active' rider status before issuing tokens."",""Redirect to the rider-specific mobile dashboard upon successful login.""]","[""Login flow is tested for riders with 'active', 'pending', and 'suspended' statuses."",""Code is refactored to be reusable across user types where applicable."",""E2E test for rider login is automated and passing.""]"
"VND-009","Vendor Catalog Management","Vendor Adds a New Product to Catalog","Vendor","As a Vendor, I want to add a new product to my catalog by providing its name, description, price, an image, and stock quantity, so that I can make my goods available for customers.","Enables vendors to populate their digital storefront, which is the fundamental requirement for generating sales on the platform.","Must Have","5","[""VND-004"",""VND-008""]","[{""scenario"":""Successful Product Creation"",""given"":""The vendor is on the 'Add Product' page"",""when"":""The vendor fills in all required fields with valid data, uploads a valid image, and clicks 'Save Product'"",""then"":""The system creates the new product, stores the image, and the new item is visible in the vendor's product list.""},{""scenario"":""Attempt to Save with Missing Required Fields"",""given"":""The vendor is on the 'Add Product' page"",""when"":""The vendor attempts to save without providing a 'Product Name' or 'Price'"",""then"":""The form submission is blocked, and an inline validation error message is displayed.""}]","[""Create a backend API endpoint (POST /products) for product creation."",""Implement logic to handle multipart/form-data for image uploads."",""Integrate with AWS S3 for secure image storage."",""Perform server-side validation for all product fields."",""Create the frontend form for adding a new product.""]","[""API endpoint is documented in OpenAPI spec."",""Unit and integration tests achieve >80% coverage."",""E2E test for adding a product is automated and passing."",""Security checks for input sanitization and file upload are implemented.""]"
"WI-003-1-1","Order Fulfillment","Customer Places an Order","Customer","As a Customer, I want to place an order from my cart, so that the transaction is processed and the vendor can begin preparing my items.","Manages the core business transaction of the platform, ensuring orders are processed reliably and accurately.","Must Have","8","[""CUS-016"",""CUS-025""]","[{""scenario"":""Successful order creation"",""given"":""A customer has items in their cart and has completed payment"",""when"":""The system receives a successful payment confirmation"",""then"":""An order record is created in the database with the status 'pending_vendor_acceptance' and an 'OrderPlaced' event is published.""},{""scenario"":""Checkout is halted if an item is out of stock"",""given"":""A customer is about to pay for items in their cart"",""when"":""A real-time inventory check reveals an item is no longer available"",""then"":""The checkout process is halted, and the user is notified to update their cart.""}]","[""Create the primary API endpoint for placing an order (POST /orders)."",""Implement a Saga pattern to orchestrate the checkout process."",""Integrate with the Vendor service for a synchronous, real-time inventory check."",""Integrate with the Payments service to create a payment intent."",""Create the order record in the database upon successful payment.""]","[""API endpoint is documented in OpenAPI spec."",""Integration tests covering the full checkout saga are implemented and passing."",""Performance of the checkout endpoint is tested under load."",""The distributed transaction logic is reviewed for robustness.""]"
"WI-004-2-1","Logistics & Delivery","System Allocates Order to a Rider","Platform","As the Platform, I want to automatically allocate a 'Ready for Pickup' order to the most suitable available rider, so that the delivery process is efficient and timely.","Forms the core of the platform's logistics engine, directly impacting delivery speed, operational efficiency, and customer experience.","Must Have","8","[""VND-021"",""RDR-009""]","[{""scenario"":""Algorithm successfully assigns a task"",""given"":""An order is 'Ready for Pickup' and there are available riders nearby"",""when"":""The allocation service consumes the 'OrderReadyForPickup' event"",""then"":""The algorithm correctly identifies and offers the task to the best available rider based on proximity, load, and rating.""},{""scenario"":""Re-assignment on rider rejection"",""given"":""A rider rejects a task offer"",""when"":""The allocation service receives the rejection event"",""then"":""The task is immediately offered to the next best available rider.""},{""scenario"":""Allocation failure"",""given"":""A task has been rejected by 3 consecutive riders"",""when"":""The 3rd rejection is processed"",""then"":""An 'AllocationFailed' event is published for administrative review.""}]","[""Develop the allocation logic to consume 'OrderReadyForPickup' events."",""Use PostGIS geospatial queries (ST_DWithin) to find nearby riders."",""Integrate with Mapbox Directions API for route optimization if batching is considered."",""Implement retry logic for up to 3 riders before failing the allocation."",""Publish 'TaskOffered' and 'AllocationFailed' events.""]","[""Allocation logic is unit tested with mock data for various scenarios."",""Integration tests verify geospatial queries and event handling."",""Performance of the allocation algorithm is tested."",""Re-assignment and failure logic are fully tested.""]"
"WI-006-1-2","Platform Infrastructure","Provision Kubernetes Cluster via IaC","Platform Owner","As a Platform Owner, I want the Kubernetes (EKS) cluster and its node groups to be defined as code using Terraform, so that we can have a repeatable, scalable, and version-controlled foundation for deploying our microservices.","Enables automated, reliable, and scalable deployment of the entire platform, increasing development velocity and operational stability.","Must Have","8","[""WI-006-1-1""]","[{""scenario"":""Terraform apply successfully provisions the EKS cluster"",""given"":""The Terraform configuration for the EKS cluster is complete"",""when"":""A DevOps engineer runs 'terraform apply'"",""then"":""An EKS cluster is provisioned across multiple availability zones and is accessible via kubectl.""},{""scenario"":""Cluster Autoscaler is functional"",""given"":""The EKS cluster is running"",""when"":""The cluster experiences high pod scheduling pressure"",""then"":""The Cluster Autoscaler automatically provisions new nodes in the node group.""}]","[""Create Terraform configuration for the AWS EKS cluster control plane."",""Define managed node groups with autoscaling configurations."",""Configure IAM roles and policies for EKS."",""Integrate the EKS cluster with the defined VPC."",""Deploy and configure the Cluster Autoscaler and metrics server.""]","[""Terraform code is modular, reusable, and peer-reviewed."",""The EKS cluster is successfully created and passes a health check."",""A sample application can be deployed to the cluster."",""Autoscaling functionality is verified.""]"
"WI-006-2-2","Platform Infrastructure","Implement Continuous Deployment Pipeline for Microservices","Development Team","As a Development Team, I want a fully automated Continuous Deployment pipeline, so that any code merged into the main branch is automatically built, tested, and deployed to the staging environment with zero downtime.","Increases development velocity, reduces manual deployment errors, and ensures a consistent and reliable path to production.","Must Have","8","[""WI-006-1-2"",""WI-006-2-1""]","[{""scenario"":""Merge to main branch triggers successful deployment"",""given"":""A developer merges a pull request into the main branch for a microservice"",""when"":""The GitHub Actions CD workflow is triggered"",""then"":""A new version of the service is deployed to the Staging EKS cluster without interrupting service.""},{""scenario"":""Deployment failure triggers a notification"",""given"":""A deployment to the EKS cluster fails (e.g., pods fail to start)"",""when"":""The CD workflow detects the failure"",""then"":""The workflow fails, and a notification is sent to the development team's Slack channel.""}]","[""Develop a GitHub Actions workflow for continuous deployment."",""Configure secure authentication with AWS using OIDC."",""Implement steps to build and push a tagged Docker image to AWS ECR."",""Implement steps to apply updated Kubernetes manifests to the EKS cluster using kubectl or a GitOps tool."",""Configure deployment strategy for rolling updates.""]","[""The GitHub Actions workflow is documented and reusable."",""Secrets and credentials are handled securely."",""A successful deployment can be verified by checking the image tag in the EKS cluster."",""A rollback strategy is documented or implemented.""]"